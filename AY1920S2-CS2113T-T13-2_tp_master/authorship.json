[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    id \u0027java-library\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "group \u0027seedu.nuke\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    //config the jar to Mavern library"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    implementation \u0027org.fusesource.jansi:jansi:1.18\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.12\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    implementation \u0027org.apache.commons:commons-io:1.3.2\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "java {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "java {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    mainClassName \u003d \"seedu.nuke.Nuke\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    archiveBaseName \u003d \"nuke\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    archiveVersion \u003d \"2.0\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "A11riseforme": 5,
      "iceclementi": 31,
      "-": 37
    }
  },
  {
    "path": "data/save.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- MODULE ---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS1231 -|||- Discrete Structures -|||- NIL"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Assignment -|||- 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "group work -|||- Y -|||- 28/03/2020 06:00PM -|||- 20"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "some -|||- N -|||- 06/04/2020 03:00PM -|||- 5"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "a task -|||- Y -|||- 03/04/2020 03:00PM -|||- 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "work -|||- N -|||- 31/03/2020 08:00PM -|||- 3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "read chapter 6 notes -|||- N -|||-  -|||- 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "notes_6 -|||- ENxre2l2bHmdagbY -|||- C:\\Users\\icecl\\Desktop\\CS2113T\\tP Diagrams\\Number_4.png"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture Quiz 6 -|||- N -|||- 06/06/2020 11:59PM -|||- 6"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Tutorial 6 -|||- N -|||- 24/03/2020 11:59PM -|||- 6"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "a work -|||- N -|||- 03/04/2020 08:00PM -|||- 2"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "some -|||- N -|||- 07/04/2020 11:59PM -|||- 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS2100 -|||- Computer Organisation -|||- NIL"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "watch webcast -|||- N -|||-  -|||- 1"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS2113 -|||- Software Engineering \u0026 Object-Oriented Programming -|||- NIL"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "A -|||- 0"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Bigger Lab -|||- 6"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Big Lab Work -|||- N -|||- 25/03/2020 06:00PM -|||- 7"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lab -|||- 0"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "read -|||- N -|||-  -|||- 0"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "tp -|||- N -|||-  -|||- 0"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Number_2 -|||- zpNbS6YtMIQgq8sz -|||- C:\\Users\\icecl\\Desktop\\CS2113T\\tP Diagrams\\Number_2.png"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Number_1 -|||- fwDbf0OsCZSUwyxH -|||- C:\\Users\\icecl\\Desktop\\CS2113T\\tP Diagrams\\Number_1.png"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "notes -|||- N -|||-  -|||- 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "tutorial worksheet 10 -|||- N -|||- 25/03/2020 12:00PM -|||- 5"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS2113T -|||- Software Engineering \u0026 Object-Oriented Programming -|||- NIL"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "do tutorial 1 -|||- N -|||- 11/04/2020 11:59PM -|||- 8"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS3230 -|||- Design and Analysis of Algorithms -|||- NIL"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "lab1 -|||- N -|||-  -|||- 3"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END MODULE ---"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 17,
      "iceclementi": 120
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "![](https://avatars0.githubusercontent.com/u/50083580?s\u003d400\u0026u\u003d361572b20fcd6750428a1553c5388e5125b8ac13\u0026v\u003d4) | Wang Qin | [Github](https://github.com/wangqinNick) | [Portfolio](docs/team/wangqin.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Chenglong | [Github](https://github.com/A11riseforme) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hao Yun | [Github](https://github.com/HAOYUN49) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![](https://winaero.com/blog/wp-content/uploads/2019/09/Chrome-Incognito-Mode-Icon-256.png) | Clement Cheng | [iceclementi](https://github.com/iceclementi) | [Portfolio](docs/team/iceclementi.md)"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 1,
      "A11riseforme": 1,
      "iceclementi": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cstyle type\u003d\"text/css\"\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".image-right {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-left: 10px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-right: auto;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  float: right;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".image-left {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  display: block;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-left: auto;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-right: 10px;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-bottom: 10px;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  float: left;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".step {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  width: 45px;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# **Nuke Developer Guide** \u003csmall\u003ev1.5\u003c/small\u003e  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "By: `CS2113T-T13-2`      Since: `Feb 2020`    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003csmall\u003e[Go to Webpage](https://ay1920s2-cs2113t-t13-2.github.io/tp/DeveloperGuide.html)\u003c/small\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Table of Contents**  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e**Introduction** [\u0026#10149;](#introduction)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Purpose [\u0026#10149;](#purpose)   "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Scope [\u0026#10149;](#scope)   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Design Goals [\u0026#10149;](#design-goals)   "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Definitions [\u0026#10149;](#definitions)   "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e **Setting Up** [\u0026#10149;](#setting-up)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e  **Design** [\u0026#10149;](#design)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e **Implementation** [\u0026#10149;](#implementation)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 1. Add Feature [\u0026#10149;](#1-add-feature)   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; 2. Delete Feature [\u0026#10149;](#2-delete-feature)   "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e **Appendix** [\u0026#10149;](#appendix)  \u003c/big\u003e  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; User Stories [\u0026#10149;](#user-stories)   "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Non-Functional Requirements [\u0026#10149;](#non-functional-requirements)   "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Glossary [\u0026#10149;](#glossary)   "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; Manual Testing [\u0026#10149;](#manual-testing)    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Introduction**  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Purpose**  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"text-align: justify; display: block\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This document describes the structure and software design decisions for the \u003cb\u003eNuke\u003c/b\u003e application. The \u003cb\u003eNuke\u003c/b\u003e application is a simple yet powerful task management application that is dedicated to providing \u003cb\u003eNUS students\u003c/b\u003e a more efficient way to organise their \u003ci\u003emodules\u003c/i\u003e and \u003ci\u003etasks\u003c/i\u003e.  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/span\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Scope**  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"text-align: justify; display: block\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This document will cover the structure and software design decisions for the implementation of \u003cb\u003eNuke\u003c/b\u003e. The intended audience for this document are developers, designers and software testers of \u003cb\u003eNuke\u003c/b\u003e \u003ci\u003eor\u003c/i\u003e other similar task management application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/span\u003e  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Design Goals**  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Definitions**  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Setting Up**  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Refer to the guide [here](#) to set up.  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Design**  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Implementation**  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This section will describe the significant details of how certain features in \u003cb\u003eNuke\u003c/b\u003e are being implemented.  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### 1. Add Feature"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Overview"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The **add** feature adds modules, categories, tasks and tags into the Module, Category and Task List respectively."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### 1.1. Add module feature"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The add module feature enable the user to add modules into the Module List."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "When the user first requests to execute the `addm` command(*assuming the command format given is valid*) to add a module by providing its name, the application will parse the input after `addm`  command word as the module code. From here, there are **three** possible outcomes:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. The module specified by the user is not provided by NUS -- No module will added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. The module specified by the user is already added -- No module will be added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "3. The module specified by the user is provided by NUS and have not been added -- Module will be added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Feature Implementation"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "This feature is facilitated by the `AddModuleCommand` class which add the modules specified by the user. It overrides the `execute()` method which extends from the abstract `AddCommand` class which extends from the abstract `Command` class.   The `execute()` method\u0027s role is to execute the adding module operation and do necessary checks ."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The `AddCommand` will first try to call the static method `add` in `ModuleManager`  class, which will try to add the module specified by the user, exception will thrown according the following rules:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. `DuplicateModuleException` will be thrown if the module specified by the user is contained in the `ArrayList` named `moduleList` in `ModuleManager` class."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. `ModuleNotProvidedException` will be thrown if the module code specified by the user is not contained in the `HashMap` named `modulesMap` in `ModuleManager` class."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Below are the class-diagram for the involved classes:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200326014336120](images/Add_Module_Command_Class_Diagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003cspan style\u003d\"color: green\"\u003e\u003csmall\u003e\u003ci\u003eFigure \u003cb\u003eAdd Module Command Class Diagram\u003c/b\u003e\u003c/i\u003e\u003c/small\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The addition of modules will be illustrated as follows."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "James is a user and wants to add the module with the module code of \"CS3235\". Assume that he has the current modules:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " NO |  MODULE CODE   |                                 MODULE TITLE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 1  |     CS1231     |                             Discrete Structures"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 2  |     CS2100     |                            Computer Organisation"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 3  |     CS2113     |              Software Engineering \u0026 Object-Oriented Programming"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Total modules: 3"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. James will simply enter the command `addm cs3235`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   After the input is parsed as an **add module task** and executed, the `AddModuleCommand#execute()` will call `ModuleManager#add()` to add the module cs3235. In the `ModuleManager#add()` method, it will call `ModuleManager#contains()` to check if the module cs3235 exists in the `ArrayList` named `moduleList` , then it will check if the module code \"cs3235\" is a key in the `HashMap` named `modulesMap`, after all, it will instantiate an `Module` object with the module code \"CS3235\" and respective title \"Computer Security\", then add the object into the `moduleList`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. James receive the following feedback:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   root :"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   addm cs3235"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   SUCCESS!! Module CS3235 Computer Security has been added."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   root :"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   lsm"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   Here are what you are looking for..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   +--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    NO |  MODULE CODE   |                                 MODULE TITLE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   +--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    1  |     CS1231     |                             Discrete Structures"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    2  |     CS2100     |                            Computer Organisation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    3  |     CS2113     |              Software Engineering \u0026 Object-Oriented Programming"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    4  |     CS3235     |                              Computer Security"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   +--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   Total modules: 4"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   +--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Below is a *sequence diagram* to illustrate the above example scenario.  "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\t// To do Sequence diagram here"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### 1.2. Add Category and Task Features"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Since add category and add task feature are implemented in a similar pattern, they can be explained together."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The add category/task enable the user to add category/task/tag into Category/Task/Tag List.(One to one correspondence, which means the user can only add category to Category List, task to Task List)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "When the user first request to execute the **add** command*(assuming the command format given is valid)* to add a category/task by providing its name, the application will parse the input after `addm` /`addc` command word as the name for category/task. From here, there are **three** possible outcomes:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. The specified upper parent directory does not exist. -- No category/task will be added."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. The name of the specified category/task already exist. -- No category/task will be added."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "3. The specified upper parent directory exist and the name of the specified category/task does not exist. -- The specified category/task will be added."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Feature Implementation"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "This feature is facilitated by the `AddCategoryCommand` and `AddTaskCommand` class which add the corresponding category or task respectively."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The above-stated two classes overrides the `execute()` method which extends from the abstract `AddCommand` class which extends from the abstract `Command` class. The `execute()` method\u0027s role is to execute the adding category/task operation and do necessary checks."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The `AddCategoryCommand` and `AddTaskCommand` will first call the `getParentDirectory()` method to get the parent directory, then it will instantiate a `Category`/`Task` object and try to call `add` method in their respective parent directory class to add the new object, exception will be thrown according to the following rules:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. `ModuleNotFoundException` will be thrown if the specified module code does not exists in the `ArrayList` of Module when adding a new category or task."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. `CategoryNotFoundException` will be thrown if the specified category name does not exists in the `ArrayList` of Category in `CategoryManager` in `Module` when adding a new task."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "3. `IncorrectDirectoryLevelException` will be thrown if the user is performing the`addc`/`addt` command in the wrong directory without specifying their full parent directories.(For example, when user trying to execute `addc` in a `Root`/`Task` directory, or trying to execute `addt`  in a `Root`/`Module` directory)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "4. `DuplicateTaskException`/`DuplicateCategoryException` will be thrown if the name of the category/task already exist in the current directory."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Below are the class-diagram for the involved classes:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "to-do: add the class-diagram"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The addition process for *category* and *task* are similar. In this example, the addition process for *category* will be illustrated as a series of steps."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "James is a user and wants to add a *category* named  \"misc\" under the *module* cs3235. Assume that he has the current Module List and current Category List in the module cs3235:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lsm"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Here are what you are looking for..."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " NO |  MODULE CODE   |                                 MODULE TITLE                       "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 1  |     CS1231     |                             Discrete Structures                    "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 2  |     CS2100     |                            Computer Organisation                   "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 3  |     CS2113     |              Software Engineering \u0026 Object-Oriented Programming    "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 4  |     CS3235     |                              Computer Security                     "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Total modules: 4"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lsc -m cs3235"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Here are what you are looking for..."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " NO |     MODULE     |                                CATEGORY                                | PTY"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 1  |     CS3235     |                               Assignment                               |  4"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 2  |     CS3235     |                                  Lab                                   |  3"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 3  |     CS3235     |                                Lecture                                 |  1"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " 4  |     CS3235     |                                Tutorial                                |  2"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Total categories: 5"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. James has two choices:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   1. enter `cd cs3235` to enter the module directory then enter `addc misc` to add the category."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   2. enter `addc misc -m cs3235` to add the category at the root directory."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   Suppose James use the first method, after the second input, the input is parsed as an **add task** command and executed, the `AddCategoryCommand#execute()` will call ``AddCategoryCommand#getParentDirectory()` to get the current parent directory, then it will instantiate an `Category` object with the name \"misc\". After which `CategoryManager#add()` will be called to add the new object. In the `CategoryManager#add()` method, it will call `CategoryManager#contains()` method to check if the current parent directory contains the category with name \"misc\", finally add the object into the `ArrayList` of `categoryList`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "2. James receive the following feedback:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   root :"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   addc misc"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   SUCCESS!! Category misc is created."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Below is a *sequence diagram* to illustrate the above example scenario.  "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "to-do: add the sequence diagram"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### 2. Delete Feature  "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Overview  "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **delete** feature deletes *modules*, *categories* and *tasks* from the Module, Category and Task List respectively.   "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "When the user first requests to execute the **delete** command to delete a directory by providing its name, the application will first filter for directories with matching names. From here, there are **three** possible outcomes:  "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "1. There are **no** matches --  Nothing is deleted."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "2. There is **one** match -- A prompt will be given to the user to confirm the deletion."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "3. There are **multiple** matches -- The list of matches will be shown to the user, and the user chooses which ones to delete. A further prompt will be given to confirm the deletion(s)."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Feature Implementation  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Delete Command Class Diagram](images/Delete_Command_Class_Diagram.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"color: green\"\u003e\u003csmall\u003e\u003ci\u003eFigure \u003cb\u003eDelete Command Class Diagram\u003c/b\u003e\u003c/i\u003e\u003c/small\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The `DeleteModuleCommand`, `DeleteCategoryCommand` and `DeleteTaskCommand` classes in the application facilitates this **delete** feature. They are in charge of deleting *modules*, *categories* and *tasks* respectively. \u003cbr\u003e  "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "As shown in the figure above, those three classes each extends from the abstract `DeleteCommand` class.  They also [override](#) the `DeleteCommand` class\u0027s `executeInitialDelete()` method, which role is to prepare the necessary messages or prompts for the user depending on the number of filtered matches. \u003cbr\u003e  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The `DeleteCommand` class in turn extends the `FilterCommand` abstract class. The `FilterCommandClass` contains the following vital methods for filtering:  "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `createFilteredModuleList()` -- Creates an `ArrayList` of the filtered *modules*.  "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `createFilteredCategoryist()` -- Creates an `ArrayList` of the filtered *categories*.  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `createFilteredTaskList()` -- Creates an `ArrayList`of the filtered *tasks*.  "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lastly, the `FilterCommand` class extends the abstract `Command` class that contains the `execute()` method to execute the actual **delete** command.  "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Prompt Command Class Diagram](images/Prompt_Class_Diagram.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"color: green\"\u003e\u003csmall\u003e\u003ci\u003eFigure \u003cb\u003ePrompt Command Class Diagram\u003c/b\u003e\u003c/i\u003e\u003c/small\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Other than the commands, two prompts are involved.   "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The prompt to request for the list number(s) of the item(s) to delete from the filtered list is managed by the `ListNumberPrompt` class. The prompt to request to confirm the deletion is managed by the `DeleteConfirmationPrompt` class.  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage  "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The deletion process for *modules*, *categories* and *tasks* are similar. In this example, the deletion process for *tasks* will be illustrated as a series of steps.  \u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James is a user and wants to delete some of his *tasks* with *description* \"work\". Assume that he has the current Task List:  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " NO |  MODULE  |       CATEGORY       |          TASK          |           DEADLINE           | PTY "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 1  |  CS1231  |      Assignment      |       group work       |      28/03/2020 06:00PM      | 20  "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 2  |  CS1231  |       Tutorial       |       Tutorial 6       | 24/03/2020 11:59PM [OVER!!]  |  6  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 3  |  CS2100  |       Lecture        |     watch webcast      |            -NIL-             |  1  "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 4  |  CS2113  |      Bigger Lab      |      Big Lab Work      |        today 06:00PM         |  7  "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 5  |  CS2113  |       Tutorial       | tutorial worksheet 10  |        today 12:00PM         |  5  "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Total tasks: 5"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Step 1](images/Number_1.png){: .image-left .step }   "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James will first enter the command to delete *tasks*:  "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t`delt work -a`  "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\tAfter the input is parsed as a **delete task** command and executed, the `DeleteTaskCommand#execute()` will call `FilterCommand#createFilteredTaskList()` to create the filtered list of *tasks* containing the *description* \"work\". `DeleteTaskCommand#execute()` will then call its own method `DeleteTaskCommand#executeInitialDelete(filteredList)` to prepare the prompt to request James to enter the list number of the *tasks* he would like to delete.  "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Step 2](images/Number_2.png){: .image-left .step }    "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James receives the following prompt:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```  "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Multiple matching tasks found."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " NO |  MODULE  |       CATEGORY       |          TASK          |           DEADLINE           | PTY "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 1  |  CS1231  |      Assignment      |       group work       |      28/03/2020 06:00PM      | 20  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 2  |  CS2113  |      Bigger Lab      |      Big Lab Work      |        today 06:00PM         |  7  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " 3  |  CS2113  |       Tutorial       | tutorial worksheet 10  |        today 12:00PM         |  5  "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Total tasks: 3"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "+--------------------------------------------------------------------------------------------------+"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Enter the list number(s) of the tasks to delete."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "He proceeds to enter list numbers `2 3` as he has already completed both *tasks*.  "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "After the list numbers are parsed, it will call `ListNumberPrompt#execute()`, which will prepare the prompt for the delete confirmation, and then calls `ListNumberPrompt#executePromptConfirmation()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Step 3](images/Number_3.png){: .image-left .step}   "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James receives another prompt:  "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```  "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Confirm delete these tasks?"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "tutorial worksheet 10"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Big Lab Work"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "He enters `y` to confirm the deletion."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`DeleteConfirmationPrompt#execute()` will be called, which then calls `DeleteConfirmationPrompt#executeMultipleDelete(filteredList)` to delete James\u0027 selected *tasks* from his Task List."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Step 4](images/Number_4.png){: .image-left .step}  "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "James receives the final message:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "SUCCESS!! Task(s) have been deleted."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Deletion process ends.  "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Below is a *sequence diagram* to illustrate the above example scenario.  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "![Delete Command Sequence Diagram](images/Delete_Command_Sequence_Diagram.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"color: green\"\u003e\u003csmall\u003e\u003ci\u003eFigure \u003cb\u003eDelete Command Sequence Diagram\u003c/b\u003e\u003c/i\u003e\u003c/small\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### 3. ..."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do implementaitons for other features"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Appendix**  "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **User Stories**  "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can...|"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|---|---|---|---|"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |new user |see usage instructions |learn about existing features and how can I use them |"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |add modules\\tasks |I can have track on tasks of different modules |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |delete modules\\tasks |remove modules and tasks I do not need to keep on track anymore |"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |edit modules\\tasks |I can correct or change some attributes"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |constansly check the deadline of tasks in ascending order |I can get tasks done on time |"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |receive a reminder of urgent tasks |I know which tasks should be done first |"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |sort my tasks in terms of certain criteria |I can view my tasks of highest priorites |"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* * *` |student |add tags to tasks |I can filter and view tasks with respect to certain tags|"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "|`* *` |student |receive a reminder of expired tasks |I know I passed the deadline |"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Non-Functional Requirements**  "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Glossary**  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### **Manual Testing**  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To be done."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 16,
      "A11riseforme": 176,
      "iceclementi": 207,
      "-": 23
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 1,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    \u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    \u003ctitle\u003eNuke User Guide v2.1\u003c/title\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"path/to/font-awesome/css/font-awesome.min.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cstyle type\u003d\"text/css\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "div {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\ttext-align: justify;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".alert {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  padding: 15px;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  margin-bottom: 20px;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  border: 1px solid transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  border-radius: 4px;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".alert-success {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  background-color: #dff0d8;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  border-color: #d6e9c6;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  color: #3c763d;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".alert-info {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  background-color: #d9edf7;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  border-color: #bce8f1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  color: #31708f;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".alert-warning {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  background-color: #fcf8e3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  border-color: #faebcc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  color: #8a6d3b;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ".alert-error {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  background-color: #f2dede;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  border-color: #ebccd1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  color: #a94442;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# **Nuke User Guide** \u003csmall\u003ev2.1\u003c/small\u003e     "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "By: `CS2113T-T13-2`      Since: `Feb 2020`    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003csmall\u003e[Go to Webpage](https://ay1920s2-cs2113t-t13-2.github.io/tp/UserGuide.html)\u003c/small\u003e   "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Table of Contents**  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbig style\u003d\"color: green\"\u003e**Introduction** [\u0026#10149;](#introduction)  \u003c/big\u003e   "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e \u003cbig style\u003d\"color: green\"\u003e **Setting Up** [\u0026#10149;](#setting-up)  \u003c/big\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e \u003cbig style\u003d\"color: green\"\u003e **General Usage** [\u0026#10149;](#general-usage)  \u003c/big\u003e   "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Nuke Structure** [\u0026#10149;](#user-stories)   "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Command Format** [\u0026#10149;](#command-format)   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Command Prefixes** [\u0026#10149;](#command-prefixes)   "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e \u003cbig style\u003d\"color: green\"\u003e**Features** [\u0026#10149;](#features)  \u003c/big\u003e      "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;  **1. Add** [\u0026#10149;](#1-add)  "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; a. Add a Module into your Module List [\u0026#10149;](#a-add-a-module-into-your-module-list)    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b. Add a Category into your Category List [\u0026#10149;](#b-add-a-category-into-your-category-list)    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; c. Add a Task into your Task List [\u0026#10149;](#c-add-a-task-into-your-task-list)    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **2. List** [\u0026#10149;](#2-list)  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; a. List your Modules [\u0026#10149;](#a-list-your-modules)     "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b. List your Categories [\u0026#10149;](#b-list-your-categories)    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; c. List your Tasks [\u0026#10149;](#c-list-your-tasks)    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **3. Delete** [\u0026#10149;](#3-delete)  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; a. Delete Modules from your Module List [\u0026#10149;](#a-delete-modules-from-your-module-list)    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b. Delete Categories from your Category List [\u0026#10149;](#b-delete-categories-from-your-category-list)    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; c. Delete Tasks from your Task List [\u0026#10149;](#c-delete-tasks-from-your-task-list)    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **4. Edit** [\u0026#10149;](#4-edit)  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; a. Edit a Module in your Module List [\u0026#10149;](#a-edit-a-module-in-your-module-list)    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; b. Edit a Category in your Category List [\u0026#10149;](#b-edit-a-category-in-your-category-list)    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; c. Edit a Task in your Task List [\u0026#10149;](#c-edit-a-task-in-your-task-list)    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **5. Mark a Task as Done** [\u0026#10149;](#5-mark-a-task-as-done)    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; **6. Change Directory** [\u0026#10149;](#6-change-directory)    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  \u003cbig style\u003d\"color: green\"\u003e **Miscellaneous Information** [\u0026#10149;](#miscellaneous-information) \u003c/big\u003e   "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Help** [\u0026#10149;](#help)  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Exiting the Nuke Program** [\u0026#10149;](#exiting-the-nuke-program)  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Loading and Saving** [\u0026#10149;](#loading-and-saving)  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; -- Loading [\u0026#10149;](#loading)    "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; -- Saving [\u0026#10149;](#saving)    "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026#8226; **Date Time Formats** [\u0026#10149;](#date-time-formats)  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; -- Date Formats [\u0026#10149;](#date-formats)    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; -- Time Formats [\u0026#10149;](#time-formats)    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  \u003cbig style\u003d\"color: green\"\u003e **Command Summary** [\u0026#10149;](#command-summary) \u003c/big\u003e   "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  \u003cbig style\u003d\"color: green\"\u003e **FAQ** [\u0026#10149;](#faq) \u003c/big\u003e   "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## **Introduction**  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cspan style\u003d\"text-align: justify; display: block\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This **Nuke** application is a simple yet powerful task management system that is dedicated to providing **NUS students** a more efficient way to organise their _modules_ and _tasks_.\u003cbr\u003e  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "You will be interacting with the application via the command line. With the **Nuke** application, you will be able to perform various operations to manage your _modules_ and _tasks_ such as adding, deleting and listing your  _modules_ and _tasks_. You may also add additional properties to your _tasks_ such as _files_, _deadlines_, and _priorities_.\u003cbr\u003e  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "**Nuke** facilitates users by automatically sorting user-added _tasks_ and displaying the most important and urgent ones to the users. In the long term, it strives to enhance the quality of NUS students’ lives by serving as the one-stop platform for efficient management of module tasks.\u003cbr\u003e  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "If you are an **NUS student** and have not tried out **Nuke** yet...  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "What are you waiting for? Give **Nuke** a shot, and you will see how amazing it is!   "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/span\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## General Usage  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This section will explain the fundamental structure of the **Nuke** application, and important guidelines to follow to ensure smooth usage of the application.  "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Nuke Structure"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "**Nuke** follows the structure of a **Directory Tree** _(i.e. folder sub-folder structure)_. This Directory Tree comprises various levels:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### \u003cu\u003eDirectory Levels Table\u003c/u\u003e  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| Directory Level | Description                                                                      |"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "|:---------------:|----------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **Root**        | The **base** of the Directory Tree. Only **one** root exists in the entire Tree.\u003cbr\u003eAdded _modules_ are in this level. |"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **Module**      | The **second** level of the Directory Tree.\u003cbr\u003eAdded _categories_ are in this level.   |"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **Category**    | The **third** level of the Directory Tree.\u003cbr\u003eAdded _tasks_ are in this level.    |"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **Task**        | The **fourth** level of the Directory Tree.\u003cbr\u003eAdded _files_ are in this level.       |"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| **File**        | The **last** level of the Directory Tree.\u003cbr\u003eNothing else can be added.                                         |"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// Todo add a sample Directory Tree diagram here"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Root   "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The **Root** Directory is the **base** of the entire Directory Tree. Only **one** root exists in the entire Tree. _Modules_ are added into this level into a **Module List**. A _module_ consists of both a *module code* and a _module title_. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cdiv class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003ci class\u003d\"fa fa-exclamation\"\u003e\u003c/i\u003e \u003cb\u003eNote\u003c/b\u003e \u003cbr\u003e "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Only \u003cb\u003eNUS modules\u003c/b\u003e are allowed to be added in \u003cb\u003eNuke\u003c/b\u003e.  "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Module"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Module** Directory is the **second** level of the Directory Tree.  Each _module_ has a **Category List** that has several _categories_ to categorise your _tasks_, such as Lecture, Tutorial and Assignment, so that you can further organise your _tasks_. A _category_ consists of a _name_ and a _priority_ to indicate the importance of the _tasks_ in that _category_."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Category"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Category** Directory is the **third** level of the Directory Tree. Each _category_ has a **Task List** that can contain any number of _tasks_, which are ideally related to the _category_. A _task_ has several attributes, namely the _description_, _deadline_ of the _task_ if any, _priority_ and the _done status_ of the _task_."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Task"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Task** Directory is the **fourth** level of the Directory Tree. Each _task_ can have _files_ attached to the it. _Files_ are stored in the **File List**. The _file_ must have a _file name_ and the _path_ to the _file_.   "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### File"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **File** Directory is the **last** level of the Directory Tree. It contains no other directories.   "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cdiv class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003ci class\u003d\"fa fa-exclamation\"\u003e\u003c/i\u003e \u003cb\u003eNote\u003c/b\u003e \u003cbr\u003e "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The \u003cb\u003eNuke\u003c/b\u003e application adheres to this Directory Tree structure strictly. It is important to note that you can only add a directory into a directory which is \u003cb\u003e\u003ci\u003eexactly\u003c/i\u003e one level lower\u003c/b\u003e. \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "For example, you can only add a \u003ci\u003etask\u003c/i\u003e into the \u003cb\u003eCategory\u003c/b\u003e directory, and not directly into the \u003cb\u003eModule\u003c/b\u003e directory."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cdiv class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003ci class\u003d\"fa fa-info\"\u003e\u003c/i\u003e \u003cb\u003eTip\u003c/b\u003e \u003cbr\u003e "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "You can shorten the commands you enter by first entering into a directory. Then you do \u003cb\u003enot\u003c/b\u003e need to enter the full \u003ci\u003edirectory path\u003c/i\u003e in your command! \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "To learn how to traverse the various directories, see the \u003ca href\u003d\"#6-change-directory\"\u003eChange Directory\u003c/a\u003e command."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Command Format  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "In this User Guide, the format for each feature _(command)_ will usually be of this form:  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`CommandWord \u003cattr0\u003e -pfix1 \u003cattr1\u003e ... [ -pfix2 \u003cattr2\u003e ... ] { -pfix3 \u003cattr3\u003e -pfix4 \u003cattr4\u003e ... }`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Command Word"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Each command you give to **Nuke** has to begin with its corresponding unique **command word**. This helps **Nuke** to know that you want it to execute a particular command.  "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Attribute"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "**Attributes** are information to be provided in the command. An **attribute** for the command will be wrapped in angular brackets `\u003c \u003e` to help you to recognise it.   "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Prefix"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "A **prefix** is used to provide additional supplementary information to the command. More information on the various **command prefixes** can be found [here](#command-prefixes).   "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Optional"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Some **attributes** and **prefixes** are _optional_ and the command can still execute properly even when omitted. However, they may be useful if you want to provide a more specific information to the command. Optional **attributes** and **prefixes** will be wrapped in square brackets `[ ]` to help you to recognise them.   "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Any"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "There are times when you may have to include at least one from a set of **attributes** and **prefixes**. You may choose to include one \u003ci\u003eor\u003c/i\u003e more from the set, but \u003cb\u003enot\u003c/b\u003e none of them. Such **attributes** and **prefixes** will be wrapped in curly brackets `{ }` to help you to recognise them.   "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Command Prefixes  "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "On many occasions, you may be required to enter more information to describe the commands you give to **Nuke**. For example, when adding a _task_, you may need to specify the _module_ and _category_ to add the _task_ into. You may also want to include additional attributes such as the _deadline_ and _priority_. All these information can only be recognised by **Nuke** if they are preceded by the correct **prefix**.\u003cbr\u003e   "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "All **command prefixes** in **Nuke** begins with a `-` and followed by a **letter**. Below is the exhaustive list of **command prefixes** and general information that should follow after.   "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### \u003cu\u003eCommand Prefix Table\u003c/u\u003e  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| Command Prefix | General Definition                                               |"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "|:--------------:|------------------------------------------------------------------|"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-m`           | The _module code_ of the _**m**odule_                            |"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-c`           | The _name_ of the _**c**ategory_                                 |"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-t`           | The _description_ of the _**t**ask_                              |"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-f`           | The _name_ or _path_ of the _**f**ile_                           |"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-d`           | The _**d**eadline_ of the _task_                                 |"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-p`           | The _**p**riority_ of the _category_ or _task_                   |"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-e`           | To indicate whether filtering is done **e**xactly                |"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "| `-a`           | To indicate whether filtering is done across **a**ll directories |"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cdiv class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003ci class\u003d\"fa fa-exclamation\"\u003e  \u003c/i\u003e\u003cb\u003eNote\u003c/b\u003e \u003cbr\u003e "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Because each \u003cb\u003eprefix\u003c/b\u003e begins with a \u003ccode\u003e-\u003c/code\u003e, \u003cb\u003eNuke\u003c/b\u003e has to unfortunately restrict your choice of names for the directories. \u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Specifically, each word in the name of your directory has to begin with a alpha-numeric \u003ci\u003e(i.e. non-symbol)\u003c/i\u003e or underscore character."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e  "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Features  "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 1. Add  "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Adds a _module_, _category_,  _task_ or \u003ci\u003efile\u003c/i\u003e into their respective lists.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "As mentioned previously, **Nuke** follows the structure of a [**Directory Tree**](#nuke-structure) _(i.e. folder sub-folder structure)_. Therefore, **Nuke** also supports Linux file-system-related command for creating a directory: `mkdir`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Root Directory**, `mkdir \u003cmodule code\u003e` will add a *module* into your **Module List**."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Module Directory**, `mkdir \u003ccategory name\u003e` will add a _category_ into your **Category List**."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Category Directory**, `mkdir \u003ctask description\u003e` will add a _task_ into your **Task List**."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The above mentioned commands have to be done in the corresponding directories, and the commands below can be done in any directories, but less generic."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### a. Add a Module into your Module List  "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Adds a _module_ into your **Module List**. The **Module List** contains all your added _modules_ and can be viewed via the List Module command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`addm \u003cmodule code\u003e`  "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `module code` -- The _module code_ of the   _module_  "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: The _module code_ is **case-insensitive**. However, it must correspond to a valid **NUS module**. Only **NUS modules** can be added in this version of **Nuke**."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\taddm cs2113t"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm cs2113t"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Module CS2113 Software Engineering \u0026 Object-Oriented Programming has been added."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200330234001037](images/ug_addm_before.png)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200330233926681](images/ug_addm_after.png)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "#### \u003cbr\u003e  "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### b. Add a Category into your Category List  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Adds a _category_ into your **Category List**. The **Category List** contains all your added _categories_ in the _module_ and can be viewed via the List Category command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`addc \u003ccategory name\u003e -m \u003cmodule code\u003e [ -p \u003cpriority\u003e ]`  "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `category name` -- The _name_ of the   _category_"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `priority` -- A number indicating the  _priority_ of the _category_"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` information if you are currently in that _module_\u0027s directory. You can move to the  _module_\u0027s directory via the [Change Directory](#6-change-directory) Command.  "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: The `priority` that you give must be a number between 0 and 100 inclusive. The bigger the number, the more important the category. If the `priority` is not given, then it will be set to **0**.  "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\taddc Lecture -m cs2113t -p 3"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root / CS2113T :"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addc Lecture -m cs2113t -p 3"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Category Lecture is created."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200331000048607](images/ug_addc_before.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200331000110946](images/ug_addc_after.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### \u003cbr\u003e  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### c. Add a Task into your Task List  "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Adds a _task_ into your **Task List**. The **Task List** contains all your added _tasks_ in the _category_ and can be viewed via the List Task command."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`addt \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e [ -d \u003cdeadline\u003e -p \u003cpriority\u003e ]`  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `task description` -- The _description_ of the _task_  "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added  "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `category name` -- The _name_ of the   _category_  "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `deadline` -- The _deadline_ of the _task_  "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `priority` -- A number indicating the  _priority_ of the _category_   "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` if you are currently in that _module_\u0027s directory. Also, you need **not** include both `module code` and `category name`  if you are currently in that _category_\u0027s directory. You can move to the  the respective directories via the [Change Directory](#6-change-directory) Command.  "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: The `priority` that you give must be a number between 0 and 100 inclusive. The bigger the number, the more important the task. If the `priority` is not given, then it will be set to the same _priority_ as it\u0027s _category_.  "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: The `deadline` provided consists of both a _date_ and a _time_. The `deadline` provided must adhere to the set of accepted [Date Time formats](#date-time-formats).   "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\taddt urgent assignment -m cs2113t -c Assignment -d tmr 2359 -p 80"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root / CS2113T / Assignment :"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addt urgent assignment -m cs2113t -c Assignment -d tmr 2359 -p 80"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Task urgent assignment is created."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200331000255994](images/ug_addt_before.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200331000315462](images/ug_addt_after.png)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### \u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### d. Add a File into your Task\u0027s File List  "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Adds a _file_ into your _task_\u0027s **File List**. The **File List** contains all your added _files_ to the _task_ and can be viewed via the List File command."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "`addf \u003cfile name\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e -t \u003ctask description\u003e -f \u003cfile path\u003e`  "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `file name` -- The _name_ of the _file_  "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added  "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `category name` -- The _name_ of the   _category_  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `task decription` -- The _description_ of the _task_  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `file path` -- the **Absolute** _path_ of the _file_   "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` if you are currently in that _module_\u0027s directory. Also, you need **not** include both `module code` and `category name`  if you are currently in that _category_\u0027s directory. Moreover, you need **not** include `module code`, `category name` and `task description` if you are currently in that _task_\u0027s directory. You can move to the  the respective directories via the [Change Directory](#6-change-directory) Command.  "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\u003e **Note**: The `file path` that you give must exist. Otherwise, an error message will be displayed."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\u003e **Note**: The `file name` provided can be different from the real file name that is stored in the disk.   "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\taddt save.txt -m CS2113t -c Lab -t tp -f C:\\Users\\JUNIOR\\Downloads\\save.txt"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\taddt save.txt -t tp -f C:\\Users\\JUNIOR\\Downloads\\save.txt"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\taddt save.txt -f C:\\Users\\JUNIOR\\Downloads\\save.txt"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "root / CS2113T / Lab / tp :"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "addt save.txt -m CS2113t -c Lab -t tp -f C:\\Users\\JUNIOR\\Downloads\\save.txt"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "SUCCESS!! File save.txt is added."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### \u003cbr\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### e. Add a Tag to your Task"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Adds a _tag_ to your _task_\u0027s **Tag List**. The **Tag List** contains all your added _tags_ to the _task_. (and can be viewed via the List File command. not available now)."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "`addg \u003ctag info\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e -t \u003ctask description\u003e`  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `tag info` -- The _tag_ to be added  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `module code` -- The _module code_ of the _module_ to contain the _category_ to be added  "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `category name` -- The _name_ of the   _category_  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- `task decription` -- The _description_ of the _task_  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` if you are currently in that _module_\u0027s directory. Also, you need **not** include both `module code` and `category name`  if you are currently in that _category_\u0027s directory. Moreover, you need **not** include `module code`, `category name` and `task description` if you are currently in that _task_\u0027s directory. You can move to the  the respective directories via the [Change Directory](#6-change-directory) Command.  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\taddg urgent -m CS2113t -c Lab -t tp"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\taddt urgent -t tp"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\taddt urgent"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "root / CS2113T / Lab / tp :"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "addg urgent -m CS2113t -c Lab -t tp"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Tag added!"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### \u003cbr\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 2. List  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lists the _modules_, _categories_ or _tasks_ in their respective lists.\u003cbr\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "As mentioned previously, **Nuke** follows the structure of a **Directory Tree** _(i.e. folder sub-folder structure)_. Therefore, **Nuke** also supports Linux file-system-related command for listing files in a directory: `ls`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Root Directory**, `ls` will list out all your *module*s in your **Module List**. `ls \u003cmodule code\u003e` will list out all *category*s in the **Category List** in the *module*"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Module Directory**, `ls` will list out all the *category*s in your **Category List**. `ls \u003ccategory name\u003e` will list out all *task*s in the **Task List** in the *category*"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Category Directory**, `ls` will list out all the *task*s in your **Task List**."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The above mentioned commands have to be done in the corresponding directories, and the commands below can be done in any directories, but less generic."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### a. List your Modules"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "List all *module*s in your **Module List**. The **Module List** contains all your added _modules_ and can be viewed via the List Module command."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`lsm [keyword]`   "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003e **Note**: If keyword is provided, `lsm` will list out all modules with module code containing the keyword, otherwise, `lsm` will list out all modules."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\tlsm"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401011642619](images/ug_lsm.png)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### b. List your Categories"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "List all *category*s in your **Category List**. The **Category List** contains all your added _categories_ in the _module_ and can be viewed via the List Category command."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`lsc [ -m \u003cmodule code\u003e ]`  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- `module code` -- The _module code_ of the _module_ to contain the _category_ to be added"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` information if you are currently in that _module_\u0027s directory. You can move to the  _module_\u0027s directory via the [Change Directory](#6-change-directory) Command."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlsc -m c3235"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlsc"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401012031973](images/ug_lsc.png)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### c. List your Tasks  "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "List all the *task*s in your **Task List**. The **Task List** contains all your added _tasks_ in the _category_ and can be viewed via the List Task command."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lst [ -m \u003cmodule code\u003e -c \u003ccategory name\u003e]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` if you are currently in that _module_\u0027s directory. Also, you need **not** include both `module code` and `category name`  if you are currently in that _category_\u0027s directory. You can move to the  the respective directories via the [Change Directory](#6-change-directory) Command.  "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlst -m cs3235 -c Assignment"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlst -c Assignment"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlst"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401012942212](images/ug_lst.png)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### d. List your undo tasks in sorted order  "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "List all the undo *task*s in your **Task List**. The *task*s will be sorted in ascending order of `deadline` by deafault. User can also specify in the command to sort *task*s in descending order of `priority` by adding `-p` prefix."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "lsts [ -d -p (choose 1; default -d) ]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\u003e **Note**: You need **not** include the `-d` if you want to sort tasks in terms of `deadline`. You are supposed to choose only one prefix between `-d` and `-p`. "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlsts"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlsts -p"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Expected Outcome"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### e. List your tasks under specific module in sorted order "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "List all the *task*s in one of added *module*s. The *task*s will be sorted in ascending order of `deadline` by deafault."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "lsmtd \u003cmodule code\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` if you are currently in that *module*\u0027s directory. Sepcifying a `module code` will make the command to list tasks in that *module*."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Example Usage"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlsmtd"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "\tlsmtd CS2113"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "```"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Expected Outcome"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 3. Delete  "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Deletes _modules_, _categories_ or _tasks_ from their respective lists.\u003cbr\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "As mentioned previously, **Nuke** follows the structure of a **Directory Tree** _(i.e. folder sub-folder structure)_. Therefore, **Nuke** also supports Linux file-system-related command for deleting a directory: `rm`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Root Directory**, `rm \u003cmodule code\u003e` will remove a *module* from your **Module List**."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Module Directory**, `rm \u003ccategory name\u003e` will remove a *category* from your **Category List**. "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- When you are at the **Category Directory**, `rm \u003ctask name\u003e` will remove a _task_ from your **Task List**."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "For Delete command, user will be prompted to confirm by entering `y` or `yes`  or to abort by entering `n` or `no` after entering the Delete command."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "The above mentioned commands have to be done in the corresponding directories, and the commands below can be done in any directories, but less generic."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### a. Delete Modules from your Module List"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Delete a _module_ from your **Module List**. The **Module List** contains all your added _modules_ and can be viewed via the List Module command."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`delm \u003cmodule code\u003e`  "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- `module code` -- The _module code_ of the _module_  "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003e **Note**: The _module code_ is **case-insensitive**. However, it must correspond to a valid **NUS module**. Only **NUS modules** can be deleted in this version of **Nuke**."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\tdelm cs3235"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "delm cs3235"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Confirm delete CS3235 Computer Security?"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "y"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Module(s) have been deleted."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401015356560](images/ug_delm_before.png)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401015411123](images/ug_delm_after.png)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### b. Delete Categories from your Category List   "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Delete a _category_ from your **Category List**. The **Category List** contains all your added _categories_ in the _module_ and can be viewed via the List Category command."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`delc \u003ccategory name\u003e -m \u003cmodule code\u003e`  "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- `category name` -- The _name_ of the   _category_"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` information if you are currently in that _module_\u0027s directory. You can move to the  _module_\u0027s directory via the [Change Directory](#6-change-directory) Command."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`delc Lecture -m cs2113t` when not in the *module*\u0027s  directory"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`delc Lecture` when in the *module*\u0027s directory"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "delc Lecture -m cs3235"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Confirm delete Lecture?"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "y"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Category/Categories have been deleted."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401020252025](images/ug_delc_before.png)"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401020313566](images/ug_delc_after.png)  "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### c. Delete Tasks from your Task List     "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Delete a _task_ from your **Task List**. The **Task List** contains all your added _tasks_ in the _category_ and can be viewed via the List Task command."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`delt \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e`  "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- `task description` -- The _description_ of the _task_"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- `category name` -- The _name_ of the   _category"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003e **Note**: You need **not** include the `module code` if you are currently in that _module_\u0027s directory. Also, you need **not** include both `module code` and `category name`  if you are currently in that _category_\u0027s directory. You can move to the  the respective directories via the [Change Directory](#6-change-directory) Command. "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`delt urgent assignment -m cs3235 -c Assignment` when not in the *module*\u0027s  directory"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`delt urgent assignment -c Assignment` when not in the *category*\u0027s directory"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "`delt urgent assignment` when in the *category*\u0027s directory"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "delt urgent assignment -m cs3235 -c Assignment"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Confirm delete urgent assignment?"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "root :"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "y"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "SUCCESS!! Task(s) have been deleted."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### before:"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401020857605](images/ug_delt_before.png)"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "##### after:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "![image-20200401021025877](images/ug_delt_after.png)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 4. Edit"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Edits a _module_, _category_ or _task_ in their respective lists.\u003cbr\u003e  "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### a. Edit a Module in your Module List  "
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### b. Edit a Category in your Category List  "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### c. Edit a Task in your Task List  "
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\t// To do"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e  "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 5. Mark a Task as Done  "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Marks a task as *done*."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`done \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e`  "
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `task description` -- The _description_ of the _task_"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `category name` -- The _name_ of the   _category_"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  "
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\tdone Tutorial 7 -m CS1231 -c Tutorial"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Expected Outcome    "
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\tSUCCESS!! Task has been updated."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e  "
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## 6. Change Directory "
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Traverse up and down the Directory Tree from your current directory.  "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Format  "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`cd \u003cdirectory name\u003e` to traverse down   "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "`cd ..` to traverse up   "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `directory name` -- The name of the next _directory_"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `module code` -- The _module code_ of the _module_   to contain the _category_ to be added"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `category name` -- The _name_ of the   _category  "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Example Usage    "
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```  "
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\tcd Assignment"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Miscellaneous Information  "
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Help  "
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "In the event that you ever forget the usage of a command, you can look it up within the **Nuke** program itself. All you need to do is to enter the *keyword* `help`, followed by the command you wish to query.     "
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Exiting the Nuke Program  "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Exiting the **Nuke** program is simple. Simply enter `bye` to exit.  "
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Upon exiting, the program will [save](#saving) your entire Directory List into a file in your device.  "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Loading and Saving  "
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Nuke** program loads and saves your entire Directory List **automatically**, so there is no explicit way to freely load or save your file.    "
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Loading "
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Loading is done once you start up the **Nuke** program. The data from the saved *directory list file* in your device is read to initialise your Directory List from when it was last saved."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Saving  "
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Saving is done upon executing each of your commands in the **Nuke** program. Your Directory List will be saved into a *directory list file* in your device.    "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e  "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Date Time Formats  "
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Any *date time* data that you provide has to adhere to certain formats pre-defined by the **Nuke** program. Failure to do so will likely result in the program to be unable to recognise your input command, and a warning will be shown.    "
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Instances when you may need to enter a *date time* will be when adding a _deadline_ to your _tasks_."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Here are the following *date time* formats:  "
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Date Formats  "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "There are **two** types *date* formats allowed.  "
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### 1. Words  "
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "You may enter **only** the following *date* words.  "
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `today` or `tdy` -- represents the \u003cu\u003ecurrent\u003c/u\u003e date  "
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `tomorrow` or `tmr` -- represents the \u003cu\u003enext\u003c/u\u003e date  "
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- `yesterday` or `yst` -- represents the \u003cu\u003eprevious\u003c/u\u003e date  "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  "
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Note**: All dates are taken with reference to the current date on your device.  "
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "  #### 2. Standard Date Format  "
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This refers to the typical dates that are represented with **numbers** and **delimiter symbols**.    "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "In this **Nuke** program, *dates* should be in the order of **day**, **month**, then an \u003cu\u003eoptional\u003c/u\u003e **year**. If the **year** is not provided, the program will automatically assume it to be the **current year**.  Also, the **day**, **month** and **year** should only be entered as **numbers** and not words *(e.g. January is not accepted for the **month** attribute)*.  "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Regarding **delimiters**, the program will **only** consider `/` and `-` as valid delimiters for *dates*.  Delimiters are \u003cu\u003eoptional\u003c/u\u003e and may be omitted provided you include the **year** of the *date* *(e.g. 1/1/20, 1/1 and 010120 are accepted, but not 0101).*  "
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "An **exhaustive** list of the standard *date* formats is given below for your reference.  "
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd/MM/yyyy, d/MM/yyyy, dd/M/yyyy, d/M/yyyy,   "
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd/MM/yy, d/MM/yy, dd/M/yy, d/M/yy,  "
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd/MM, d/MM, dd/M, d/M, dd-MM-yyyy, d-MM-yyyy, dd-M-yyyy, d-M-yyyy,   "
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd-MM-yy, d-MM-yy, dd-M-yy, d-M-yy,  "
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " dd-MM, d-MM, dd-M, d-M, ddMMyyyy, ddMMyy"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003e **Info**: `d` represents the **day** of the date. `M` represents the **month** of the date. `y` represents the **year** of the date.  "
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Time Formats  "
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The **Nuke** program accepts most time formats that are represented with **numbers**, **delimiter symbols** and \u003cu\u003eoptional\u003c/u\u003e **am-pm markers**.    "
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The *time* should be in the order of  **hour**, then **minute**. The **seconds** attribute of *time* should **not** be given. The **minute** attribute must be a **double** digit *(i.e. single digits must be padded with a 0 in front)*. The **minute** attribute is also \u003cu\u003eoptional\u003c/u\u003e, and should it be omitted, the **Nuke** program will automatically set the **minute** to be 0. Both the **12-h** format and the **24-h** format are valid *time* formats for this program.    "
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    "
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Regarding **delimiters**, the program will **only** consider `:` and `.` as valid delimiters for *time*.  Delimiters are \u003cu\u003eoptional\u003c/u\u003e and may be omitted.  "
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lastly, the **am-pm marker** is an \u003cu\u003eoptional\u003c/u\u003e attribute, and should it be omitted, the **Nuke** program will automatically assume the *time* to follow the **24-h** format.  "
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "An **exhaustive** list of the *time* formats is given below for your reference.  "
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```  "
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " h:mma, H:mma, H:mm, h.mma, "
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " H.mma, H.mm, hmma, Hmma, Hmm, "
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " ha, Ha, H"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "```"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " \u003e **Info**: `H` and `h` represents the **hour** for the 24-h and 12-h time format respectively. `m` represents the **minute**. `a` represents the **am-pm markers**.  "
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Command Summary"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# FAQ"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 151,
      "A11riseforme": 190,
      "iceclementi": 510,
      "-": 24
    }
  },
  {
    "path": "docs/team/a11riseforme.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "PROJECT: Nuke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "This Nuke application is a simple yet powerful task management system that is dedicated to providing NUS students efficient organisation of *modules* and *tasks*. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 17 kLoC."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Summary of contributions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "**Code contributed**: \\[[Functional code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003da11riseforme)\\]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "**Major enhancement**: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "1. added **the ability to undo/redo previous commands**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- Highlights: This enhancement does not affects existing commands, but it required an in-depth analysis of the data formation of the current project. The implementation too was challenging as it required to add in a middle step in the main function of the program. I have to make sure that it won\u0027t go wrong and adversely affects the main program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "added the **ability to preload the information of all modules provided by NUS**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- What it does: Preloads the information of all modules provided by NUS, including module codes and module titles."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- Justification: This feature makes our product more targeted at our intended user(NUS students) more, it also enables the auto-complete features when users are adding their modules by entering module codes, which enhances usability."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- Highlights: This enhancement is based on the json file which is retrieved from the [NUSMods](https://api.nusmods.com/v2/) API, and it has to deal with the case when there is no relevant json file on the disk, then the product needs to fetch the content from [NUSMods](https://api.nusmods.com/v2/) API, and if the user has no network connection(which is a very rare case), the product also needs to be compatible with such extreme case."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "- Credits: "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "  - [NUSMods](https://api.nusmods.com/v2/) API: For providing the API to retrieve the information of all the modules provided by NUS."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "  - [FastJson](https://github.com/alibaba/fastjson) library: For parsing the json file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "  - [Commons IO](http://commons.apache.org/proper/commons-io/) from Apache: For downloading the json file from [NUSMods](https://api.nusmods.com/v2/) API."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "**Minor enhancement**: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "-   **Other contributions**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    -   Project management:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Managed releases `v1.0` ,  `v2.0-cli` (2 releases) on GitHub"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    -   Enhancements to existing features:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Updated the GUI color scheme (Pull requests [\\#33](https://github.com), [\\#34](https://github.com))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](https://github.com), [\\#38](https://github.com))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    -   Documentation:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Did cosmetic tweaks to existing contents of the User Guide: [\\#14](https://github.com)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    -   Community:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   PRs reviewed (with non-trivial review comments): [\\#12](https://github.com), [\\#32](https://github.com), [\\#19](https://github.com), [\\#42](https://github.com)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Contributed to forum discussions (examples: [1](https://github.com), [2](https://github.com), [3](https://github.com), [4](https://github.com))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com), [2](https://github.com), [3](https://github.com))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Some parts of the history feature I added was adopted by several other class mates ([1](https://github.com), [2](https://github.com))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    -   Tools:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Integrated a third party library (Natty) to the project ([\\#42](https://github.com))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        -   Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003ctable\u003e\u003ccolgroup\u003e\u003ccol style\u003d\"width: 100%\" /\u003e\u003c/colgroup\u003e\u003ctbody\u003e\u003ctr class\u003d\"odd\"\u003e\u003ctd\u003e\u003cp\u003e\u003cem\u003eGiven below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users.\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Contributions to the Developer Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003ctable\u003e\u003ccolgroup\u003e\u003ccol style\u003d\"width: 100%\" /\u003e\u003c/colgroup\u003e\u003ctbody\u003e\u003ctr class\u003d\"odd\"\u003e\u003ctd\u003e\u003cp\u003e\u003cem\u003eGiven below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project.\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "---"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "*{Optionally, you may include other projects in your portfolio.}*"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 83
    }
  },
  {
    "path": "docs/team/haoyun49.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "# Project Portfolio -- Hao Yun"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "## Project Nuke \u003csmall\u003ev2.1\u003c/small\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "**Nuke** is a simply yet powerful task management application that targets towards _NUS students_ and aims to facilitate record, classification, management and navigation of their acdemical tasks. The users can interact with **Nuke** using both a _Command Line Interface (CLI)_ and a complementary _Graphical User Interface (GUI)_. **Nuke** is written in Java, and has about 17000 lines of code."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "[Functional and Test Code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dHAOYUN49\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByNone\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dHAOYUN49\u0026tabRepo\u003dAY1920S2-CS2113T-T13-2%2Ftp%5Bmaster%5D) from _GitHub RepoSense_ "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "### Major Enhancement"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Implemented List Deadline Features"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- What it does: allows the user to check their tasks of different modules or all modules in terms of the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- Justification: these features improve filtering function of the product and benefit the user greatly because a user can see the most urgent task and the least urgent task and then determine which task to complete right after."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- Highlights: the implementation mainly consists of two parts include integrating all tasks from different categories of different modules as user-added tasks are stored in a multitude of seperated lists and sorting the all these tasks in the ascending order of deadline. As users may simplify commands by omitting prefix if they are in the current directory or check tasks of another module in current directory, the implementation need to deal with different situations and filter tasks correctly."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "#### Implemented Tag Features"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- What it does: allows the user to add, delete several tags to every task to give more customized descriptions to their tasks and then list tasks out based on different tags."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- Justification: these features will improve filtering function of the application significantly. Users can use customized tags to describe tasks and filter tasks according to these tags to find tasks catering to their needs well."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- Highlights: This enhancement provides a new criteria for users to manage and navigate their tasks. The implementation includes adding a new attribute to existing object, filtering tasks of differnt categories of different modules in terms of tags which users can choose to use exact tag or keyword of tag to filter tasks leading t o changes to existing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "### Minor Enhancement"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Added **help** command which will show a simple user guide to enable users find valid commands and corresponding format when using **Nuke**."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "### Other Contributions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- Project managment:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "  - Necessary general code enhancements"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "  - Maintaing the issue tracker"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- Enhancements to existing features:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "  - Wrote a majority of JunitTests for existing features to increase coverage to a greate extent"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- Documentation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "- Community"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "  - PRs reviewed (with non-trivial review comments)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "  - Reported bugs and suggestions for other teams using CaTcher (with non-trivial issues)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 56
    }
  },
  {
    "path": "docs/team/iceclementi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "# Project Portfolio Page -- Clement Cheng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Project Nuke \u003csmall\u003ev2.1\u003c/small\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "**Nuke v2.1** is a simple yet powerful task management application target towards **NUS students**.  **Nuke** aims to provide a more efficient way to organise the user\u0027s modules and tasks. The user interacts with **Nuke** using a _Command Line Interface_ (CLI). In its latest versions, it also has a complementary _Graphical User Interface_ version created with JavaFX, though the GUI is still in its _Beta_ stage. **Nuke** is written in Java, and has about 10, 000 lines of code."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Major Enhancements"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Implemented Directory Structure of **Nuke**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### What it does"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "**Nuke** has a directory tree structure consisting of multiple directories and sub-directories. Users can traverse about various directories _(Root, Module, Category, Task and File)_, much like a Linux Shell."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Justification"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "As each item _(module, category, task and file)_ appears to be of different hierarchy, implementing a directory tree, with each of the item as its own directory, was a decision our team has decided. Traversing about the directories not only allow users to see the overall structure of their module and task list, but also helps to shorten the command to enter, such as if adding and deleting an item in the current directory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Highlights"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Implementation of this directory structure was done about midway in the project. As such, it resulted in various changes to the way we manage the module and task entities previously. Each directory has to be attached to a parent directory, so an additional attribute needs to be considered before adding an item to its list. Considerations also need to be made to be able to obtain the current directory\u0027s information to fill up missing attributes in the user\u0027s commands, which was rather challenging indeed. A sudden change in the structure of the project may also implicate other features made previously, so checking needs to be done to identify any potential errors and bugs, and thereafter remedy accordingly."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Implemented Category Features"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### What it does"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Enables users to add, delete, list and edit their categories."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Justification"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Categories were not implemented initially. However, on further deliberation, a Category directory was inserted between the Module\u0027s and the Task\u0027s directory. A category serves to further subdivide the user\u0027s tasks into various categories depending on the type of tasks. For instance, Tutorial types of tasks can be put into the Tutorial Category. This addition enhances the organisation of the user\u0027s tasks, which ultimately makes finding of specific tasks easier. Furthermore, this also allows users to have the same _task description_ for tasks in separate categories."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Highlights"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "As the Category directory had not been implemented initially, there was a change the code significantly to redirect the parent directory to the correct directory. This may also have further implications to other command features such as _list_, which now has an additional layer to filter from."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Implemented File Features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### What it does"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Enables users to add, delete, list, edit and open their files."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Justification"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "These features will enable users to be able to access their files through the **Nuke** application, without going through the hassle of finding their files normally. The commands to execute each file feature are short and simple, which further improves the efficiency of file access. This was also one of the team\u0027s [user stories](https://ay1920s2-cs2113t-t13-2.github.io/tp/DeveloperGuide.html#user-stories) that we hope to implement."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Highlights"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "The implementation of the file features was initially rather tricky. Research had to be done to learn how to utilise Java\u0027s _Files_ and _Paths_ API to copy, delete and open files based on their file name and path. How the application will be able to manage deleted or renamed files are also issues to consider when implementing the file features."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Implemented Prompts on Deletion"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### What it does"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Prompts the user to confirm the deletion of item(s), instead of deleting the items straightaway."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Justification"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "This implementation will greatly benefit the user, especially if they accidentally executed the delete command on the wrong item. By prompting the user to confirm the deletion, the user will have the opportunity to abort the deletion if the deletion was not intended."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Highlights"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "While seemingly simple, the implementation proves to be slightly difficult due to the need to manage input from prompts separately from the regular commands given by the user. Considerations need to be made to switch between parsing of regular commands and parsing of prompts. Moreover, the management of multiple deletion of matching items had been also a challenge to implement."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Supported Parsing of User Input via RegEx"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### What it does"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Parses the user\u0027s input by matching with Regular Expression (RegEx) patterns."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Justification"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "As the formats for most of **Nuke**\u0027s commands contain many keywords, with a preceding prefix for most of them, manually finding each keyword via the standard _String_\u0027s _split_ and _substring_ methods may not be ideal. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Using RegEx will greatly aid the process of extracting the keywords from the user\u0027s input by dividing each keyword into groups. RegEx also makes identifying of invalid command format or duplicated prefixes much easier. "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Highlights"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Using RegEx to support the parsing was challenging initially. Most commands needs to have its own unique RegEx, since they have a different command format than that of other commands. The RegEx needs to be correct, otherwise it does not serve its purpose. As such, multiple testing was done with various possible input to ensure its correctness. This had been done for each command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Minor Enhancements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Improve the feedback messages shown to the user for invalid commands by making them more informative, so the user knows exactly where in their input was wrong."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Other Contributions"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Implemented a fully functional [GUI version]() of **Nuke**. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Though this was not the main focus of the project, having a GUI definitely improves the aesthetics of the application. The implementation of an auto-complete console will certainly aid the user to be able to enter their commands faster. In addition, the syntax highlighter can help user to identify mistakes in their command format at real time before they execute the command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Project Management"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- Generally oversee the progress of the entire project, and set targets for the team to complete"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- Refactor code regularly"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Documentation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### User Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- Created User Guide template -- [#86](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/86/commits/4564354abd1dd6bb2cc5cbee7d33a8494d5dbbb6)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- Documented Add modules, categories and tasks Features -- [#86](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/86)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Developer Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- Created Developer Guide template -- [#91](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/91)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- Documented Delete features including class and sequence diagrams -- [#93](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/93)  [#94](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/94)  [#95](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/95)  [#104](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/104)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "#### Community"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "##### Bugs"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- Amended bug issues in **Nuke** raised by other course members -- [#126](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/126) [#129](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/129) [#135](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/135) [147](https://github.com/AY1920S2-CS2113T-T13-2/tp/pull/147)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "- Reviewed other course member\u0027s tP -- [#1](https://github.com/iceclementi/ped/issues/1) [#2](https://github.com/iceclementi/ped/issues/2) [#3](https://github.com/iceclementi/ped/issues/3) [#4](https://github.com/iceclementi/ped/issues/4) [#5](https://github.com/iceclementi/ped/issues/5) [#6](https://github.com/iceclementi/ped/issues/6) [#7](https://github.com/iceclementi/ped/issues/7) [#8](https://github.com/iceclementi/ped/issues/8) [#9](https://github.com/iceclementi/ped/issues/9) [#10](https://github.com/iceclementi/ped/issues/10) [#11](https://github.com/iceclementi/ped/issues/11)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "[Functional and Test Code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003diceclementi\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos) from _GitHub RepoSense_"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 93
    }
  },
  {
    "path": "save.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- MODULE ---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "CS2113 -|||- Software Engineering \u0026 Object-Oriented Programming -|||- NIL"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "write -|||- N -|||-  -|||- 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "read -|||- N -|||-  -|||- 3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "CS2100 -|||- Computer Organisation -|||- NIL"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "listen -|||- N -|||-  -|||- 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "tut -|||- N -|||-  -|||- 2"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "CS3230 -|||- Design and Analysis of Algorithms -|||- NIL"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- CATEGORY ---"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Lecture -|||- 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Tutorial -|||- 2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Assignment -|||- 4"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "Lab -|||- 3"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- TASK ---"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lab1 -|||- N -|||-  -|||- 3"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- FILE ---"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "--- END FILE ---"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END TASK ---"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END CATEGORY ---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "--- END MODULE ---"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 27,
      "A11riseforme": 26,
      "iceclementi": 9
    }
  },
  {
    "path": "src/main/java/seedu/nuke/Executor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.promptcommand.PromptType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Variables to transit between parsing regular commands and prompts */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static PromptType promptType \u003d PromptType.NONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static DirectoryLevel directoryLevel \u003d DirectoryLevel.NONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ArrayList\u003cDirectory\u003e filteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ArrayList\u003cInteger\u003e indices;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static boolean isGui \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the system to prepare a prompt for the user to input indices."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void preparePromptIndices() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptType \u003d PromptType.INDICES;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the system to prepare a confirmation prompt for the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void preparePromptConfirmation() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptType \u003d PromptType.CONFIRMATION;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the system to terminate prompt mode and revert to normal parsing of commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void terminatePrompt() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptType \u003d PromptType.NONE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the list of indices inputted by the user during a prompt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices inputted by the user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cInteger\u003e getIndices() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return indices;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Overwrite with new list of indices inputted by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param indices"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices inputted by the user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setIndices(ArrayList\u003cInteger\u003e indices) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.indices \u003d indices;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the prompt type of the current execution."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The prompt type"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static PromptType getPromptType() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptType;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the level of the directory (module, category, task, file) in the filtered list of directories that is"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * used during prompt mode."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The level of the directories in the list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DirectoryLevel getDirectoryLevel() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return directoryLevel;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the filtered list of directories used in prompt mode."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of directories"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cDirectory\u003e getFilteredList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Overwrites the current filtered list of directories with a new filtered list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredList"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of directories"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param directoryLevel"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The level of the directories in the list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setFilteredList(ArrayList\u003cDirectory\u003e filteredList, DirectoryLevel directoryLevel) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.filteredList \u003d filteredList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.directoryLevel \u003d directoryLevel;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean isGui() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isGui;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Indicate that the program is running via GUI instead of CLI."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setIsGui() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isGui \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param userInput The input from the user to be parsed and executed as a command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return commandResult that contains the execute output information"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static CommandResult executeCommand(String userInput) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (promptType) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CONFIRMATION:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            command \u003d new Parser().parseConfirmation(userInput.toLowerCase());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case INDICES:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            command \u003d new Parser().parseIndices(userInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return execute(command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static CommandResult execute(Command command) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return command.execute();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "iceclementi": 146
    }
  },
  {
    "path": "src/main/java/seedu/nuke/Nuke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.ui.TextUi;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.util.Message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Nuke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private CommandResult commandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private HashMap\u003cString, String\u003e modulesMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * constructor of nuke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public Nuke() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        storageManager \u003d new StorageManager(StoragePath.SAVE_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        storageManager.loadList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ScreenShotManager.initialise();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * ScreenShot entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param args arguments passed to the programme."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        new Nuke().run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * run method for Nuke class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        welcomeUser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to print the welcome message to the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void welcomeUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.clearScreen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.displayLogo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        TextUi.showWelcomeMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Method to print the exit message to the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            storageManager.cleanUp();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ui.showMessage(Message.DIVIDER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            storageManager.saveList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Method to run the command from the user\u0027s input until exit command is received."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String userInput \u003d ui.getInput();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            commandResult \u003d Executor.executeCommand(userInput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ui.showResult(commandResult);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Save list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (StorageManager.isToSave()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    storageManager.saveList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } while (!ExitCommand.isExit());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 18,
      "wangqinNick": 19,
      "A11riseforme": 27,
      "iceclementi": 35,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/NukeLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class NukeLogger {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(AddModuleCommand.class.getName());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Logger getLogger() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 15
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // public static String COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //protected ModuleManager moduleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //protected static Directory currentDirectory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    return this.COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // * initialize some attributes of the command if needed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // * @param moduleManager current module manager that manages all modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public void setData(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    this.moduleManager \u003d moduleManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public static Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    return currentDirectory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public static void setCurrentDirectory(Directory currentDirectory) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    Command.currentDirectory \u003d currentDirectory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 6,
      "iceclementi": 29
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * construct the feedback to user String."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final DirectoryLevel directoryLevel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final ArrayList\u003cDirectory\u003e shownList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final ArrayList\u003cString\u003e helpGuide;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor of the CommandResult class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param feedbackToUser The feedback to be printed to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param directoryLevel The directoryLevel the user is at currently."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param listToShow the list of Directory to be printed to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param helpGuide the helping guide to be printed to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult(String feedbackToUser, DirectoryLevel directoryLevel,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                          ArrayList\u003cDirectory\u003e listToShow, ArrayList\u003cString\u003e helpGuide) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.directoryLevel \u003d directoryLevel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.shownList \u003d listToShow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.helpGuide \u003d helpGuide;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs a command result that contains both feedback message and list to show."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The feedback message to be shown to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param directoryLevel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The data type of the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param listToShow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list to be shown to the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult(String feedbackToUser, DirectoryLevel directoryLevel, ArrayList\u003cDirectory\u003e listToShow) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this(feedbackToUser, directoryLevel, listToShow, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult(String feedbackToUser, ArrayList\u003cString\u003e helpGuide) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(feedbackToUser, DirectoryLevel.NONE, null, helpGuide);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs a command result that contains the feedback message only."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The feedback message to be shown to the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this(feedbackToUser, DirectoryLevel.NONE, null, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the feedback message to be shown to the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The feedback message to be shown to the user"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the level of the list to be shown to the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The level of the list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryLevel getDirectoryLevel() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return directoryLevel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the list to be shown to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list to be shown to the user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cDirectory\u003e getShownList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return shownList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cString\u003e getHelpGuide() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return helpGuide;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 20,
      "wangqinNick": 10,
      "A11riseforme": 8,
      "iceclementi": 55
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Exit from Nuke application\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static boolean isExit; // To check if user requests to exit the program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eExit Command\u003c/b\u003e to exit the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the user has requested to exit the program (after confirmation if necessary)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if an exit is requested, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExit; // Returns true if command is exit command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 15,
      "iceclementi": 22
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddCategoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddFileCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddTagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditCategoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditFileCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteFileCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListCategoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListFileCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskSortedCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.OpenFileCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_HELP;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Show a help guide\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            AddModuleCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            AddCategoryCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            AddTaskCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            AddFileCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            AddTagCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DeleteModuleCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DeleteCategoryCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DeleteTaskCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DeleteFileCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ListModuleCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ListCategoryCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ListTaskCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ListFileCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // ListModuleTask.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ListTaskSortedCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            EditModuleCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            EditCategoryCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            EditTaskCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            EditFileCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            MarkAsDoneCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ChangeDirectoryCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            OpenFileCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            InfoCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            UndoCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            RedoCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            HelpCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ExitCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return new CommandResult(MESSAGE_HELP, commands);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "wangqinNick": 12,
      "iceclementi": 68
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eInvalid Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e that is determined to be invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String feedbackToUser; // Message to be shown to the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public IncorrectCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.feedbackToUser \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eInvalid Command\u003c/b\u003e to show the \u003ccode\u003emessage\u003c/code\u003e to the user due to an \u003ci\u003einvalid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * command\u003c/i\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "iceclementi": 24
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_CATEGORY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_CATEGORY_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageAddCategorySuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Category Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eCategory\u003c/b\u003e for the user\u0027s \u003ci\u003etasks\u003c/i\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddCategoryCommand extends AddCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addc\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ccategory name\u003e -m \u003cmodule code\u003e [ -p \u003cpriority\u003e ]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Add a new category to a module\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: addc Project -m CS2113T -p 4\\n\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"\\\\s+\\\\S+)?)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int categoryPriority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a category."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to add the category"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryPriority"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddCategoryCommand(String moduleCode, String categoryName, int categoryPriority) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryPriority \u003d categoryPriority;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a category without a priority."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to add the category"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddCategoryCommand(String moduleCode, String categoryName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(moduleCode, categoryName, 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean exceedLengthLimit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryName.length() \u003e 15;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Category Command\u003c/b\u003e to add a \u003cb\u003eCategory\u003c/b\u003e into the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (exceedLengthLimit()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module parentModule \u003d DirectoryTraverser.getModuleDirectory(moduleCode);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category toAdd \u003d new Category(parentModule, categoryName, categoryPriority);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            parentModule.getCategories().add(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageAddCategorySuccess(categoryName));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.DuplicateCategoryException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 107
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A general \u003cb\u003eCommand\u003c/b\u003e to add a Directory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 12
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddFileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.ExceedLimitException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.FileSystemException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.FILE_PREFIX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_ADD_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK_FILE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_IO_EXCEPTION;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_SECURITY_EXCEPTION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_SYSTEM_EXCEPTION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_IMPLICIT_FILE_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_FILE_PATH;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_FILE_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_FILE_NAME;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MISSING_FILE_PATH;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_FILE_CHOSEN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageAddFileSuccess;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eFile\u003c/b\u003e to the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see TaskFile"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddFileCommand extends AddCommand {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addf\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [ \u003cfile name\u003e ] -m \u003cmodule code\u003e -c \u003ccategory name\u003e \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-t \u003ctask description\u003e -f \u003cfile path\u003e\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Add a new file to a task\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: addf tut_1 -m CS2113T -c Tutorial -t do tutorial 1 -f C:/Users/a/Desktop/CS2113T/tut_1.pdf\\n\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cfileInfo\u003e(?:\\\\s+\" + FILE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String originalFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to add the task"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to add the task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The path to the file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddFileCommand(String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                          String fileName, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.originalFilePath \u003d filePath;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Generates a random hash of alphanumeric characters of fixed length."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The random hash"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String generateRandomHash() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String characters \u003d \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int hashLength \u003d 16;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder hash \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int i \u003d 0; i \u003c hashLength; ++i) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            hash.append(characters.charAt(new SecureRandom().nextInt(characters.length())));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hash.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Removes the extension from a file name if present."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file to remove the extension"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name without its extension"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String removeExtension(String fileName) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileName.indexOf(\".\") \u003e 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return fileName.substring(0, fileName.lastIndexOf(\".\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Copies file from user-specified path into a folder in the application."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent task of the file"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there is an error copying the file"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void copyFile(Task task) throws IOException, ExceedLimitException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFileManager.DuplicateTaskFileException, InvalidFileNameException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        File sourceFile \u003d new File(originalFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!sourceFile.exists() || !sourceFile.isFile()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Automatically updates new file name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileName.isEmpty()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileName \u003d removeExtension(sourceFile.getName()).trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (exceedLengthLimit()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ExceedLimitException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // File name begins with a symbol"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (fileName.matches(\"^\\\\W.*$\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new InvalidFileNameException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if name is duplicated"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDuplicateName(task, fileName)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new TaskFileManager.DuplicateTaskFileException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Path sourcePath \u003d sourceFile.toPath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String randomHash \u003d generateRandomHash();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        File destinationFile \u003d new File(String.format(\"%s/%s/%s\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                StoragePath.TASK_FILE_DIRECTORY_PATH, randomHash, sourceFile.getName()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Path destinationPath \u003d destinationFile.toPath();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Files.createDirectories(destinationPath.getParent());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Files.copy(sourcePath, destinationPath, REPLACE_EXISTING);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        filePath \u003d randomHash;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean exceedLengthLimit() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileName.length() \u003e 30;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isDuplicateName(Task task, String fileName) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return task.getFiles().contains(fileName);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void retrieveFile() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (originalFilePath.isEmpty()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert Executor.isGui() : \"Must be using a Gui in order to retrieve file!\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String[] chosenFileInformation \u003d GuiExecutor.executeFileChooser();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (chosenFileInformation \u003d\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new Exception(MESSAGE_NO_FILE_CHOSEN);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            originalFilePath \u003d chosenFileInformation[0];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (fileName.isEmpty()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                fileName \u003d chosenFileInformation[1].trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (exceedLengthLimit()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    throw new ExceedLimitException();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // File name begins with a symbol"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (fileName.matches(\"\\\\W.*\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    throw new InvalidFileNameException();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd File Command\u003c/b\u003e to add a \u003cb\u003eFile\u003c/b\u003e into the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFile"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (exceedLengthLimit()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (originalFilePath.isEmpty() \u0026\u0026 !Executor.isGui()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task parentTask \u003d DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            retrieveFile();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            copyFile(parentTask);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (fileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_INVALID_FILE_NAME);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fullFilePath \u003d new File(originalFilePath).getAbsolutePath();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile toAdd \u003d new TaskFile(parentTask, fileName, filePath, fullFilePath);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            parentTask.getFiles().add(toAdd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageAddFileSuccess(fileName));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskFileManager.DuplicateTaskFileException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TASK_FILE);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_ADD_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (FileSystemException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_SYSTEM_EXCEPTION);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (SecurityException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_SECURITY_EXCEPTION);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ExceedLimitException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_IMPLICIT_FILE_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (InvalidFileNameException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID_FILE_NAME);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(e.getMessage());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidFileNameException extends InvalidFormatException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 274
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.NukeLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageAddModuleSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddModuleCommand extends AddCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addm\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Add a new module to the list\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: addm CS2113T\\n\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddModuleCommand(String moduleCode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Module Command\u003c/b\u003e to add a \u003cb\u003eModule\u003c/b\u003e into the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Logger logger \u003d NukeLogger.getLogger();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //logger.log(Level.INFO, \"Add command is being executed.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module toAdd \u003d new Module(moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.add(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //logger.log(Level.INFO, String.format(\"Module %s was added into the module list.\", moduleCode));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert toAdd.getModuleCode().equals(moduleCode) : \"Incorrect last added module!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageAddModuleSuccess(toAdd.getModuleCode(), toAdd.getTitle()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //logger.log(Level.WARNING, String.format(\"Duplicate module %s attempted to be added.\", moduleCode));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            //logger.log(Level.WARNING, String.format(\"Unknown module %s attempted to be added.\", moduleCode));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert !ModuleManager.getModulesMap().containsKey(moduleCode) :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \"Incorrect identifying of unprovided module!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 3,
      "A11riseforme": 8,
      "iceclementi": 67
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TAG_ADDED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addg\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003ctag name\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e -t \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Add a tag to a task\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: addg urgent -m CS2113T -c Lab -t complete project\\n\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final Pattern REGEX_FORMATS \u003d Pattern.compile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final ArrayList\u003cString\u003e tagNames;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs an Add Tag Command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param tagNames"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The tag info"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the parent module"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the parent category"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddTagCommand(ArrayList\u003cString\u003e tagNames, String moduleCode, String categoryName, String taskDescription) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.tagNames \u003d tagNames;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    protected CommandResult executeAdd() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            Task toAddTag \u003d DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toAddTag.setTag(tagNames);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (String tag : tagNames) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                assert toAddTag.getTags().contains(tag) : \"tag have been successfully added\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_TAG_ADDED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return executeAdd();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 43,
      "wangqinNick": 19,
      "A11riseforme": 1,
      "iceclementi": 25
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/addcommand/AddTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.DEADLINE_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageAddTaskSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eAdd Task Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to add a \u003cb\u003eTask\u003c/b\u003e to the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AddTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e [ -d \u003cdeadline\u003e -p \u003cpriority\u003e ]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Add a new task to a category\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: addt do tutorial 1 -m CS2113T -c Tutorial -d sat 2359 -p 8\\n\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"\\\\s+\\\\S+)?)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cdeadline\u003e(?:\\\\s+\" + DEADLINE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cprioritySecond\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"\\\\s+\\\\S+)?)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime deadline;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to add the task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to add the task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddTaskCommand(String moduleCode, String categoryName, String description, DateTime deadline, int priority) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to add a task without a priority."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to add the task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to add the task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AddTaskCommand(String moduleCode, String categoryName, String description, DateTime deadline) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Dummy value for missing priority"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(moduleCode, categoryName, description, deadline, -1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean exceedLengthLimit() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return description.length() \u003e 25;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eAdd Task Command\u003c/b\u003e to add a \u003cb\u003eTask\u003c/b\u003e into the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (exceedLengthLimit()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category parentCategory \u003d DirectoryTraverser.getCategoryDirectory(moduleCode, categoryName);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (priority \u003c 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                priority \u003d parentCategory.getCategoryPriority();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toAdd \u003d new Task(parentCategory, description, deadline, priority);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            parentCategory.getTasks().add(toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageAddTaskSuccess(description));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.DuplicateTaskException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 13,
      "iceclementi": 120
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_CATEGORY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_CATEGORY_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_CATEGORY_SUCCESS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eEdit Category Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to edit a \u003cb\u003eCategory\u003c/b\u003e in the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class EditCategoryCommand extends EditCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edc\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003ccategory name\u003e -m \u003cmodule code\u003e { -c \u003cnew category name\u003e -p \u003cnew priority\u003e }\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Edit the name and priority of a category\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: edc Priject -m CS2113T -c Project -p 3\\n\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"\\\\s+\\\\S+)?)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String oldCategoryName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String newCategoryName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int newPriority;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a category."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldCategoryName"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be edited"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the category to be edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newCategoryName"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new name of the category if any"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newPriority"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new priority of the category if any"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditCategoryCommand(String oldCategoryName, String moduleCode, String newCategoryName, int newPriority) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.oldCategoryName \u003d oldCategoryName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newCategoryName \u003d newCategoryName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newPriority \u003d newPriority;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a category without a priority."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldCategoryName"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be edited"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the category to be edited"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newCategoryName"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new name of the category if any"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditCategoryCommand(String oldCategoryName, String moduleCode, String newCategoryName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(oldCategoryName, moduleCode, newCategoryName, -1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Fills in all missing attributes needed to edit the category."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be edited"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void fillAllAttributes(Category toEdit) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCode \u003d toEdit.getParent().getModuleCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newCategoryName.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newCategoryName \u003d toEdit.getCategoryName();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newPriority \u003c 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newPriority \u003d toEdit.getCategoryPriority();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean exceedLengthLimit() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return newCategoryName.length() \u003e 15;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eEdit Category Command\u003c/b\u003e to edit a \u003cb\u003eCategory\u003c/b\u003e with the \u003ccode\u003ecategory name\u003c/code\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CategoryManager"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (exceedLengthLimit()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category toEdit \u003d DirectoryTraverser.getCategoryDirectory(moduleCode, oldCategoryName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fillAllAttributes(toEdit);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toEdit.getParent().getCategories().edit(toEdit, newCategoryName, newPriority);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_CATEGORY_SUCCESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.DuplicateCategoryException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 135
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 6
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditFileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.FILE_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK_FILE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_FILE_SUCCESS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_FILE_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eEdit File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to edit a \u003cb\u003eFile\u003c/b\u003e in the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see TaskFile"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class EditFileCommand extends EditCommand {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edf\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003cfile name\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e -t \u003ctask description\u003e -f \u003cnew file name\u003e\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Edit the name of a file\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: edf tut_2 -m CS2113T -c Tutorial -t do tutorial 3 -f tut_3\\n\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cfileInfo\u003e(?:\\\\s+\" + FILE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String oldFileName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String newFileName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldFileName"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file to be edited"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the file to be edited"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category containing the file to be edited"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task containing the file to be edited"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newFileName"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new name of the file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditFileCommand(String oldFileName, String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "               String newFileName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.oldFileName \u003d oldFileName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newFileName \u003d newFileName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean exceedLengthLimit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return newFileName.length() \u003e 30;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eEdit File Command\u003c/b\u003e to edit a \u003cb\u003eFile\u003c/b\u003e with the \u003ccode\u003etask description\u003c/code\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFile"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFileManager"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (exceedLengthLimit()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile toEdit \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    DirectoryTraverser.getFileDirectory(moduleCode, categoryName, taskDescription, oldFileName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toEdit.getParent().getFiles().edit(toEdit, newFileName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_FILE_SUCCESS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskFileManager.TaskFileNotFoundException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskFileManager.DuplicateTaskFileException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TASK_FILE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 121
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eEdit Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to edit a \u003cb\u003eModule\u003c/b\u003e in the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edm\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cmodule code\u003e -m \u003cnew module code\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Edit the module code of a module\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: edm CS2113 -m CS2113T\\n\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String oldModuleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String newModuleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a module."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldModuleCode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be edited"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new module code for the module if any"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditModuleCommand(String oldModuleCode, String newModuleCode) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.oldModuleCode \u003d oldModuleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newModuleCode \u003d newModuleCode.toUpperCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eEdit Module Command\u003c/b\u003e to edit a \u003cb\u003eModule\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see ModuleManager"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module toEdit \u003d DirectoryTraverser.getModuleDirectory(oldModuleCode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.edit(toEdit, newModuleCode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }  catch (ModuleNotProvidedException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.DuplicateModuleException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 83
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.DEADLINE_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eEdit Task Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to edit a \u003cb\u003eTask\u003c/b\u003e in the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class EditTaskCommand extends EditCommand {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e\\n\\t\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \" { -t \u003cnew task description\u003e -d \u003cnew deadline\u003e -p \u003cnew priority\u003e }\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Edit the description, deadline and priority of a task\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: edt read week 6 nites -m CS2113T -c Lecture -t read week 8 notes -d sun -p 1\\n\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"\\\\s+\\\\S+)?)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cdeadline\u003e(?:\\\\s+\" + DEADLINE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cprioritySecond\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"\\\\s+\\\\S+)?)\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String oldTaskDescription;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String newTaskDescription;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime newDeadline;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int newPriority;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldTaskDescription"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be edited"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the task to be edited"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category containing the task to be edited"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newDeadline"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new deadline of the task if any"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newPriority"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new priority of the task if any"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditTaskCommand(String oldTaskDescription, String moduleCode, String categoryName,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           String newTaskDescription, DateTime newDeadline, int newPriority) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.oldTaskDescription \u003d oldTaskDescription;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newTaskDescription \u003d newTaskDescription;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newDeadline \u003d newDeadline;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.newPriority \u003d newPriority;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to edit a task without a priority."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param oldTaskDescription"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be edited"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the task to be edited"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category containing the task to be edited"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new description of the task if any"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newDeadline"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new deadline of the task if any"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public EditTaskCommand(String oldTaskDescription, String moduleCode, String categoryName,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           String newTaskDescription, DateTime newDeadline) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(oldTaskDescription, moduleCode, categoryName, newTaskDescription, newDeadline, -1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Fills in all missing attributes needed to edit the task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be edited"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void fillAllAttributes(Task toEdit) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCode \u003d toEdit.getParent().getParent().getModuleCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryName \u003d toEdit.getParent().getCategoryName();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newTaskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newTaskDescription \u003d toEdit.getDescription();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!newDeadline.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newDeadline \u003d toEdit.getDeadline();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newPriority \u003c 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newPriority \u003d toEdit.getPriority();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean exceedLengthLimit() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return newTaskDescription.length() \u003e 25;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eEdit Task Command\u003c/b\u003e to edit a \u003cb\u003eTask\u003c/b\u003e with the \u003ccode\u003etask description\u003c/code\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskManager"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (exceedLengthLimit()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_EXCEED_LIMIT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toEdit \u003d DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, oldTaskDescription);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fillAllAttributes(toEdit);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toEdit.getParent().getTasks().edit(toEdit, newTaskDescription, newDeadline, newPriority);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_TASK_SUCCESS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.DuplicateTaskException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 12,
      "iceclementi": 151
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/editcommand/MarkAsDoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class MarkAsDoneCommand extends EditCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ctask description\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Mark a task as done\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: done review PR -m CS2113T -c Project\\n\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"(?\u003cinvalid\u003e(?:\\\\s+-.*)*)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructs the command to mark a task as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the task to be marked as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category containing the task to be marked as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be marked as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public MarkAsDoneCommand(String moduleCode, String categoryName, String taskDescription) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toMarkAsDone \u003d DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            toMarkAsDone.setDone(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert toMarkAsDone.isDone() : \"How can this be?\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StorageManager.setIsSave();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_TASK_SUCCESS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "A11riseforme": 40,
      "iceclementi": 26
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.ALL_FLAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.EXACT_FLAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class FilterCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern MODULE_REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern CATEGORY_REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern TASK_REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern FILE_REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_OPTIONAL_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cModule\u003e createFilteredModuleList(String moduleKeyword, boolean isExact) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filterModules(moduleKeyword, isExact);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cCategory\u003e createFilteredCategoryList(String moduleKeyword, String categoryKeyword,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "          boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isAll) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterCategories(moduleKeyword, categoryKeyword, isExact);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Filters with respect of current level"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u0026\u0026 DirectoryTraverser.getCurrentDirectoryLevel().ordinal() \u003e\u003d DirectoryLevel.MODULE.ordinal()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                CategoryManager categoryList \u003d DirectoryTraverser.getBaseModule().getCategories();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return isExact ? categoryList.filterExact(categoryKeyword) : categoryList.filter(categoryKeyword);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterCategories(moduleKeyword, categoryKeyword, isExact);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterCategories(moduleKeyword, categoryKeyword, isExact);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected ArrayList\u003cTask\u003e createFilteredTaskList(String moduleKeyword, String categoryKeyword,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "          String taskKeyword, boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isAll) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterTasks(moduleKeyword, categoryKeyword, taskKeyword, isExact);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Filters with respect of current level"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty() \u0026\u0026 categoryKeyword.isEmpty()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u0026\u0026 DirectoryTraverser.getCurrentDirectoryLevel().ordinal() \u003e\u003d DirectoryLevel.CATEGORY.ordinal()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                TaskManager taskList \u003d DirectoryTraverser.getBaseCategory().getTasks();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return isExact ? taskList.filterExact(taskKeyword) : taskList.filter(taskKeyword);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u0026\u0026 DirectoryTraverser.getCurrentDirectoryLevel().ordinal() \u003e\u003d DirectoryLevel.MODULE.ordinal()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                CategoryManager categoryList \u003d DirectoryTraverser.getBaseModule().getCategories();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return isExact ? categoryList.filterExact(categoryKeyword, taskKeyword) :"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        categoryList.filter(categoryKeyword, taskKeyword);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterTasks(moduleKeyword, categoryKeyword, taskKeyword, isExact);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterTasks(moduleKeyword, categoryKeyword, taskKeyword, isExact);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    protected ArrayList\u003cTaskFile\u003e createFilteredFileList(String moduleKeyword,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            String categoryKeyword, String taskKeyword, String fileKeyword, boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isAll) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterFiles(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Filters with respect of current level"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty() \u0026\u0026 categoryKeyword.isEmpty() \u0026\u0026 taskKeyword.isEmpty()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u0026\u0026 DirectoryTraverser.getCurrentDirectoryLevel().ordinal() \u003e\u003d DirectoryLevel.TASK.ordinal()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                TaskFileManager fileList \u003d DirectoryTraverser.getBaseTask().getFiles();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return isExact ? fileList.filterExact(fileKeyword) : fileList.filter(fileKeyword);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty() \u0026\u0026 categoryKeyword.isEmpty()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u0026\u0026 DirectoryTraverser.getCurrentDirectoryLevel().ordinal() \u003e\u003d DirectoryLevel.CATEGORY.ordinal()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                TaskManager taskList \u003d DirectoryTraverser.getBaseCategory().getTasks();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return isExact ? taskList.filterExact(taskKeyword, fileKeyword) :"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        taskList.filter(taskKeyword, fileKeyword);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleKeyword.isEmpty()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u0026\u0026 DirectoryTraverser.getCurrentDirectoryLevel().ordinal() \u003e\u003d DirectoryLevel.MODULE.ordinal()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                CategoryManager categoryList \u003d DirectoryTraverser.getBaseModule().getCategories();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return isExact ? categoryList.filterExact(categoryKeyword, taskKeyword, fileKeyword) :"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        categoryList.filter(categoryKeyword, taskKeyword, fileKeyword);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterFiles(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return filterFiles(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cModule\u003e filterModules(String moduleKeyword, boolean isExact) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExact ? ModuleManager.filterExact(moduleKeyword) : ModuleManager.filter(moduleKeyword);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cCategory\u003e filterCategories(String moduleKeyword, String categoryKeyword, boolean isExact) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExact ? ModuleManager.filterExact(moduleKeyword, categoryKeyword) :"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                ModuleManager.filter(moduleKeyword, categoryKeyword);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e filterTasks(String moduleKeyword, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             boolean isExact) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExact ? ModuleManager.filterExact(moduleKeyword, categoryKeyword, taskKeyword) :"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                ModuleManager.filter(moduleKeyword, categoryKeyword, taskKeyword);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTaskFile\u003e filterFiles(String moduleKeyword, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "             String fileKeyword, boolean isExact) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isExact ? ModuleManager.filterExact(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword) :"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                ModuleManager.filter(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sorts modules in a list by their module codes."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toSort"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of modules to be sorted"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected void sortModuleList(ArrayList\u003cModule\u003e toSort) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cModule\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(Module::getModuleCode);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toSort.sort(sortByModule);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sorts categories in a list by their names."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toSort"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of categories to be sorted"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected void sortCategoryList(ArrayList\u003cCategory\u003e toSort) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cCategory\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(category -\u003e category.getParent().getModuleCode());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cCategory\u003e sortByCategory \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(Category::getCategoryName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toSort.sort(sortByModule.thenComparing(sortByCategory));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sorts tasks in a list by their description, deadline or priority."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toSort"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of tasks to be sorted"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected void sortTaskList(ArrayList\u003cTask\u003e toSort, boolean isSortDeadline, boolean isSortPriority) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTask\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(task -\u003e task.getParent().getParent().getModuleCode());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTask\u003e sortByCategory \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(task -\u003e task.getParent().getCategoryName());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTask\u003e sortByTask \u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(Task::getDescription);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTask\u003e sortByDeadline \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(task -\u003e task.getDeadline().getDateTimeInSortFormat());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTask\u003e sortByPriority \u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(Task::getPriority, Comparator.reverseOrder());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isSortDeadline) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toSort.sort(sortByDeadline.thenComparing(sortByPriority).thenComparing(sortByModule)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .thenComparing(sortByCategory).thenComparing(sortByTask));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (isSortPriority) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toSort.sort(sortByPriority.thenComparing(sortByDeadline).thenComparing(sortByModule)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .thenComparing(sortByCategory).thenComparing(sortByTask));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toSort.sort(sortByModule.thenComparing(sortByCategory).thenComparing(sortByTask));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sorts files in a list by their name."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toSort"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of files to be sorted"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected void sortFileList(ArrayList\u003cTaskFile\u003e toSort) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTaskFile\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(file -\u003e file.getParent().getParent().getParent().getModuleCode());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTaskFile\u003e sortByCategory \u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(file -\u003e file.getParent().getParent().getCategoryName());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTaskFile\u003e sortByTask \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(file -\u003e file.getParent().getDescription());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Comparator\u003cTaskFile\u003e sortByFile \u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(TaskFile::getFileName);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toSort.sort(sortByModule.thenComparing(sortByCategory).thenComparing(sortByTask).thenComparing(sortByFile));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "iceclementi": 236
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_CATEGORIES_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteCategoryIndices;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete Category Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to delete \u003cb\u003eCategory(s)\u003c/b\u003e from the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Category"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteCategoryCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ccategory name\u003e -m \u003cmodule code\u003e [ -e -a ]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Filter and delete the categories of module(s)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -e to filter for exact keywords; -a to filter across ALL your categories\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: delc assignment -m CS2113T -a\\n\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to delete a category."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to delete the category"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if filtering is to be done across all modules"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteCategoryCommand(String moduleCode, String categoryName, boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Executes the initial phase of the category deletion process depending on the number of categories filtered."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are no categories in the filtered list, then the deletion ends."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Otherwise, if there is one, there will be a prompt to request confirmation."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are multiple categories instead, there will be a prompt to choose which categories to delete."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredCategories"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of categories containing possibly the categories to be deleted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredCategories) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int categoriesCount \u003d filteredCategories.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoriesCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_CATEGORIES_FOUND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (categoriesCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredCategories, DirectoryLevel.CATEGORY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category toDelete \u003d (Category) filteredCategories.get(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteCategory(toDelete));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptIndices();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredCategories, DirectoryLevel.CATEGORY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messagePromptDeleteCategoryIndices(filteredCategories));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Category Command\u003c/b\u003e to delete \u003cb\u003eCategory(s)\u003c/b\u003e with the \u003ccode\u003ecategory name\u003c/code\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategories \u003d createFilteredCategoryList(moduleCode, categoryName, isExact, isAll);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortCategoryList(filteredCategories);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return executeInitialDelete(new ArrayList\u003c\u003e(filteredCategories));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 97
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.FilterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A general \u003cb\u003eCommand\u003c/b\u003e to delete Directory/Directories."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class DeleteCommand extends FilterCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected abstract CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 6,
      "iceclementi": 12
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteFileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_FILES_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteFileIndices;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to delete \u003cb\u003eFiles(s)\u003c/b\u003e from the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see TaskFile"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteFileCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delf\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cfile name\u003e -m \u003cmodule code\u003e \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-c \u003ccategory name\u003e -t \u003ctask description\u003e [ -e -a ]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Filter and delete the files of task(s)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -e to filter for exact keywords; -a to filter across ALL your files\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: delf tut_4 -m cs2113t -c tutorial -t do tut 4 -e -a\\n\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to delete a file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to delete the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to delete the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if filtering is to be done across all modules and categories"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteFileCommand(String moduleCode, String categoryName, String taskDescription, String fileName,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "             boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Executes the initial phase of the file deletion process depending on the number of files filtered."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are no files in the filtered list, then the deletion ends."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Otherwise, if there is one, there will be a prompt to request confirmation."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are multiple files instead, there will be a prompt to choose which files to delete."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredFiles"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files containing possibly the files to be deleted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredFiles) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int fileCount \u003d filteredFiles.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_FILES_FOUND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (fileCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredFiles, DirectoryLevel.FILE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile toDelete \u003d (TaskFile) filteredFiles.get(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteFile(toDelete));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptIndices();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredFiles, DirectoryLevel.FILE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messagePromptDeleteFileIndices(filteredFiles));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete File Command\u003c/b\u003e to delete \u003cb\u003eFile\u003c(s)\u003c/b\u003e with the \u003ccode\u003efile name\u003c/code\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFile"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFiles \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredFileList(moduleCode, categoryName, taskDescription, fileName, isExact, isAll);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortFileList(filteredFiles);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return executeInitialDelete(new ArrayList\u003c\u003e(filteredFiles));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 109
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_MODULES_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteModuleIndices;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete Module Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to delete \u003cb\u003eModule(s)\u003c/b\u003e from the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Module"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteModuleCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delm\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"delm \u003cmodule code\u003e [ -e ]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Filter and delete module(s)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -e to filter for exact keywords\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: delm cs2113 -e\\n\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to delete a module."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if modules are to be filtered exactly"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteModuleCommand(String moduleCode, boolean isExact) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Executes the initial phase of the module deletion process depending on the number of modules filtered."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are no modules in the filtered list, then the deletion ends."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Otherwise, if there is one, there will be a prompt to request confirmation."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are multiple modules instead, there will be a prompt to choose which modules to delete."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredModules"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of modules containing possibly the modules to be deleted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredModules) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int modulesCount \u003d filteredModules.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (modulesCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_MODULES_FOUND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (modulesCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredModules, DirectoryLevel.MODULE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module toDelete \u003d (Module) filteredModules.get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteModule(toDelete));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptIndices();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredModules, DirectoryLevel.MODULE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messagePromptDeleteModuleIndices(filteredModules));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Module Command\u003c/b\u003e to delete \u003cb\u003eModule(s)\u003c/b\u003e with the \u003ccode\u003emodule code\u003c/code\u003e from the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see ModuleManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e filteredModules \u003d createFilteredModuleList(moduleCode, isExact);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortModuleList(filteredModules);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return executeInitialDelete(new ArrayList\u003c\u003e(filteredModules));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 2,
      "iceclementi": 89
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteTagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class DeleteTagCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delg\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \" \u003ctag info\u003e -m \u003cmodule code\u003e -c \u003ccategory name\u003e\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + \" -t \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator() + \"Delete tags of task\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * Constructs the command to delete a file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *  The module code of the module that has the category to delete the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *  The name of the category to delete the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *  The tag of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *  Checks if filtering is to be done across all modules and categories"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public DeleteTagCommand(String moduleCode, String categoryName, String taskDescription, String tag,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                             boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return null; //to be implemented in v3.0"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return null; //to be implemented in v3.0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 58
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/deletecommand/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteTaskIndices;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDelete Task Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to delete \u003cb\u003eTask(s)\u003c/b\u003e from the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteTaskCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003ctask description\u003e -m \u003cmodule code\u003e \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-c \u003ccategory name\u003e [ -e -a ]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Filter and delete the tasks of category(s)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -e to filter for exact keywords; -a to filter across ALL your tasks\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: delt work -m cs2113t -c tutorial -e\\n\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to delete a task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to delete the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to delete the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if filtering is to be done across all modules, categories and tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteTaskCommand(String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                             boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Executes the initial phase of the task deletion process depending on the number of tasks filtered."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are no tasks in the filtered list, then the deletion ends."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Otherwise, if there is one, there will be a prompt to request confirmation."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are multiple tasks instead, there will be a prompt to choose which tasks to delete."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredTasks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of tasks containing possibly the tasks to be deleted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result of the execution"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected CommandResult executeInitialDelete(ArrayList\u003cDirectory\u003e filteredTasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int taskCount \u003d filteredTasks.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASKS_FOUND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (taskCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredTasks, DirectoryLevel.TASK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toDelete \u003d (Task) filteredTasks.get(0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteTask(toDelete));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.preparePromptIndices();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.setFilteredList(filteredTasks, DirectoryLevel.TASK);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messagePromptDeleteTaskIndices(filteredTasks));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDelete Task Command\u003c/b\u003e to delete \u003cb\u003eTask\u003c(s)\u003c/b\u003e with the \u003ccode\u003etask description\u003c/code\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredTaskList(moduleCode, categoryName, taskDescription, isExact, isAll);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortTaskList(filteredTasks, false, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return executeInitialDelete(new ArrayList\u003c\u003e(filteredTasks));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 13,
      "iceclementi": 91
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/DueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.ALL_FLAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_TIME_SPECIFIER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_TO_SHOW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDue Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to show a filtered \u003cb\u003eTask List\u003c/b\u003e to the user based on the \u003ci\u003ekeyword\u003c/i\u003e provided. The"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ci\u003efiltered list\u003c/i\u003e contains tasks that have their \u003ci\u003edates\u003c/i\u003e \u003ci\u003eon\u003c/i\u003e, \u003ci\u003ebefore\u003c/i\u003e or \u003ci\u003eafter\u003c/i\u003e the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * specified \u003ci\u003edate\u003c/i\u003e provided by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DueCommand extends ListCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"due\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"due [ on/before/after ] \u003cdate\u003e [ -a ]  OR  due over [ -a ]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)+)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalDate searchDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String timeSpecifier;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the \u003cb\u003eDue Command\u003c/b\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e If the \u003ccode\u003especifier\u003c/code\u003e given is \u003ccode\u003eNULL\u003c/code\u003e, the \u003ccode\u003etimeSpecifier\u003c/code\u003e is set to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003eon\u003c/i\u003e."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param searchDate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003ci\u003edate\u003c/i\u003e to filter the \u003cb\u003eTask List\u003c/b\u003e by"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param timeSpecifier"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003ci\u003etime specifier\u003c/i\u003e to filter the \u003cb\u003eTask List\u003c/b\u003e by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  To toggle between showing done tasks in the filtered list or not"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DueCommand(LocalDate searchDate, String timeSpecifier, boolean isAll) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.searchDate \u003d searchDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.timeSpecifier \u003d (timeSpecifier !\u003d null) ? timeSpecifier.toLowerCase() : \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the \u003cb\u003eDue Command\u003c/b\u003e to show Overdue tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param timeSpecifier"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003ci\u003etime specifier\u003c/i\u003e that should be only the \"over\" string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  To toggle between showing done tasks in the filtered list or not"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DueCommand(String timeSpecifier, boolean isAll) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.timeSpecifier \u003d timeSpecifier;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assert timeSpecifier.equals(\"over\") : \"Incorrect use of the due over command!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filters the \u003ci\u003etasks\u003c/i\u003e for \u003ci\u003edeadlines\u003c/i\u003e on the \u003cu\u003esame\u003c/u\u003e \u003ci\u003edate\u003c/i\u003e as the specified search date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e Returns an \u003ccode\u003eArrayList\u003c/code\u003e containing the filtered \u003ci\u003etasks\u003c/i\u003e."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The initial task list to filter from"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003ccode\u003eArrayList\u003c/code\u003e of filtered tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e filterDate(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Ignore done tasks if not displaying all the tasks"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!isAll \u0026\u0026 task.isDone()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTime deadline \u003d task.getDeadline();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (deadline.isPresent() \u0026\u0026 deadline.isOn(searchDate)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filters the \u003ci\u003etasks\u003c/i\u003e for \u003ci\u003edeadlines\u003c/i\u003e on an \u003cu\u003eearlier\u003c/u\u003e \u003ci\u003edate\u003c/i\u003e compared to the specified"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * search date."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e Returns an \u003ccode\u003eArrayList\u003c/code\u003e containing the filtered \u003ci\u003etasks\u003c/i\u003e."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The initial task list to filter from"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003ccode\u003eArrayList\u003c/code\u003e of filtered tasks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e filterDateBefore(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Ignore done tasks if not displaying all the tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!isAll \u0026\u0026 task.isDone()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTime deadline \u003d task.getDeadline();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (deadline.isPresent() \u0026\u0026 deadline.isBefore(searchDate)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filters the \u003ci\u003etasks\u003c/i\u003e for \u003ci\u003edeadlines\u003c/i\u003e on a \u003cu\u003elater\u003c/u\u003e \u003ci\u003edate\u003c/i\u003e compared to the specified"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * search date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e Returns an \u003ccode\u003eArrayList\u003c/code\u003e containing the filtered \u003ci\u003etasks\u003c/i\u003e."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The initial task list to filter from"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003ccode\u003eArrayList\u003c/code\u003e of filtered tasks"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e filterDateAfter(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Ignore done tasks if not displaying all the tasks"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!isAll \u0026\u0026 task.isDone()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTime deadline \u003d task.getDeadline();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (deadline.isPresent() \u0026\u0026 deadline.isAfter(searchDate)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e filterOverdue(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Ignore done tasks if not displaying all the tasks"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!isAll \u0026\u0026 task.isDone()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTime deadline \u003d task.getDeadline();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (deadline.isPresent() \u0026\u0026 deadline.isDue()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eDue Command\u003c/b\u003e to show the filtered \u003cb\u003eTask List\u003c/b\u003e to the user based on the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003esearchDate\u003c/code\u003e and \u003ccode\u003etimeSpecifier\u003c/code\u003e."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d ModuleManager.getAllTasks();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (timeSpecifier) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"on\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTasks \u003d filterDate(allTasks);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"before\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTasks \u003d filterDateBefore(allTasks);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"after\":"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"a\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTasks \u003d filterDateAfter(allTasks);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"over\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTasks \u003d filterOverdue(allTasks);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID_TIME_SPECIFIER);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (filteredTasks.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASKS_TO_SHOW);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortTaskList(filteredTasks, true, false);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.TASK, new ArrayList\u003c\u003e(filteredTasks));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 203
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_CATEGORIES_TO_SHOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListCategoryCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsc\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [ \u003ccategory keyword\u003e -m \u003cmodule keyword\u003e -e -a ]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Filter and show the categories of module(s)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -e to filter for exact keywords; -a to filter across ALL your categories\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: lsc tutorial -e -a\\n\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleKeyWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryKeyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to list categories."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyWord"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if categories are to be filtered exactly"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks whether to show \u003cb\u003eall\u003c/b\u003e categories across modules"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListCategoryCommand(String moduleKeyWord, String categoryKeyword, boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleKeyWord \u003d moduleKeyWord;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryKeyword \u003d categoryKeyword;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eList Category Command\u003c/b\u003e to show a filtered list of modules."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredCategoryList(moduleKeyWord, categoryKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (filteredCategoryList.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_CATEGORIES_TO_SHOW);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortCategoryList(filteredCategoryList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.CATEGORY, new ArrayList\u003c\u003e(filteredCategoryList));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 63
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.FilterCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class ListCommand extends FilterCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListFileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_FILES_TO_SHOW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListFileCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsf\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"lsf [ \u003cfile keyword\u003e -m \u003cmodule keyword\u003e \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-c \u003ccategory keyword\u003e -t \u003ctask keyword\u003e -e -a ]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Filter and show the files of task(s)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -e to filter for exact keywords; -a to filter across ALL your files\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: lsf tut -m cs2113t -t tut -a\\n\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleKeyWord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryKeyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskKeyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileKeyword;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to list tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyWord"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if tasks are to be filtered exactly"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks whether to show \u003cb\u003eall\u003c/b\u003e tasks across modules and categories"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListFileCommand(String moduleKeyWord, String categoryKeyword, String taskKeyword, String fileKeyword,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleKeyWord \u003d moduleKeyWord;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryKeyword \u003d categoryKeyword;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskKeyword \u003d taskKeyword;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileKeyword \u003d fileKeyword;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eList Task Command\u003c/b\u003e to show a filtered list of modules."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredFileList(moduleKeyWord, categoryKeyword, taskKeyword, fileKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (filteredFileList.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_FILES_TO_SHOW);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortFileList(filteredFileList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.FILE, new ArrayList\u003c\u003e(filteredFileList));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 74
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_MODULES_TO_SHOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ListModuleCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [ \u003cmodule keyword\u003e -e ]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Filter and show module(s)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -e to filter for exact keywords\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: lsm CS -a\\n\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleKeyWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to list modules."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyWord"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if modules are to be filtered exactly"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListModuleCommand(String moduleKeyWord, boolean isExact) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleKeyWord \u003d moduleKeyWord;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eList Module Command\u003c/b\u003e to show a filtered list of modules."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e filteredModuleList \u003d createFilteredModuleList(moduleKeyWord, isExact);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (filteredModuleList.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_MODULES_TO_SHOW);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortModuleList(filteredModuleList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.MODULE, new ArrayList\u003c\u003e(filteredModuleList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 3,
      "wangqinNick": 4,
      "iceclementi": 47
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListModuleTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.util.ExceptionMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_TO_SHOW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageTaskSuccessfullyList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " * sort all tasks of one module according to deadline of task and print it out to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListModuleTask extends ListCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsmtd\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"List tasks of module in ascending order of deadline\" + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListModuleTask(String moduleCode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            final String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            Module module \u003d DirectoryTraverser.getModuleDirectory(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTaskList \u003d ModuleManager.filterExact(module.getModuleCode(), noKeyword, noKeyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            sortTaskList(filteredTaskList, true, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (filteredTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_NO_TASKS_TO_SHOW);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            assert !filteredTaskList.isEmpty() : \"make sure there are some tasks in the list\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageTaskSuccessfullyList(filteredTaskList.size()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    DirectoryLevel.TASK, new ArrayList\u003c\u003e(filteredTaskList));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return new CommandResult(ExceptionMessage.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 18,
      "wangqinNick": 19,
      "A11riseforme": 2,
      "iceclementi": 16
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_TO_SHOW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListTaskCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lst\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [ \u003ctask keyword\u003e -m \u003cmodule keyword\u003e \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-c \u003ccategory keyword\u003e -e -a ]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Filter and show the tasks of category(s)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -e to filter for exact keywords; -a to filter across ALL your tasks\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: lst tut -m cs2113t -e\\n\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleKeyWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryKeyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskKeyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isExact;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isAll;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to list tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyWord"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isExact"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks if tasks are to be filtered exactly"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param isAll"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Checks whether to show \u003cb\u003eall\u003c/b\u003e tasks across modules, categories and tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListTaskCommand(String moduleKeyWord, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           boolean isExact, boolean isAll) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleKeyWord \u003d moduleKeyWord;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryKeyword \u003d categoryKeyword;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskKeyword \u003d taskKeyword;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isExact \u003d isExact;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isAll \u003d isAll;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eList Task Command\u003c/b\u003e to show a filtered list of modules."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createFilteredTaskList(moduleKeyWord, categoryKeyword, taskKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (filteredTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASKS_TO_SHOW);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        sortTaskList(filteredTaskList, false, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW_LIST, DirectoryLevel.TASK, new ArrayList\u003c\u003e(filteredTaskList));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 68
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/filtercommand/listcommand/ListTaskSortedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.DEADLINE_PREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_TO_SHOW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageTaskSuccessfullyList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * Sorts all undone tasks across all modules by either deadline or priority and display the sorted tasks to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * By default, this command sorts all undone tasks by deadline, unless specified by the user to sort by priority."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListTaskSortedCommand extends ListCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lsts\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [ \u003cmodule code\u003e ] [ -d -p (choose 1; default -d) ]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - List all undone tasks from nearest to latest deadline or from largest to smallest priority\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Note: -d to filter by deadline (default); -p to filter by priority\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: lsts cs2113t -p\\n\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \")?)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cdeadline\u003e(?:\\\\s+\" + DEADLINE_PREFIX + \")?)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cprioritySecond\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \")?)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isByPriority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListTaskSortedCommand(String moduleCode, boolean isByPriority) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.isByPriority \u003d isByPriority;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if module exists in Module List"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!ModuleManager.contains(moduleCode)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Get all tasks with module code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d ModuleManager.filterExact(moduleCode, noKeyword, noKeyword).stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .filter(task -\u003e !task.isDone()).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (filteredTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TASKS_TO_SHOW);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isByPriority) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            sortTaskList(filteredTaskList, false, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            sortTaskList(filteredTaskList, true, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assert filteredTaskList.isEmpty() : \"make sure there are some tasks in the list\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(messageTaskSuccessfullyList(filteredTaskList.size()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DirectoryLevel.TASK, new ArrayList\u003c\u003e(filteredTaskList));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 75
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/misc/ChangeDirectoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DirectoryTraversalOutOfBoundsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DIRECTORY_NOT_FOUND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FAILED_DIRECTORY_TRAVERSAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TRAVERSE_ERROR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ChangeDirectoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cd\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" \u003cnext directory name\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Traverse up and down the directories; \u0027..\u0027 represents parent directory\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: cd Tutorial;\\tcd ..\\n\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String nextDirectoryName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Directory directory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to traverse down into the next directory with the given name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param nextDirectoryName"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the next directory"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ChangeDirectoryCommand(String nextDirectoryName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.nextDirectoryName \u003d nextDirectoryName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.directory \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to traverse up from the current directory."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ChangeDirectoryCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        nextDirectoryName \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directory \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to traverse to a specified directory."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param directory"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The directory to traverse to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ChangeDirectoryCommand(Directory directory) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        nextDirectoryName \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the Change Directory Command to traverse up or down the current Directory, or to a specified Directory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Traverse to specified directory"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (directory !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.traverseTo(directory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Traverse up or down current directory"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if ((nextDirectoryName !\u003d null)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Directory nextDirectory \u003d DirectoryTraverser.findNextDirectory(nextDirectoryName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DirectoryTraverser.traverseDown(nextDirectory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DirectoryTraverser.traverseUp();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // No feedback for successful traversal"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DirectoryTraversalOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FAILED_DIRECTORY_TRAVERSAL);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DataNotFoundException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DIRECTORY_NOT_FOUND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 13,
      "iceclementi": 73
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/misc/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eOpen File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to clear the Gui Console Screen."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Clears the screen\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + System.lineSeparator() + FORMAT + System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        GuiExecutor.clearScreen();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // No feedback to user; simply clears the screen"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new CommandResult(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 27
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/misc/InfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A command to display information about a specified Directory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class InfoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"info\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Display information about the current directory\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Directory directory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * A constructor for the Info Command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param directory"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The directory to display the information of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public InfoCommand(Directory directory) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * A constructor for the Info Command. The directory to use will be the current directory."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public InfoCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(DirectoryTraverser.getCurrentDirectory());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Gets the list of underlying child directories to show to the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of sub directories under the specified directory"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cDirectory\u003e getListToShow() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directory.getLevel()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ArrayList\u003c\u003e(ModuleManager.getModuleList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module module \u003d (Module) directory;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ArrayList\u003c\u003e(module.getCategories().getCategoryList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category category \u003d (Category) directory;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ArrayList\u003c\u003e(category.getTasks().getTaskList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task task \u003d (Task) directory;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ArrayList\u003c\u003e(task.getFiles().getFileList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eInfo Command\u003c/b\u003e to display information about the Directory."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cDirectory\u003e listToShow \u003d getListToShow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (listToShow \u003d\u003d null || listToShow.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(directory.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(directory.toString(), directory.getLevel().next(), listToShow);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 86
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/misc/OpenFileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.FilterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.data.storage.StoragePath.TASK_FILE_DIRECTORY_PATH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.parser.Parser.TASK_PREFIX;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_IO_EXCEPTION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_FILE_NOT_FOUND_OPEN;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_FILES_FOUND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_OPEN_FILE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eOpen File Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eCommand\u003c/b\u003e to open a \u003cb\u003eFile\u003c/b\u003e to the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * @see TaskFile"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class OpenFileCommand extends FilterCommand {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD + \" [ \u003cfile name\u003e ] -m \u003cmodule code\u003e \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"-c \u003ccategory name\u003e -t \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Open the file(s) of a task\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Example: open tut_4 -m cs2113t -c Tutorial -t do tutorial 4\\n\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern REGEX_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to open a file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module that has the category to delete the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to delete the task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public OpenFileCommand(String moduleCode, String categoryName, String taskDescription, String fileName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filters for the files to be opened."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files to be opened"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTaskFile\u003e filterFilesToOpen()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleManager.ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException, TaskFileManager.TaskFileNotFoundException,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task parentTask \u003d  DirectoryTraverser.getTaskDirectory(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!fileName.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // If file name is given, open the specified file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ArrayList\u003c\u003e(Collections.singletonList(parentTask.getFiles().getFile(fileName)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Open all files in the task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return parentTask.getFiles().getFileList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Opens the files in the filtered list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filesToOpen"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of files to be opened"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there is an error opening the file(s)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void openFiles(ArrayList\u003cTaskFile\u003e filesToOpen) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e nonExistentFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : filesToOpen) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String filePath \u003d String.format(\"%s/%s\",  TASK_FILE_DIRECTORY_PATH, file.getFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            File[] filesInDirectory \u003d new File(filePath).listFiles();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (filesInDirectory \u003d\u003d null || filesInDirectory.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                nonExistentFiles.add(file.getFileName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Get the first file in the list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            File toOpen \u003d filesInDirectory[0];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!toOpen.exists() || !toOpen.isFile()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                nonExistentFiles.add(file.getFileName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                desktop.open(toOpen);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!nonExistentFiles.isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileNames \u003d String.join(\", \", nonExistentFiles);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new FileNotFoundException(fileNames);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the \u003cb\u003eOpen File Command\u003c/b\u003e to open \u003cb\u003eFile\u003c(s)\u003c/b\u003e with the \u003ccode\u003efile name\u003c/code\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * from the \u003cb\u003eFile List\u003c/b\u003e."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003eCommand Result\u003c/b\u003e of the execution"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see TaskFile"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see CommandResult"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e filesToOpen \u003d filterFilesToOpen();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (filesToOpen.isEmpty()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(MESSAGE_NO_FILES_FOUND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            openFiles(filesToOpen);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_OPEN_FILE_SUCCESS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (TaskFileManager.TaskFileNotFoundException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_TASK_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(String.format(\"%s%s\\n\", MESSAGE_FILE_NOT_FOUND_OPEN, e.getMessage()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_IO_EXCEPTION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 176
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/misc/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TRAVERSE_ERROR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_REDO_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Redo the undo command\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_REDO_UNSUCCESSFUL \u003d \"Sorry, there was an IO error when redoing the state.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_REDO_AT_END \u003d \"You are already at the newest state!\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            ScreenShotManager.redo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_REDO_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException | CorruptedFileException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_REDO_UNSUCCESSFUL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (EmptyStackException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_REDO_AT_END);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 22,
      "iceclementi": 16
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/misc/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.misc;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TRAVERSE_ERROR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_UNDO_SUCCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d String.format("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"%s - Undo the recent change made to the list\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Format: %s\\n\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            COMMAND_WORD, FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_UNDO_UNSUCCESSFUL \u003d \"Sorry, there was an IO error when undoing the state.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_UNDO_AT_BEGINNING \u003d \"You are already at the initial state!\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            ScreenShotManager.undo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException | CorruptedFileException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_UNSUCCESSFUL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (EmptyStackException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new CommandResult(MESSAGE_UNDO_AT_BEGINNING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 24,
      "iceclementi": 13
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/promptcommand/ConfirmationStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.promptcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public enum ConfirmationStatus {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    CONFIRM,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ABORT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    WAIT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/promptcommand/DeleteConfirmationPrompt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.promptcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_ABORTED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_CATEGORY_SUCCESS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_FILE_SUCCESS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_ILLEGAL_DELETE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_PROMPT_FORMAT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DeleteConfirmationPrompt extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ConfirmationStatus confirmationStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DirectoryLevel directoryLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to process the delete confirmation prompt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param confirmationStatus"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The confirmation status of the deletion"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DeleteConfirmationPrompt(ConfirmationStatus confirmationStatus) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.confirmationStatus \u003d confirmationStatus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.directoryLevel \u003d Executor.getDirectoryLevel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a single module."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be deleted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteSingleModule(Module toDelete) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.delete(toDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a single category."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteSingleCategory(Category toDelete) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module parentModule \u003d toDelete.getParent();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        parentModule.getCategories().delete(toDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a single task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be deleted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteSingleTask(Task toDelete) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Category parentCategory \u003d toDelete.getParent();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        parentCategory.getTasks().delete(toDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a single file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file to be deleted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteSingleFile(TaskFile toDelete) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task parentTask \u003d toDelete.getParent();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        parentTask.getFiles().delete(toDelete);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes multiple modules."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of modules"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices of the modules to be deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteMultipleModules(ArrayList\u003cModule\u003e modules, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module toDelete \u003d modules.get(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleModule(toDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes multiple categories."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categories"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of categories"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices of the categories to be deleted"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteMultipleCategories(ArrayList\u003cCategory\u003e categories, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category toDelete \u003d categories.get(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleCategory(toDelete);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes multiple tasks."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices of the tasks to be deleted"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteMultipleTasks(ArrayList\u003cTask\u003e tasks, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task toDelete \u003d tasks.get(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleTask(toDelete);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes multiple files."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param files"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of indices of the files to be deleted"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void deleteMultipleFiles(ArrayList\u003cTaskFile\u003e files, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile toDelete \u003d files.get(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleFile(toDelete);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes single deletion for the various levels of the Directory."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Directory to be deleted"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private CommandResult executeSingleDelete(Directory toDelete) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directoryLevel) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE: {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleModule(((Module) toDelete));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY: {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleCategory(((Category) toDelete));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_CATEGORY_SUCCESS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK: {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleTask(((Task) toDelete));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE: {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteSingleFile(((TaskFile) toDelete));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_FILE_SUCCESS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(\"Error in single deletion.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes multiple deletion for the various levels of the Directory."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredList"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of Directories to be deleted"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private CommandResult executeMultipleDelete(ArrayList\u003cDirectory\u003e filteredList) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cInteger\u003e toDeleteIndices \u003d Executor.getIndices();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directoryLevel) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE: {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of modules"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e filteredModules \u003d filteredList.stream()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Module.class::cast)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteMultipleModules(filteredModules, toDeleteIndices);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_MODULE_SUCCESS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY: {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of categories"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cCategory\u003e filteredCategories \u003d filteredList.stream()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category.class::cast)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteMultipleCategories(filteredCategories, toDeleteIndices);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_CATEGORY_SUCCESS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK: {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of tasks"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTasks \u003d filteredList.stream()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task.class::cast)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteMultipleTasks(filteredTasks, toDeleteIndices);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE: {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of files"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e filteredFiles \u003d filteredList.stream()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deleteMultipleFiles(filteredFiles, toDeleteIndices);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_FILE_SUCCESS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(\"Error in multiple deletion.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if any of the directories to be deleted is the current directory or its parent."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredList"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of directories to be deleted"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if the current directory or its parent is being deleted, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there is illegal access to a directory"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isCurrentDirectoryInList(ArrayList\u003cDirectory\u003e filteredList)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Current directory is of a higher level than the directories to be deleted"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (DirectoryTraverser.getCurrentDirectoryLevel().ordinal() \u003c directoryLevel.ordinal()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if current directory or parent directory is to be deleted"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directoryLevel) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String baseModuleCode \u003d DirectoryTraverser.getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Directory module : filteredList) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (((Module) module).isSameModule(baseModuleCode)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String baseCategoryName \u003d DirectoryTraverser.getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Directory category : filteredList) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (((Category) category).isSameCategory(baseCategoryName)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String baseTaskDescription \u003d DirectoryTraverser.getBaseTask().getDescription();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Directory task : filteredList) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (((Task) task).isSameTask(baseTaskDescription)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE   :"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String baseFileName \u003d DirectoryTraverser.getBaseFile().getFileName();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Directory task : filteredList) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (((TaskFile) task).isSameFile(baseFileName)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the final phase of the \u003cb\u003eDelete Command\u003c/b\u003e to delete Directories from their lists."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (confirmationStatus) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CONFIRM:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.terminatePrompt();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cDirectory\u003e filteredList \u003d Executor.getFilteredList();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (isCurrentDirectoryInList(filteredList)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return new CommandResult(MESSAGE_ILLEGAL_DELETE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new CommandResult(\"Error in deletion.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (filteredList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                StorageManager.setIsSave();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return executeSingleDelete(filteredList.get(0));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                StorageManager.setIsSave();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return executeMultipleDelete(filteredList);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ABORT:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.terminatePrompt();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_ABORTED);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_PROMPT_FORMAT);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 328
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/promptcommand/ListNumberPrompt.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.promptcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_LIST_NUMBER_NOT_FOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListNumberPrompt extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern INDICES_FORMAT \u003d Pattern.compile(\"(?\u003cindices\u003e(?:\\\\s*\\\\d+)+\\\\s*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cDirectory\u003e filteredList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cInteger\u003e indices;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DirectoryLevel directoryLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the command to process the indices received as input from the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param indices"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices received as input from the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ListNumberPrompt(ArrayList\u003cInteger\u003e indices) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.filteredList \u003d Executor.getFilteredList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.directoryLevel \u003d Executor.getDirectoryLevel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the prompt to confirm the deletion of directories."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private CommandResult executePromptConfirmation() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (directoryLevel) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE: {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of modules"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e filteredModules \u003d filteredList.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Module.class::cast)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteModule(filteredModules, indices));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY: {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of categories"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cCategory\u003e filteredCategories \u003d filteredList.stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category.class::cast)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteCategory(filteredCategories, indices));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK: {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTask\u003e filteredTasks \u003d filteredList.stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task.class::cast)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteTask(filteredTasks, indices));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE: {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Cast to Array List of tasks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e fileteredFiles \u003d filteredList.stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(messageConfirmDeleteFile(fileteredFiles, indices));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(\"Error in displaying list.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the intermediate step in the deletion of Directories."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Command result of the execution"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.preparePromptConfirmation();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.setIndices(indices);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return executePromptConfirmation();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.terminatePrompt();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new CommandResult(MESSAGE_LIST_NUMBER_NOT_FOUND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 107
    }
  },
  {
    "path": "src/main/java/seedu/nuke/command/promptcommand/PromptType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.command.promptcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public enum PromptType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    CONFIRMATION,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    INDICES,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    NONE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 7
    }
  },
  {
    "path": "src/main/java/seedu/nuke/common/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String YES_ICON \u003d \"[Y]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String NO_ICON \u003d \"[N]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String CHECK_ICON \u003d Character.toString((char)10003);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String CROSS_ICON \u003d Character.toString((char)10060);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 6,
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/CategoryManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class CategoryManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cCategory\u003e categoryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String NO_KEYWORD \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CategoryManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Category Manager with initialised categories."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parentModule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent module of the category in the directory"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CategoryManager(Module parentModule) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryList \u003d initialiseCategories(parentModule);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Initialises the Category List with common default categories."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parentModule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent module of the category in the directory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List with the initialised categories"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cCategory\u003e initialiseCategories(Module parentModule) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e initialTaskCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialTaskCategories.add(new Category(parentModule, \"Lecture\", 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialTaskCategories.add(new Category(parentModule, \"Tutorial\", 2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialTaskCategories.add(new Category(parentModule, \"Assignment\", 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialTaskCategories.add(new Category(parentModule, \"Lab\", 3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return initialTaskCategories;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the entire Category List."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cCategory\u003e getCategoryList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the entire Category List to a new list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new Category List to be set"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setCategoryList(ArrayList\u003cCategory\u003e categoryList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryList \u003d categoryList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Finds a task with the specified category name in the Category List."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found category with the specified name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryNotFoundException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category is not found in the Category List"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Category getCategory(String categoryName) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (category.getCategoryName().equals(categoryName)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return category;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Searches the Category List for the category with the specified category name, then searches the category\u0027s"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Task List for the task with the specified description."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be found"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found task with the specified description"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryNotFoundException"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task is not found in the Task List"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task getTask(String categoryName, String taskDescription)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CategoryNotFoundException, TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getCategory(categoryName).getTasks().getTask(taskDescription);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks for duplicates of the same category name in the Category List."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category name to check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean contains(String categoryName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (category.isSameCategory(categoryName)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Add a category to the Category List."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be added"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void add(Category toAdd) throws DuplicateCategoryException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (contains(toAdd.getCategoryName())) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateCategoryException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryList.add(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes the specified category from the Category List."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be deleted"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean delete(Category toDelete) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryList.remove(toDelete);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a \u003cb\u003eCategory\u003c/b\u003e with the specified \u003ccode\u003ecategory name\u003c/code\u003e from the \u003cb\u003eCategory List\u003c/b\u003e."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category name of the \u003cb\u003eCategory\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryNotFoundException"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the specified category name is not found in the \u003cb\u003eCategory List\u003c/b\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Category"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Category delete(String categoryName) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Category toDelete \u003d getCategory(categoryName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryList.remove(toDelete);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return toDelete;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits a category in the Category List."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newCategoryName"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new category name of the category"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newPriority"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The new priority of the category"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateCategoryException"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are duplicate categories with the same category name as the new category name in the Category List"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void edit(Category toEdit, String newCategoryName, int newPriority)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws DuplicateCategoryException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!toEdit.isSameCategory(newCategoryName) \u0026\u0026 contains(newCategoryName)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateCategoryException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setCategoryName(newCategoryName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setCategoryPriority(newPriority);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the Task List of the category with the specified name."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to retrieve the Task List from"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the found category"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryNotFoundException"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the specified name is not found in the Category List"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskManager retrieveList(String categoryName) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getCategory(categoryName).getTasks();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List with name that contains the specified keyword."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered categories"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cCategory\u003e filter(String categoryKeyword) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (category.getCategoryName().toLowerCase().contains(categoryKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredCategoryList.add(category);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredCategoryList;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List that contains the specified category keyword, then for tasks in"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the Task List of the filtered categories with description that contains the specified task keyword."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The keyword to filter the tasks"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(String categoryKeyword, String taskKeyword) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : filter(categoryKeyword)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(category.getTasks().filter(taskKeyword));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List that contains the specified category keyword, then for tasks in"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the Task List of the filtered categories with description that contains the specified task keyword, then for"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * files in the File List that contains the specified file keyword."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The keyword to filter the tasks"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The keyword to filter the files"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e filter(String categoryKeyword, String taskKeyword, String fileKeyword) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : filter(categoryKeyword, taskKeyword)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredFileList.addAll(task.getFiles().filter(fileKeyword));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List with name that matches \u003cb\u003eexactly\u003c/b\u003e the specified keyword."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered categories"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cCategory\u003e filterExact(String categoryKeyword) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Returns all categories in the Category List if no keyword is provided."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryKeyword.equals(NO_KEYWORD)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return this.getCategoryList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (category.getCategoryName().toLowerCase().equals(categoryKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredCategoryList.add(category);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredCategoryList;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List  with name that that matches \u003cb\u003eexactly\u003c/b\u003e the specified category"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for tasks in the Task List of the filtered categories with description that that matches"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified task keyword."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e filterExact(String categoryKeyword, String taskKeyword) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : filterExact(categoryKeyword)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(category.getTasks().filterExact(taskKeyword));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for categories in the Category List  with name that that matches \u003cb\u003eexactly\u003c/b\u003e the specified category"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for tasks in the Task List of the filtered categories with description that that matches"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified task keyword, then for files in the File List of the filtered tasks with name"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * that matches \u003cb\u003eexactly\u003c/b\u003e the specified file keyword."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e filterExact(String categoryKeyword, String taskKeyword, String fileKeyword) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : filterExact(categoryKeyword, taskKeyword)) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredFileList.addAll(task.getFiles().filterExact(fileKeyword));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class CategoryNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateCategoryException extends DuplicateDataException {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 332
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.util.DummyModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.net.UnknownHostException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is to load all the modules that NUS offer, scraping from the nusmods,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * when users are trying to enrol into modules, the module code must"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * appear in the list of the list which load method return, or else fail."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleLoader {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * load data from a jason file that contains all information about all NUS existing modules."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param dataFileName name of the jason file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return a HashMapof String to String, which is a map that map all modules with its information"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws FileNotFoundException when cannot find the jason file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static HashMap\u003cString, String\u003e load(String dataFileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        List\u003cDummyModule\u003e moduleList \u003d JSON.parseArray(jsonStr, DummyModule.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        if (moduleList \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d convertToHashMap(moduleList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static HashMap\u003cString, String\u003e convertToHashMap(List\u003cDummyModule\u003e moduleList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (DummyModule module : moduleList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            modulesMap.put(module.getModuleCode(), module.getTitle());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        byte[] fileContent \u003d new byte[fileLength.intValue()];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            in.read(fileContent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            File folder \u003d new File(StoragePath.FILE_BASE_PATH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (!folder.exists() \u0026\u0026 !folder.isDirectory()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                folder.mkdirs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return openFile(getModuleListUrlFromNusmods());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String openFile(String filePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        int httpResult; // the status from the server response"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            URL url \u003d new URL(filePath); // create URL"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            URLConnection urlConn \u003d url.openConnection(); // try to connect and get the status code"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                urlConn.connect();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            HttpURLConnection httpConn \u003d (HttpURLConnection) urlConn;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            httpResult \u003d httpConn.getResponseCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            if (httpResult !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                System.out.print(\"cannot connect!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                int fileSize \u003d urlConn.getContentLength(); // get the length of the data"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                InputStreamReader isReader \u003d new InputStreamReader(urlConn.getInputStream(), \"UTF-8\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(isReader);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                String line; // to save the content of every line"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                line \u003d reader.readLine(); // read the first line"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                while (line !\u003d null) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    buffer.append(line); // append to the buffer"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    buffer.append(\" \"); // add new line"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    line \u003d reader.readLine(); // read the next line"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                content \u003d buffer.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                saveModuleListToDisk();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static void saveModuleListToDisk() throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        URL httpUrl \u003d new URL(getModuleListUrlFromNusmods());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        FileUtils.copyURLToFile(httpUrl, new File(StoragePath.NUS_MODULE_LIST_PATH));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String getModuleListUrlFromNusmods() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        int year \u003d cal.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        int month \u003d cal.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String urlFmt \u003d \"https://api.nusmods.com/v2/%d-%d/moduleList.json\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String url;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        if (month \u003c 6) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            url \u003d String.format(urlFmt, year - 1, year);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            url \u003d String.format(urlFmt, year, year + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 5,
      "wangqinNick": 1,
      "A11riseforme": 133,
      "iceclementi": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ModuleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A manager that manages all modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * Contains a Module List and performs operations related to modules"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ModuleManager implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ArrayList\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static HashMap\u003cString, String\u003e modulesMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String NO_KEYWORD \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Initialises the ModuleManager class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param modulesMap"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The hash map containing NUS provided modules"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void initialise(HashMap\u003cString, String\u003e modulesMap) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        if (modulesMap \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.modulesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.modulesMap \u003d modulesMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void initialise() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.initialise(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static HashMap\u003cString, String\u003e getModulesMap() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the entire Module List to a new list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new Module List to be set"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setModuleList(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * method to return all the modules."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return all modules"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Finds a module with the specified module code in the Module List."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found module with the specified module code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module is not found in the Module List"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Module getModule(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Searches the Module List for the module with the specified module code, then searches the module\u0027s"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Category List for the category with the specified name."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found category with the specified name, with its parent module with the specified module code"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module is not found"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category is not found"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Category getCategory(String moduleCode, String categoryName)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getModule(moduleCode).getCategories().getCategory(categoryName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Searches the Module List for the module with the specified module code, then searches the module\u0027s"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Category List for the category with the specified name, then searches the category\u0027s Task List for"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the task with the specified description."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be found"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found task with the specified description, with its parent category and module with the specified"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *      module code and category name respectively"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module is not found"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category is not found"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task is not found"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Task getTask(String moduleCode, String categoryName, String taskDescription)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getCategory(moduleCode, categoryName).getTasks().getTask(taskDescription);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Searches the Module List for the module with the specified module code, then searches the module\u0027s"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Category List for the category with the specified name, then searches the category\u0027s Task List for"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the task with the specified description, then searches the task\u0027s File List for the file with the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * specified name."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to be found"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to be found"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be found"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found task with the specified description, with its parent category and module with the specified"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *      module code and category name respectively"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module is not found"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category is not found"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task is not found"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskFileManager.TaskFileNotFoundException"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the file is not found"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskFile getFile(String moduleCode, String categoryName, String taskDescription, String fileName)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException, TaskFileManager.TaskFileNotFoundException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getTask(moduleCode, categoryName, taskDescription).getFiles().getFile(fileName);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks for duplicates of the same module code in the Module List."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code to check"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean contains(String moduleCode) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Add a module to the Module List."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be added"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void add(Module toAdd) throws DuplicateModuleException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        //check duplicate"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (contains(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } else if (modulesMap.size() \u003e 0 \u0026\u0026 !modulesMap.containsKey(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleTitle \u003d modulesMap.get(toAdd.getModuleCode());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            toAdd.setTitle(moduleTitle);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            moduleList.add(toAdd);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * return an orders lists of all tasks of all modules."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of String which represents the ordered list"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cString\u003e checkDeadline() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d sortAllTasks();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        for (Task task: allTasks) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            deadlines.add(String.format(\"%-30s\", task.getDescription()) + \" \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    + String.format(\"%-8s\", task.getParent().getParent().getModuleCode())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    + String.format(\"%-10s\", task.getParent().getCategoryName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                    + \"   deadline: \" + task.getDeadline().toShow());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return deadlines;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * sort all tasks of all modules in ascending order of deadlines."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return list of sorted tasks"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static ArrayList\u003cTask\u003e sortAllTasks() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d getAllTasks();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        allTasks.sort((t1, t2) -\u003e {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String t1Deadline \u003d t1.getDeadline().isPresent() ? t1.getDeadline().getDateTimeInSortFormat() : \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String t2Deadline \u003d t2.getDeadline().isPresent() ? t2.getDeadline().getDateTimeInSortFormat() : \"\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return t1Deadline.compareToIgnoreCase(t2Deadline);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        });"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Clears all tasks in list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        moduleList.clear();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Delete a module to the Module List."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be deleted"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void delete(Module toDelete) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleList.remove(toDelete);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * Deletes a \u003cb\u003eModule\u003c/b\u003e with \u003ccode\u003emodule code\u003c/code\u003e in the \u003cb\u003eModule List\u003c/b\u003e."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the \u003cb\u003eModule\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     *  If the module with the specified module code is not found in the \u003cb\u003eModule List\u003c/b\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Module"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Module delete(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (getModuleWithCode(moduleCode) !\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            Module toDelete \u003d getModuleWithCode(moduleCode);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            getAllTasks().removeIf(task -\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    task.getParent().getParent().getModuleCode().toUpperCase().equals(moduleCode));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            moduleList.removeIf(module -\u003e module.getModuleCode().equalsIgnoreCase(moduleCode));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            return toDelete;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits a module in the Module List."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be edited"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newModuleCode"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new module code of the module"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotProvidedException"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there is no module with the new module code offered by NUS"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateModuleException"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are duplicate modules with the same module code as the new module code in the Module List"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void edit(Module toEdit, String newModuleCode)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotProvidedException, DuplicateModuleException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!modulesMap.containsKey(newModuleCode)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ModuleNotProvidedException();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!toEdit.isSameModule(newModuleCode) \u0026\u0026 contains(newModuleCode)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newTitle \u003d modulesMap.get(newModuleCode);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setModuleCode(newModuleCode);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setTitle(newTitle);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Retrieve a specific Data (Category / Task / File) List. Only 1 list is retrieved */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the Category List of the module with the specified module code."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module to retrieve the Category List from"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List of the found module"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the specified module code is not found in the Module List"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static CategoryManager retrieveList(String moduleCode) throws ModuleNotFoundException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getModule(moduleCode).getCategories();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the Task List of the category with the specified name and has its parent module with the"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * specified module code."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the category to retrieve the Task List from"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to retrieve the Task List from"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the found category"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the specified module code is not found in the Module List"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the specified name is not found in the Category List"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskManager retrieveList(String moduleCode, String categoryName)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return retrieveList(moduleCode).retrieveList(categoryName);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the File List of the task with the specified description, and has its parent category with the"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * specified name and parent module with the specified module code."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module containing the category to retrieve the File List from"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category to retrieve the File List from"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to retrieve the File List from"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the found category"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleNotFoundException"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the specified module code is not found in the Module List"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the specified name is not found in the Category List"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task with the specified description is not found in the Task List"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskFileManager retrieveList(String moduleCode, String categoryName, String taskDescription)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return retrieveList(moduleCode, categoryName).retrieveList(taskDescription);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Filters for data (module / task / category) that *contains* given keywords (i.e. not exact match)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  in a case-insensitive manner. There may be multiple data that matches. */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that contains the specified keyword."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered modules"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cModule\u003e filter(String moduleKeyword) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e filteredModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().toLowerCase().contains(moduleKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredModuleList.add(module);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredModuleList;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that contains the specified module keyword,"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * then for categories in the Category List of the filtered modules with name that contains the specified"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * category keyword."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered categories"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cCategory\u003e filter(String moduleKeyword, String categoryKeyword) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : filter(moduleKeyword)) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredCategoryList.addAll(module.getCategories().filter(categoryKeyword));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredCategoryList;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that contains the specified module keyword,"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * then for categories in the Category List of the filtered modules with name that contains the specified"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * category keyword, then for tasks in the Task List of the filtered categories with description that"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * contains the specified task keyword."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The keyword to filter the tasks"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTask\u003e filter(String moduleKeyword, String categoryKeyword, String taskKeyword) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : filter(moduleKeyword, categoryKeyword)) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(category.getTasks().filter(taskKeyword));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that contains the specified module keyword,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * then for categories in the Category List of the filtered modules with name that contains the specified"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * category keyword, then for tasks in the Task List of the filtered categories with description that"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * contains the specified task keyword, then for files in the File List of the filtered tasks with name"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * that contains the specified file keyword."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTaskFile\u003e filter(String moduleKeyword, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileKeyword) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : filter(moduleKeyword, categoryKeyword, taskKeyword)) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredFileList.addAll(task.getFiles().filter(fileKeyword));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Filters for data (module / task / category) that *matches exactly* the given keywords in a case-insensitive"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  manner. Empty keywords, however, will instead collect all instances of the data."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  There may be multiple data that matches. */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that matches \u003cb\u003eexactly\u003c/b\u003e the specified keyword."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered modules"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cModule\u003e filterExact(String moduleKeyword) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Returns all modules in the Module List if no keyword is provided."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleKeyword.equals(NO_KEYWORD)) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return moduleList;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e filteredModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (module.getModuleCode().toLowerCase().equals(moduleKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredModuleList.add(module);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredModuleList;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that matches \u003cb\u003eexactly\u003c/b\u003e the specified module"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for categories in the Category List of the filtered modules with name that that matches"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified category keyword."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered categories"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cCategory\u003e filterExact(String moduleKeyword, String categoryKeyword) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e filteredCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : filterExact(moduleKeyword)) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredCategoryList.addAll(module.getCategories().filterExact(categoryKeyword));"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredCategoryList;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that matches \u003cb\u003eexactly\u003c/b\u003e the specified module"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for categories in the Category List of the filtered modules with name that that matches"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified category keyword, then for tasks in the Task List of the filtered categories"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * with description that that matches \u003cb\u003eexactly\u003c/b\u003e the specified task keyword"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTask\u003e filterExact(String moduleKeyword, String categoryKeyword, String taskKeyword) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : filterExact(moduleKeyword, categoryKeyword)) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(category.getTasks().filterExact(taskKeyword));"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for modules in the Module List with module code that matches \u003cb\u003eexactly\u003c/b\u003e the specified module"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for categories in the Category List of the filtered modules with name that that matches"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eexactly\u003c/b\u003e the specified category keyword, then for tasks in the Task List of the filtered categories"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * with description that that matches \u003cb\u003eexactly\u003c/b\u003e the specified task keyword, then for files in the File List"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * that matches \u003cb\u003eexactly\u003c/b\u003e the specified file keyword."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleKeyword"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the modules"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryKeyword"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the categories"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTaskFile\u003e filterExact(String moduleKeyword, String categoryKeyword, String taskKeyword,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileKeyword) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : filterExact(moduleKeyword, categoryKeyword, taskKeyword)) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredFileList.addAll(task.getFiles().filterExact(fileKeyword));"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns all the tasks across the entire Module List."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  An Array List of all the tasks in the entire Module List"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filter(NO_KEYWORD, NO_KEYWORD, NO_KEYWORD);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleList.iterator();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public void addTaskToModule(TaskManager taskManager, Task taskToAdd) throws TaskManager.DuplicateTaskException {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    taskManager.add(taskToAdd);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    allTasks.add(taskToAdd);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //public void removeTask(TaskManager taskManager, Task taskToDelete) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    taskManager.delete(taskToDelete);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //    allTasks.remove(taskToDelete);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * get a module object according to moduleCode."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @param moduleCode the moduleCode of the module"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * @return a module object that has the moduleCode"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static Module getModuleWithCode(String moduleCode) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module: moduleList) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                assert module.getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * return total number of tasks in all modules."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static int countAllTasks() {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filter(NO_KEYWORD, NO_KEYWORD, NO_KEYWORD).size();"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class ModuleNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateModuleException extends DuplicateDataException {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 19,
      "wangqinNick": 59,
      "A11riseforme": 43,
      "iceclementi": 480
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ScreenShot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ScreenShot {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String encodedSavedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ScreenShot(String encodedSavedList) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.encodedSavedList \u003d encodedSavedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getEncodedSavedList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedSavedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 9,
      "iceclementi": 5
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/ScreenShotManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.Decoder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.Encoder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.EmptyStackException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A screen shot manager that stores the previous states of the list and performs operations to move about the states;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * i.e. undo and redo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class ScreenShotManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static Stack\u003cScreenShot\u003e undoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static Stack\u003cScreenShot\u003e redoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // public static void setIsLastCommandRedo(boolean isLastCommandRedo) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //     ScreenShotManager.isLastCommandRedo \u003d isLastCommandRedo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    // private static boolean isLastCommandRedo \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Initialises the screen shot manager with its first screen shot of the starting list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void initialise() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String encodedSavedList \u003d new Encoder(ModuleManager.getModuleList()).encode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ScreenShot screenShot \u003d new ScreenShot(encodedSavedList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assert undoStack.isEmpty() : \"Undo stack should be empty!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assert redoStack.isEmpty() : \"Redo stack should be empty!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        undoStack.push(screenShot);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ScreenShot popPreviousScreenShot() throws EmptyStackException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // There should be at least 2 screen shots to allow undo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (undoStack.size() \u003c 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new EmptyStackException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ScreenShot currentState \u003d undoStack.pop();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        redoStack.push(currentState);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ScreenShot peekPreviousScreenShot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return undoStack.peek();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Revert to the previous changed state of the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws IOException exception is thrown when error occurred during IO operation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws CorruptedFileException exception is thrown when converting a corrupted string to moduleList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws EmptyStackException exception is thrown when user trying to undo at the initial state."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void undo() throws IOException, CorruptedFileException, EmptyStackException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ScreenShot previousState \u003d popPreviousScreenShot();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String encodedSavedList \u003d previousState.getEncodedSavedList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        InputStream stream \u003d new ByteArrayInputStream(encodedSavedList.getBytes());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(stream));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ArrayList\u003cModule\u003e moduleList \u003d new Decoder(bufferedReader).decode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.setModuleList(moduleList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Move back to Root for now to avoid \"unusual\" situations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Revert back to the next changed state which had been undone by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws IOException exception is thrown when error occurred during IO operation."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws CorruptedFileException exception is thrown when converting a corrupted string to moduleList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws EmptyStackException exception is thrown when user trying to undo at the initial state."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void redo() throws IOException, CorruptedFileException, EmptyStackException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShot redoScreenShot \u003d popRedoScreenShot();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String encodedSavedList \u003d redoScreenShot.getEncodedSavedList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        InputStream stream \u003d new ByteArrayInputStream(encodedSavedList.getBytes());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(stream));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ArrayList\u003cModule\u003e moduleList \u003d new Decoder(bufferedReader).decode();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.setModuleList(moduleList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Move back to Root for now to avoid \"unusual\" situations"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ScreenShot popRedoScreenShot() throws EmptyStackException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ScreenShot nextState \u003d redoStack.pop();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        undoStack.push(nextState);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return nextState;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Save the moduleList as a string if it was changed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static void saveScreenShot() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String encodedSavedList \u003d new Encoder(ModuleManager.getModuleList()).encode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ScreenShot screenShot \u003d new ScreenShot(encodedSavedList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (getUndoStackSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ScreenShot previousScreenShot \u003d peekPreviousScreenShot();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String previousEncodedSavedList \u003d previousScreenShot.getEncodedSavedList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!previousEncodedSavedList.equals(encodedSavedList)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            undoStack.push(screenShot);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!redoStack.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                redoStack.clear();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert redoStack.isEmpty() : \"Didn\u0027t clear the redo stack!!\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static int getUndoStackSize() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return undoStack.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 15,
      "A11riseforme": 53,
      "iceclementi": 64
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/TaskFileManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class TaskFileManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ArrayList\u003cTaskFile\u003e fileList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFileManager() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e getFileList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the entire File List to a new list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new File List to be set"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setFileList(ArrayList\u003cTaskFile\u003e fileList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileList \u003d fileList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Finds a file with the specified file name in the File List."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name of the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file with the specified file name if found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskFileNotFoundException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the file is not found in the File List"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFile getFile(String fileName) throws TaskFileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (file.getFileName().equals(fileName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return file;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new TaskFileNotFoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks for duplicates of the same file name in the File List."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name to check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean contains(String fileName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (file.isSameFile(fileName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Add a file to the File List."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file to be added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateTaskFileException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there exists a duplicate file in the File List with the same file name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void add(TaskFile toAdd) throws DuplicateTaskFileException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (contains(toAdd.getFileName())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateTaskFileException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileList.add(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes the specified file from the File List."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be deleted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void delete(TaskFile toDelete) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileList.remove(toDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits a file in the File List."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file to be edited"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newFileName"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new file name of the file"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateTaskFileException"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are duplicate files with the same file name as the new file name in the File List"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void edit(TaskFile toEdit, String newFileName) throws DuplicateTaskFileException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!toEdit.isSameFile(newFileName) \u0026\u0026 contains(newFileName)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateTaskFileException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setFileName(newFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for files in the File List with names that contains the specified keyword."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e filter(String fileKeyword) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (file.getFileName().toLowerCase().contains(fileKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredFileList.add(file);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for files in the File List with names that matches \u003cb\u003eexactly\u003c/b\u003e the specified keyword."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e filterExact(String fileKeyword) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Returns all tasks in the File List if no keyword is provided."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileKeyword.equals(noKeyword)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return this.getFileList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (file.getFileName().toLowerCase().equals(fileKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredFileList.add(file);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns a string representation of the File List."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The string representation of the File List"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder listToString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String arrayString \u003d \"[\\\"\" + file.getFileName() + \"\\\", \\\"\" + file.getFilePath() + \"\\\"]\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listToString.append(arrayString).append(\" \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return listToString.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class TaskFileNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateTaskFileException extends DuplicateDataException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 175
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/TaskManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * every category manager has a task manager to manage tasks within module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Initiates an empty Task List."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the entire Task List."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the entire Task List to a new list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new Task List to be set"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Finds a task with the specified task description in the Task List."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to be found"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The found task with the specified description"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task is not found in the Task List"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task getTask(String description) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks for duplicates of the same task description in the Task List."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task description to check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there exists a duplicate, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean contains(String taskDescription) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (task.isSameTask(taskDescription)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Add a task to the Task List."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be added"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateTaskException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there exists a duplicate task in the Task List with the same task description"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void add(Task toAdd) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (contains(toAdd.getDescription())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskList.add(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes the specified task from the Task List."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be deleted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void delete(Task toDelete) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskList.remove(toDelete);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Deletes a \u003cb\u003eTask\u003c/b\u003e with the specified \u003ccode\u003edescription\u003c/code\u003e from the \u003cb\u003eTask List\u003c/b\u003e."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description The description of the \u003cb\u003eTask\u003c/b\u003e to be deleted"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return  The deleted task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskNotFoundException  If the task with the specified description is not found in the \u003cb\u003eTask List\u003c/b\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Task"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task delete(String description) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task toDelete \u003d getTask(description);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskList.remove(toDelete);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return toDelete;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits a task in the Task List."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be edited"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newTaskDescription"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new task description of the task"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newDeadline"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The new deadline of the task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param newPriority"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The new priority of the task"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicateTaskException"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If there are duplicate tasks with the same task description as the new task description in the Task List"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void edit(Task toEdit, String newTaskDescription, DateTime newDeadline, int newPriority)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws DuplicateTaskException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!toEdit.isSameTask(newTaskDescription) \u0026\u0026 contains(newTaskDescription)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setDescription(newTaskDescription);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setDeadline(newDeadline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        toEdit.setPriority(newPriority);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Counts the total number of tasks in the Task List."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The total number of tasks in the Task List"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public int countTotalTasks() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Retrieves the File List of the category with the specified description."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task to retrieve the File List from"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The File List of the found task"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskNotFoundException"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task with the specified description is not found in the Task List"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFileManager retrieveList(String description) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getTask(description).getFiles();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for tasks in the Task List with description that contains the specified keyword."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(String taskKeyword) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (task.getDescription().toLowerCase().contains(taskKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredTaskList.add(task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for tasks in the Task List with description that contains the specified keyword., then for files in"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the File List of the filtered tasks with name that contains the specified file keyword."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * The keyword to filter the files"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e filter(String taskKeyword, String fileKeyword) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : filter(taskKeyword)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredFileList.addAll(task.getFiles().filter(fileKeyword));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredFileList;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for tasks in the Task List with description that matches \u003cb\u003eexactly\u003c/b\u003e the specified keyword."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered tasks"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTask\u003e filterExact(String taskKeyword) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Returns all tasks in the Task List if no keyword is provided."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskKeyword.equals(noKeyword)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return this.getTaskList();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (task.getDescription().toLowerCase().equals(taskKeyword.toLowerCase())) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                filteredTaskList.add(task);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filter for tasks in the Task List with description that that matches \u003cb\u003eexactly\u003c/b\u003e the specified task"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * keyword, then for files in the File List of the filtered files with name that that matches \u003cb\u003eexactly\u003c/b\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the specified file keyword."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Filtering is done in a case-insensitive manner."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskKeyword"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the tasks"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileKeyword"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The keyword to filter the files"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of filtered files"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cTaskFile\u003e filterExact(String taskKeyword, String fileKeyword) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e filteredTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : filterExact(taskKeyword)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            filteredTaskList.addAll(task.getFiles().filterExact(fileKeyword));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filteredTaskList;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * compare this task with other task."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @param other target task"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * @return true if tasks are equal"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                || (other instanceof TaskManager // instanceof handles nulls"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \u0026\u0026 this.taskList.equals(((TaskManager) other).taskList));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class TaskNotFoundException extends DataNotFoundException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicateTaskException extends DuplicateDataException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 38,
      "A11riseforme": 3,
      "iceclementi": 222
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/storage/Decoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTimeFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Decoder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_MODULE_INDICATOR \u003d \"--- MODULE ---\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_MODULE_INDICATOR \u003d \"--- END MODULE ---\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_CATEGORY_INDICATOR \u003d \"--- CATEGORY ---\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_CATEGORY_INDICATOR \u003d \"--- END CATEGORY ---\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_TASK_INDICATOR \u003d \"--- TASK ---\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_TASK_INDICATOR \u003d \"--- END TASK ---\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_FILE_INDICATOR \u003d \"--- FILE ---\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_FILE_INDICATOR \u003d \"--- END FILE ---\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DELIMITER \u003d \" -|||- \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LINE_BREAK \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Decoder(BufferedReader reader) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.reader \u003d reader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cModule\u003e decode() throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodeModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cModule\u003e decodeModuleList()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e decodedModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!reader.readLine().equals(BEGIN_MODULE_INDICATOR)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (currentLine.equals(END_MODULE_INDICATOR)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module decodedModule \u003d decodeModule(currentLine.split(Pattern.quote(DELIMITER)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            decodedModuleList.add(decodedModule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedModuleList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cCategory\u003e decodeCategoryList(Module decodedModule)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e decodedCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!reader.readLine().equals(BEGIN_CATEGORY_INDICATOR)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (currentLine.equals(END_CATEGORY_INDICATOR)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Category decodedCategory \u003d decodeCategory(decodedModule, currentLine.split(Pattern.quote(DELIMITER)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                decodedCategoryList.add(decodedCategory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new CorruptedFileException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedCategoryList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e decodeTaskList(Category decodedCategory)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e decodedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!reader.readLine().equals(BEGIN_TASK_INDICATOR)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (currentLine.equals(END_TASK_INDICATOR)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Task decodedTask \u003d decodeTask(decodedCategory, currentLine.split(Pattern.quote(DELIMITER)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                decodedTaskList.add(decodedTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (NumberFormatException | DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new CorruptedFileException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedTaskList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTaskFile\u003e decodeFileList(Task decodedTask) throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e decodedTaskFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!reader.readLine().equals(BEGIN_FILE_INDICATOR)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String currentLine;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((currentLine \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (currentLine.equals(END_FILE_INDICATOR)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile decodedFile \u003d decodeFile(decodedTask, currentLine.split(Pattern.quote(DELIMITER)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            decodedTaskFileList.add(decodedFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedTaskFileList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Module decodeModule(String[] moduleInformation)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d moduleInformation[0];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String title \u003d moduleInformation[1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String description \u003d moduleInformation[2];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module decodedModule \u003d new Module(moduleCode, title, description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        decodedModule.getCategories().setCategoryList(decodeCategoryList(decodedModule));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedModule;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Category decodeCategory(Module decodedModule, String[] categoryInformation)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d categoryInformation[0];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int categoryPriority \u003d Integer.parseInt(categoryInformation[1]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Category decodedCategory \u003d new Category(decodedModule, categoryName, categoryPriority);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        decodedCategory.getTasks().setTaskList(decodeTaskList(decodedCategory));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedCategory;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Task decodeTask(Category decodedCategory, String[] taskInformation)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws CorruptedFileException, DateTimeFormat.InvalidDateTimeException, IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d taskInformation[0];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean doneStatus;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskInformation[1].equals(\"Y\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            doneStatus \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (taskInformation[1].equals(\"N\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            doneStatus \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new CorruptedFileException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime deadline \u003d (taskInformation[2].isEmpty()) ? new DateTime() :"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DateTimeFormat.stringToDateTime(taskInformation[2]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int taskPriority \u003d Integer.parseInt(taskInformation[3]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task decodedTask \u003d new Task(decodedCategory, taskDescription, deadline, taskPriority);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        decodedTask.setDone(doneStatus);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        decodedTask.getFiles().setFileList(decodeFileList(decodedTask));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return decodedTask;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TaskFile decodeFile(Task decodedTask, String[] fileInformation) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d fileInformation[0];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String filePath \u003d fileInformation[1];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String originalFilePath \u003d fileInformation[2];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new TaskFile(decodedTask, fileName, filePath, originalFilePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 164
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/storage/Encoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Encoder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_MODULE_INDICATOR \u003d \"--- MODULE ---\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_MODULE_INDICATOR \u003d \"--- END MODULE ---\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_CATEGORY_INDICATOR \u003d \"--- CATEGORY ---\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_CATEGORY_INDICATOR \u003d \"--- END CATEGORY ---\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_TASK_INDICATOR \u003d \"--- TASK ---\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_TASK_INDICATOR \u003d \"--- END TASK ---\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String BEGIN_FILE_INDICATOR \u003d \"--- FILE ---\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String END_FILE_INDICATOR \u003d \"--- END FILE ---\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DELIMITER \u003d \" -|||- \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LINE_BREAK \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Encoder(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Encodes the Module List to be saved into a file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The encoded Module List"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder encodedList \u003d new StringBuilder(BEGIN_MODULE_INDICATOR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(getModuleInformation(module)).append(LINE_BREAK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(encodeCategoryList(module.getCategories().getCategoryList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        encodedList.append(END_MODULE_INDICATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedList.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String encodeCategoryList(ArrayList\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder encodedList \u003d new StringBuilder(BEGIN_CATEGORY_INDICATOR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categories) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(getCategoryInformation(category)).append(LINE_BREAK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(encodeTaskList(category.getTasks().getTaskList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        encodedList.append(END_CATEGORY_INDICATOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedList.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String encodeTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder encodedList \u003d new StringBuilder(BEGIN_TASK_INDICATOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(getTaskInformation(task)).append(LINE_BREAK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(encodeFileList(task.getFiles().getFileList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        encodedList.append(END_TASK_INDICATOR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedList.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String encodeFileList(ArrayList\u003cTaskFile\u003e files) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder encodedList \u003d new StringBuilder(BEGIN_FILE_INDICATOR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : files) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            encodedList.append(getFileInformation(file)).append(LINE_BREAK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        encodedList.append(END_FILE_INDICATOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return encodedList.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getModuleInformation(Module module) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.join(DELIMITER, module.getModuleCode(), module.getTitle(), module.getDescription());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getCategoryInformation(Category category) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.join(DELIMITER, category.getCategoryName(), String.valueOf(category.getCategoryPriority()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getTaskInformation(Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String doneStatus \u003d task.isDone() ? \"Y\" : \"N\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String deadline \u003d task.getDeadline().isPresent() ? task.getDeadline().toString() : \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.join(DELIMITER, task.getDescription(), doneStatus, deadline, String.valueOf(task.getPriority()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getFileInformation(TaskFile file) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.join(DELIMITER, file.getFileName(), file.getFilePath(), file.getOriginalFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 90
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.CorruptedFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.data.storage.StoragePath.TASK_FILE_DIRECTORY_PATH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static boolean isToSave \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String dataFileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks whether to save the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indication to save the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static boolean isToSave() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return isToSave;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Indicates to the storage manager that a change is made to the list and needs to be saved."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void setIsSave() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isToSave \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructor with name of the data file as argument."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param dataFileName the name of the file in which the data is stored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public StorageManager(String dataFileName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.dataFileName \u003d dataFileName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * load from json data file and return an ArrayList of Module objects."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return an ArrayList of Module objects."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public ArrayList\u003cModule\u003e load() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String jsonStr;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            jsonStr \u003d loadJsonStringFromFile(dataFileName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (ArrayList\u003cModule\u003e) JSON.parseArray(jsonStr, Module.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            System.out.println(\"Error when reading from \" + dataFileName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static String loadJsonStringFromFile(String dataFileName) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        String encoding \u003d \"utf8\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        File file \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        Long fileLength \u003d file.length();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        byte[] fileContent \u003d new byte[fileLength.intValue()];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        FileInputStream in \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        in.read(fileContent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return new String(fileContent, encoding);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.err.println(\"The OS does not support \" + encoding);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Save the current ArrayList of Module objects into json file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String jsonStr \u003d JSON.toJSONString(ModuleManager.getModuleList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            FileWriter fw \u003d new FileWriter(dataFileName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.write(jsonStr);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.flush();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            System.out.println(\"something wrong when writing to \" + dataFileName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Saves the Module List into a file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void saveList() throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            File saveFile \u003d new File(dataFileName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(saveFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileWriter.write(new Encoder(ModuleManager.getModuleList()).encode());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IOException(\"There was an error when saving the list...\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        isToSave \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Loads the Module List from the saved file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void loadList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            FileReader fileReader \u003d new FileReader(dataFileName);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e moduleList \u003d new Decoder(bufferedReader).decode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.setModuleList(moduleList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.setModuleList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (CorruptedFileException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            System.out.println(\"File is corrupted!\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.setModuleList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static String saveModuleToString(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return JSON.toJSONString(moduleList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Clean up all extra files from the files folder."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void cleanUp() throws IOException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Get all the names of the saved files"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        File[] savedFiles \u003d new File(StoragePath.TASK_FILE_DIRECTORY_PATH).listFiles();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (savedFiles \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e savedFileNames \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Stream.of(savedFiles).map(File::getName).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Get all supposed files"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e files \u003d ModuleManager.filter(noKeyword, noKeyword, noKeyword, noKeyword);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Get all files to be deleted"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        files.stream().map(TaskFile::getFilePath).forEach(savedFileNames::remove);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Delete all extra files"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasDeleteError \u003d false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String fileName : savedFileNames) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String filePath \u003d String.format(\"%s/%s\",  TASK_FILE_DIRECTORY_PATH, fileName);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            File fileToDelete \u003d new File(filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!fileToDelete.exists()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                hasDeleteError \u003d true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Path filePathToDelete \u003d fileToDelete.toPath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Files.walk(filePathToDelete)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Path::toFile)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .forEach(File::delete);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assert !Files.exists(filePathToDelete) : \"Directory still exists\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasDeleteError) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IOException(\"There was an error deleting some files.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 4,
      "A11riseforme": 61,
      "iceclementi": 122
    }
  },
  {
    "path": "src/main/java/seedu/nuke/data/storage/StoragePath.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.data.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class StoragePath {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String FILE_BASE_PATH \u003d \"data/\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String TASK_FILE_DIRECTORY_PATH \u003d FILE_BASE_PATH + \"files\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String NUS_MODULE_LIST_PATH \u003d FILE_BASE_PATH + \"moduleList.json\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String SAVE_PATH \u003d FILE_BASE_PATH + \"save.txt\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 4,
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Category extends Directory {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int categoryPriority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TaskManager tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the category."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parentModule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent module of the category"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryPriority"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Category(Module parentModule, String categoryName, int categoryPriority) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super(parentModule);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryPriority \u003d categoryPriority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.tasks \u003d new TaskManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the name of the category."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the priority of the category."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public int getCategoryPriority() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryPriority;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the Task List of the category."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Task List of the category"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskManager getTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Module getParent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (Module) this.parent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return DirectoryLevel.CATEGORY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the name of the category."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setCategoryName(String categoryName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the priority of the category."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryPriority"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setCategoryPriority(int categoryPriority) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryPriority \u003d categoryPriority;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if one category has the same category name as another."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category name to check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if they are the same, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isSameCategory(String categoryName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.categoryName.equals(categoryName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns a string containing the standard Category attributes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  A string containing the standard Category attributes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Category Name: %s\\nModule Code: %s\\nPriority: %d\\nNumber of Tasks: %d\\n\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                categoryName, getParent().getModuleCode(), categoryPriority, tasks.getTaskList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 110
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Directory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    protected Directory parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Directory without a parent."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Directory() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.parent \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Directory that has a parent."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Directory(Directory parent) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the parent of the class in the Directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent of the class in the Directory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public abstract Directory getParent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the corresponding level of the Directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The level of the Directory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public abstract DirectoryLevel getLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 10,
      "iceclementi": 28
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/DirectoryLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public enum DirectoryLevel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ROOT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    MODULE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    CATEGORY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    FILE {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        public DirectoryLevel next() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryLevel next() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return values()[ordinal() + 1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 19
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/DirectoryTraverser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DirectoryTraversalOutOfBoundsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DirectoryTraverser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static Stack\u003cDirectory\u003e directoryStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final DirectoryLevel[] DIRECTORY_LEVELS \u003d {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryLevel.ROOT, DirectoryLevel.MODULE, DirectoryLevel.CATEGORY,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryLevel.TASK, DirectoryLevel.FILE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static int currentLevel \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MINIMUM_LEVEL \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MAXIMUM_LEVEL \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ROOT_LEVEL \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MODULE_LEVEL \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CATEGORY_LEVEL \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int TASK_LEVEL \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int FILE_LEVEL \u003d 4;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the current directory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The current directory"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Directory getCurrentDirectory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return directoryStack.isEmpty() ? new Root() : directoryStack.peek();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the current subdirectory level."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The current subdirectory level"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DirectoryLevel getCurrentDirectoryLevel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return DIRECTORY_LEVELS[currentLevel];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * Set the current level to root(for test usage)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static void setCurrentLevelToRoot() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        currentLevel \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Traverse one level down in the directory."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param nextLevel"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The next level of the directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DirectoryTraversalOutOfBoundsException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the traversal will result in traversing out of the directory"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void traverseDown(Directory nextLevel) throws DirectoryTraversalOutOfBoundsException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (currentLevel \u003e\u003d MAXIMUM_LEVEL) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DirectoryTraversalOutOfBoundsException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        currentLevel++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryStack.push(nextLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Traverse one level up in the directory."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DirectoryTraversalOutOfBoundsException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the traversal will result in traversing out of the directory"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void traverseUp() throws DirectoryTraversalOutOfBoundsException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (currentLevel \u003c\u003d MINIMUM_LEVEL) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DirectoryTraversalOutOfBoundsException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        currentLevel--;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryStack.pop();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Traverse to a specified directory."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void traverseTo(Directory toTraverse) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Clear the stack"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryStack.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up the stack with parent directories"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (toTraverse instanceof Root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            currentLevel \u003d ROOT_LEVEL;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (toTraverse instanceof Module) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            currentLevel \u003d MODULE_LEVEL;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (toTraverse instanceof Category) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse.getParent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            currentLevel \u003d CATEGORY_LEVEL;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (toTraverse instanceof Task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse.getParent().getParent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse.getParent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            currentLevel \u003d TASK_LEVEL;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (toTraverse instanceof TaskFile) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse.getParent().getParent().getParent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse.getParent().getParent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse.getParent());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            directoryStack.push(toTraverse);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            currentLevel \u003d FILE_LEVEL;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Finds the next directory to traverse down into."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param nextDirectoryName"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the next directory"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The next directory if found"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DataNotFoundException"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the next directory cannot be found"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DirectoryTraversalOutOfBoundsException"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the traversal will result in traversing out of the directory"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Directory findNextDirectory(String nextDirectoryName)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws DataNotFoundException, DirectoryTraversalOutOfBoundsException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.getModule(nextDirectoryName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ((Module) getCurrentDirectory()).getCategories().getCategory(nextDirectoryName);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ((Category) getCurrentDirectory()).getTasks().getTask(nextDirectoryName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ((Task) getCurrentDirectory()).getFiles().getFile(nextDirectoryName);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DirectoryTraversalOutOfBoundsException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the full path to the current directory from the root."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The full path to the current directory"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String getFullPath() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder path \u003d new StringBuilder(\"root\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Module currentModuleDirectory \u003d (Module) getCurrentDirectory();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            path.append(String.format(\" / %s\", currentModuleDirectory.getModuleCode()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Category currentCategoryDirectory \u003d (Category) getCurrentDirectory();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            path.append(String.format(\" / %s / %s\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentCategoryDirectory.getParent().getModuleCode(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentCategoryDirectory.getCategoryName()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Task currentTaskDirectory \u003d (Task) getCurrentDirectory();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            path.append(String.format(\" / %s / %s / %s\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentTaskDirectory.getParent().getParent().getModuleCode(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentTaskDirectory.getParent().getCategoryName(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentTaskDirectory.getDescription()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFile currentFileDirectory \u003d (TaskFile) getCurrentDirectory();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            path.append(String.format(\" / %s / %s / %s / %s\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentFileDirectory.getParent().getParent().getParent().getModuleCode(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentFileDirectory.getParent().getParent().getCategoryName(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentFileDirectory.getParent().getDescription(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    currentFileDirectory.getFileName()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the base module level directory of the current directory."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The base module level directory of the current directory"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the base module level directory"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Module getBaseModule() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Module) DirectoryTraverser.getCurrentDirectory();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Module) DirectoryTraverser.getCurrentDirectory().getParent();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Module) DirectoryTraverser.getCurrentDirectory().getParent().getParent();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Module) DirectoryTraverser.getCurrentDirectory().getParent().getParent().getParent();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the base category level directory of the current directory."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The base category level directory of the current directory"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the base category level directory"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Category getBaseCategory() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Category) DirectoryTraverser.getCurrentDirectory();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Category) DirectoryTraverser.getCurrentDirectory().getParent();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Category) DirectoryTraverser.getCurrentDirectory().getParent().getParent();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the base task level directory of the current directory."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The base task level directory of the current directory"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the base task level directory"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Task getBaseTask() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Task) DirectoryTraverser.getCurrentDirectory();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (Task) DirectoryTraverser.getCurrentDirectory().getParent();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the base file level directory of the current directory."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The base file level directory of the current directory"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the base file level directory"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskFile getBaseFile() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (DirectoryTraverser.getCurrentDirectoryLevel() \u003d\u003d DirectoryLevel.FILE) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return (TaskFile) DirectoryTraverser.getCurrentDirectory();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the module level directory of the current Directory."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module level directory of the current Directory"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the module level directory"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the module code is not found in the Module List"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Module getModuleDirectory(String moduleCode)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException, ModuleManager.ModuleNotFoundException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing values first"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getBaseModule();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.getModule(moduleCode);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the category level directory of the current Directory."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category level directory of the current Directory"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the category level directory"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the module code is not found in the Module List"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the category name is not found in the Category List"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Category getCategoryDirectory(String moduleCode, String categoryName)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException, ModuleManager.ModuleNotFoundException,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CategoryManager.CategoryNotFoundException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing values first"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryName.isEmpty()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryName \u003d getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return ModuleManager.getCategory(moduleCode, categoryName);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the task level directory of the current Directory."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task level directory of the current Directory"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the task level directory"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the module code is not found in the Module List"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the category name is not found in the Category List"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task with the task description is not found in the Task List"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Task getTaskDirectory(String moduleCode, String categoryName, String taskDescription)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException, ModuleManager.ModuleNotFoundException,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CategoryManager.CategoryNotFoundException, TaskManager.TaskNotFoundException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing values first"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryName.isEmpty()) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode)) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryName \u003d getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode) || !getBaseCategory().isSameCategory(categoryName)) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskDescription \u003d getBaseTask().getDescription();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return ModuleManager.getTask(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the file level directory of the current Directory."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file level directory of the current Directory"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws IncorrectDirectoryLevelException"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the current directory is too low to obtain the file level directory"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws ModuleManager.ModuleNotFoundException"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the module with the module code is not found in the Module List"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the category with the category name is not found in the Category List"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskManager.TaskNotFoundException"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the task with the task description is not found in the Task List"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws TaskFileManager.TaskFileNotFoundException"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the file with the file name is not found in the File List"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TaskFile getFileDirectory(String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileName)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException, ModuleManager.ModuleNotFoundException,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CategoryManager.CategoryNotFoundException, TaskManager.TaskNotFoundException,"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskFileManager.TaskFileNotFoundException {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill up missing values first"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryName.isEmpty()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryName \u003d getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode) || !getBaseCategory().isSameCategory(categoryName)) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskDescription \u003d getBaseTask().getDescription();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileName.isEmpty()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode) || !getBaseCategory().isSameCategory(categoryName)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                || !getBaseTask().isSameTask(taskDescription)) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileName \u003d getBaseFile().getFileName();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return ModuleManager.getFile(moduleCode, categoryName, taskDescription, fileName);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 7,
      "A11riseforme": 1,
      "iceclementi": 393
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Module extends Directory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final Root root \u003d new Root();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private CategoryManager categories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the module."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The title of the module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the module"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Module(String moduleCode, String title, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        super(root);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categories \u003d new CategoryManager(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the module but with limited information."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Module(String moduleCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(moduleCode, \"\", \"NIL\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Return the module code of the module."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the title of the module."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The title of the module"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the description of the module."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the module"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the Category List of the module."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Category List of the module"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CategoryManager getCategories() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Root getParent() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (Root) this.parent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return DirectoryLevel.MODULE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits the module code of the module."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits the title of the module."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The title of the module"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edits the description of the module."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the module"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if one module has the same module code as another."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code to check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if they are the same, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isSameModule(String moduleCode) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.moduleCode.equalsIgnoreCase(moduleCode);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns a string containing the standard Module attributes."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  A string containing the standard Module attributes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Module Code: %s\\nModule Title: %s\\nNumber of Categories: %d\\n\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                moduleCode, title, categories.getCategoryList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "wangqinNick": 5,
      "A11riseforme": 26,
      "iceclementi": 114
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Root.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * The Root of the Directory, i.e. the starting point of the Directory Tree."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Root extends Directory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public Root() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Directory getParent() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return DirectoryLevel.ROOT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns a string containing information about the Root."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  A string containing the Root information"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Root\\nNumber of Modules: %d\\n\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 5,
      "iceclementi": 29
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.NO_ICON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.common.Constants.YES_ICON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Task extends Directory implements Tag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TaskFileManager files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param category"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent category of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task(Category category, String description, DateTime deadline, int priority) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super(category);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.files \u003d new TaskFileManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime getDeadline() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the deadline of the task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setDeadline(DateTime deadline) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the priority of the task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns an icon representing the done status of the task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The icon representing the done status of the task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (isDone ? YES_ICON : NO_ICON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the File List of the task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The File List of the task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFileManager getFiles() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Category getParent() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (Category) this.parent;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return DirectoryLevel.TASK;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if one task has the same description as another."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task description to check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if they are the same, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isSameTask(String taskDescription) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.description.equals(taskDescription);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setTag(ArrayList\u003cString\u003e tagNames) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.tags.addAll(tagNames);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void removeTag(String tag) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void removeAllTags() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return this.tags \u003d\u003d null ? \"\" : tags.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ArrayList\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns a string containing the standard Task attributes."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  A string containing the standard Task attributes"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder taskString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskString.append(String.format(\"Task Description: %s\\nModule Code: %s\\nCategory Name: %s\\n\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                description, getParent().getParent().getModuleCode(), getParent().getCategoryName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskString.append(String.format(\"Deadline: %s\\n\", deadline.isPresent() ? deadline.toShow() : \"-\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskString.append(String.format(\"Priority: %d\\n\", priority));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskString.append(String.format(\"Done Status: %s\\n\", isDone ? \"Completed\" : \"Incomplete\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskString.append(\"Tags: \");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskString.append(\"-\\n\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskString.append(String.join(\", \", tags));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            taskString.append(\"\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskString.append(String.format(\"Number of Files: %d\\n\", files.getFileList().size()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskString.toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 8,
      "wangqinNick": 12,
      "A11riseforme": 64,
      "iceclementi": 104
    }
  },
  {
    "path": "src/main/java/seedu/nuke/directory/TaskFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class TaskFile extends Directory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String originalFilePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the task file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parent task of the task file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The path to the file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param originalFilePath"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The original path to the file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskFile(Task task, String fileName, String filePath, String originalFilePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.originalFilePath \u003d originalFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the name of the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the path of the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The path of the file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the original path of the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The original path of the file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getOriginalFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return originalFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Task getParent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (Task) this.parent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryLevel getLevel() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return DirectoryLevel.FILE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the file name of the task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name of the task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setFileName(String fileName) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Edit the file path of the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file path of the task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setFilePath(String filePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if one file has the same name as another."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file name to check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if they are the same, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isSameFile(String fileName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.fileName.equals(fileName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns a string containing the standard File attributes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  A string containing the standard File attributes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"File Name: %s\\nModule Code: %s\\nCategory Name: %s\\nTask Description: %s\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Original File Path: %s\\n\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                fileName, getParent().getParent().getParent().getModuleCode(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                getParent().getParent().getCategoryName(), getParent().getDescription(), originalFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 112
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/CorruptedFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class CorruptedFileException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DataNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class DataNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DirectoryTraversalOutOfBoundsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DirectoryTraversalOutOfBoundsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/DuplicateDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public abstract class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ExceedLimitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ExceedLimitException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/IncorrectDirectoryLevelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class IncorrectDirectoryLevelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class InvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "iceclementi": 3
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/InvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class InvalidIndexException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ModuleNotProvidedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class ModuleNotProvidedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/exception/ParseFailureException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ParseFailureException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 4
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/InfiNuke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class InfiNuke extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Load modules and tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        storageManager \u003d new StorageManager(StoragePath.SAVE_PATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        storageManager.loadList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ScreenShotManager.initialise();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.setIsGui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        stage.setTitle(\"INFI-NUKE\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        stage.getIcons().add(new Image(\"images/venus_icon.png\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        stage.setMinWidth(1250);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        stage.setMinHeight(700);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        stage.setOnCloseRequest(event -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                storageManager.saveList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                System.out.println(\"Error saving file list...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        FXMLLoader sceneLoader \u003d new FXMLLoader(getClass().getResource(\"/main.fxml\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Parent mainRoot \u003d sceneLoader.load();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Scene main \u003d new Scene(mainRoot);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        stage.setScene(main);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 61
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/Launcher.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Launches the Nuke Application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  Standard arguments for running"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Application.launch(InfiNuke.class, args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 16
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/component/AutoCompleteTextField.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class AutoCompleteTextField extends TextField {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final SortedSet\u003cString\u003e entries;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ContextMenu entriesPopup;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String enteredText;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int startIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int endIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String prefix;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CHARACTER_LIMIT \u003d 100;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Auto Complete Text Field."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public AutoCompleteTextField() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.entries \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.entriesPopup \u003d new ContextMenu();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        customiseStyle();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the text of the current attribute that the user is currently typing in the console for the auto complete"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * field to process and generate suggestions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param enteredText"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The text of the attribute currently typed so far"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param startIndex"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The starting index of the attribute being typed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param endIndex"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The ending index of the attribute being typed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The prefix of the current attribute being typed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setEnteredText(String enteredText, int startIndex, int endIndex, String prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.enteredText \u003d enteredText;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.startIndex \u003d startIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.endIndex \u003d endIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the text of the current attribute (without a prefix) that the user is currently typing in the console for"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the auto complete field to process and generate suggestions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param enteredText"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The text of the attribute currently typed so far"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param startIndex"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The starting index of the attribute being typed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param endIndex"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The ending index of the attribute being typed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setEnteredText(String enteredText, int startIndex, int endIndex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setEnteredText(enteredText, startIndex, endIndex, \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the popup menu containing the suggestions for the auto complete."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The popup menu"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ContextMenu getEntriesPopup() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return entriesPopup;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Displays the suggestions to the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void displaySuggestions() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (enteredText.isBlank()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            entriesPopup.hide();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Filters suggestions in case-insensitive manner"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            List\u003cString\u003e filteredEntries \u003d entries.stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .filter(entry -\u003e entry.toLowerCase().contains(enteredText.toLowerCase()))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Show suggestions if present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!filteredEntries.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Create popup"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                populatePopup(filteredEntries, enteredText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                int displacementX \u003d startIndex * 10;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Position and show popup"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                entriesPopup.show(AutoCompleteTextField.this, Side.BOTTOM, displacementX, 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Populate the entry set with the given search results. Display is limited to 10 entries only."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param suggestions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The set of matching strings that will be considered to be shown"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void populatePopup(List\u003cString\u003e suggestions, String searchResult) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // List of suggestions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // List size - 10 or founded suggestions count"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int maxEntries \u003d 10;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int count \u003d Math.min(suggestions.size(), maxEntries);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Build list as set of labels"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            final String result \u003d suggestions.get(i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Label with graphic (text flow) to highlight found subtext in suggestions"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Label entryLabel \u003d new Label();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            entryLabel.setGraphic(buildTextFlow(result, searchResult));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            entryLabel.setPrefHeight(12);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Set selected suggestion into text and close popup"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            item.setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String inputText \u003d getText();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String before \u003d inputText.substring(0, startIndex).trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String after \u003d inputText.substring(endIndex).trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String resultWithPrefix \u003d prefix.isEmpty() ? result : (prefix + \" \" + result);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String combinedBefore \u003d before.isEmpty() ? resultWithPrefix : (before + \" \" + resultWithPrefix);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                setText(String.format(\"%s %s\", combinedBefore, after));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Position caret just after change"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                positionCaret(combinedBefore.length() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Refresh context menu"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        entriesPopup.getItems().clear();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        entriesPopup.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the existing set of autocomplete entries."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The existing autocomplete entries"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public SortedSet\u003cString\u003e getEntries() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the TextFlow corresponding to the text of the auto complete entries. Matching characters will be"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * colored green."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The text to be converted to a TextFlow"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filter"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The matching part of the text"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TextFlow buildTextFlow(String text, String filter) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int filterIndex \u003d text.toLowerCase().indexOf(filter.toLowerCase());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Text textBefore \u003d new Text(text.substring(0, filterIndex));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Text textAfter \u003d new Text(text.substring(filterIndex + filter.length()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Text textFilter \u003d new Text(text.substring(filterIndex,  filterIndex + filter.length()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        textFilter.setFill(Color.GREEN);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        textFilter.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new TextFlow(textBefore, textFilter, textAfter);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the style for the auto complete text field."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void customiseStyle() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setMinHeight(30);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setPadding(new Insets(5));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setStyle(\"-fx-font-family: Consolas; -fx-font-size: 12pt; -fx-background-color: white;\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"-fx-border-color: lightgrey; -fx-border-radius: 3\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setPromptText(\"Enter here!\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        entriesPopup.setStyle(\"-fx-font-family: Consolas; -fx-font-size: 12pt; \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"-fx-border-color: lightgrey; -fx-border-radius: 3\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Set character limit"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.textProperty().addListener((observableValue, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (this.getText().length() \u003e\u003d CHARACTER_LIMIT) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String limitedString \u003d this.getText().substring(0, CHARACTER_LIMIT);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                this.setText(limitedString);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                this.setStyle(\"-fx-font-family: Consolas; -fx-font-size: 12pt; -fx-background-color: OldLace;\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        + \"-fx-border-color: lightgrey; -fx-border-radius: 3\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                this.setStyle(\"-fx-font-family: Consolas; -fx-font-size: 12pt; -fx-background-color: white;\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        + \"-fx-border-color: lightgrey; -fx-border-radius: 3\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iceclementi": 208
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/component/DailyTaskCounter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTimeFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A utility class to count the number of tasks due for each day and generates the corresponding colored Label."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DailyTaskCounter {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private VBox box;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Label countLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Label dateLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DayOfWeek dayOfWeek;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Daily Task Counter to count the number of tasks that are due on the specified day of the week."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param box"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Vertical Box containing the Labels"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param countLabel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Label for the task count"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param dateLabel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The label for the date of the day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param dayOfWeek"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The day of the week"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DailyTaskCounter(VBox box, Label countLabel, Label dateLabel, DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.box \u003d box;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.countLabel \u003d countLabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.dateLabel \u003d dateLabel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.dayOfWeek \u003d dayOfWeek;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Daily Task Counter to count the number of tasks that are overdue."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param countLabel"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The label for the task count"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DailyTaskCounter(Label countLabel) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(null, countLabel, null, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Counts the number of undone tasks that are due on the specified date."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param dateOfDay"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The number of undone tasks due on the specified date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int countDayTask(LocalDate dateOfDay) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int taskCount \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d ModuleManager.getAllTasks();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTime deadline \u003d task.getDeadline();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // The task is undone and is due on that date"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (deadline.isPresent() \u0026\u0026 deadline.isOn(dateOfDay) \u0026\u0026 !task.isDone()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                ++taskCount;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskCount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Counts the number of undone tasks that are overdue."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The number of overdue undone tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int countOverdueTask() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int taskCount \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d ModuleManager.getAllTasks();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTime deadline \u003d task.getDeadline();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // The task is undone and is overdue"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (deadline.isPresent() \u0026\u0026 deadline.isDue() \u0026\u0026 !task.isDone()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                ++taskCount;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskCount;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the daily task count and date labels."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setDailyTaskCount() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate dateOfDay \u003d DateTimeFormat.getNextDateOfDay(dayOfWeek);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int taskCount \u003d countDayTask(dateOfDay);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Update task count"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assert taskCount \u003e\u003d 0 : \"Task Count should be greater than 0!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        countLabel.setText(String.valueOf(taskCount));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            countLabel.setTextFill(Color.MEDIUMSEAGREEN);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (taskCount \u003c\u003d 3) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            countLabel.setTextFill(Color.DODGERBLUE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            countLabel.setTextFill(Color.FIREBRICK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Update date"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        dateLabel.setText(String.valueOf(dateOfDay.getDayOfMonth()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Update Box color if it is current date"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (LocalDate.now().getDayOfWeek() \u003d\u003d dayOfWeek) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            box.setStyle(\"-fx-background-color: #cbd9f5\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Sets the overdue task count label."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void setOverdueTaskCount() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int taskCount \u003d countOverdueTask();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        countLabel.setText(String.valueOf(taskCount));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the command to show the undone tasks on the current day upon clicking on a Daily Task Box in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Daily Task Counter Panel."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param mouseEvent"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The mouse click event"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param consoleScreen"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The console screen to display the message"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void onClickDailyTask(MouseEvent mouseEvent, TextFlow consoleScreen) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String dueMondayString \u003d \"due mon\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String dueTuesdayString \u003d \"due tue\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String dueWednesdayString \u003d \"due wed\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String dueThursdayString \u003d \"due thu\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String dueFridayString \u003d \"due fri\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String dueSaturdayString \u003d \"due sat\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String dueSundayString \u003d \"due sun\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            VBox dailyTaskBox \u003d (VBox) mouseEvent.getSource();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            switch (dailyTaskBox.getId()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"mondayBox\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeAction(dueMondayString);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"tuesdayBox\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeAction(dueTuesdayString);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"wednesdayBox\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeAction(dueWednesdayString);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"thursdayBox\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeAction(dueThursdayString);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"fridayBox\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeAction(dueFridayString);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"saturdayBox\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeAction(dueSaturdayString);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case \"sundayBox\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeAction(dueSundayString);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the command to show the overdue undone tasks upon clicking on the Overdue Task Box in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Daily Task Counter Panel."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param mouseEvent"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The mouse click event"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param consoleScreen"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The console screen to display the message"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void onClickOverdueTask(MouseEvent mouseEvent, TextFlow consoleScreen) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String overdueString \u003d \"due over\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            new GuiExecutor(consoleScreen).executeAction(overdueString);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 207
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/component/DirectoryTree.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TreeView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DirectoryTree extends TreeView\u003cLabel\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TextFlow consoleScreen;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Label directoryPathLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Directory Tree class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DirectoryTree(TextFlow consoleScreen, Label directoryPathLabel) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.consoleScreen \u003d consoleScreen;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.directoryPathLabel \u003d directoryPathLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        setStyle(\"-fx-font-family: Consolas; -fx-font-size: 11pt; -fx-font-weight: bold; \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"-fx-focus-color: transparent; -fx-faint-focus-color: transparent; \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"-fx-border-color: lightgrey; -fx-border-radius: 3;\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        setShowRoot(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        populateTree();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void populateTree() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TreeItem\u003cLabel\u003e root \u003d new TreeItem\u003c\u003e(new Label(\"Root\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Get and sort Module List"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e moduleList \u003d ModuleManager.getModuleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleList.sort(Comparator.comparing(Module::getModuleCode));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Add module to tree"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TreeItem\u003cLabel\u003e moduleItem \u003d new TreeItem\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            styleTreeItem(moduleItem, root, module.getModuleCode(), Color.SANDYBROWN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleItem.getValue().setOnMouseClicked(mouseEvent -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    onClickModule(mouseEvent, module)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Get and sort Category List"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cCategory\u003e categoryList \u003d module.getCategories().getCategoryList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryList.sort(Comparator.comparing(Category::getCategoryName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Category category : categoryList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Add category to tree"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                TreeItem\u003cLabel\u003e categoryItem \u003d new TreeItem\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                styleTreeItem(categoryItem, moduleItem, category.getCategoryName(), Color.DARKSEAGREEN);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                categoryItem.getValue().setOnMouseClicked(mouseEvent -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        onClickCategory(mouseEvent, category)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Get and sort Task List"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                ArrayList\u003cTask\u003e taskList \u003d category.getTasks().getTaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                taskList.sort(Comparator.comparing(Task::getDescription));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                for (Task task : taskList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    // Add task to tree"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    TreeItem\u003cLabel\u003e taskItem \u003d new TreeItem\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    if (task.isDone()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        styleTreeItem(taskItem, categoryItem, task.getDescription(), Color.LIGHTGRAY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    } else if (!task.getDeadline().isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        // Task is done but not deleted yet"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        styleTreeItem(taskItem, categoryItem, task.getDescription(), Color.CORNFLOWERBLUE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    } else if (task.getDeadline().isDue()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        // Highlight if task is due"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        styleTreeItem(taskItem, categoryItem, task.getDescription(), Color.CRIMSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        taskItem.getValue().setStyle(\"-fx-background-color: PeachPuff\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    } else if (task.getDeadline().isBefore(LocalDate.now().plusDays(3))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        // Highlight if task is near deadline (within 2 days)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        styleTreeItem(taskItem, categoryItem, task.getDescription(), Color.CORAL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        taskItem.getValue().setStyle(\"-fx-background-color: Moccasin\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        styleTreeItem(taskItem, categoryItem, task.getDescription(), Color.CORNFLOWERBLUE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    taskItem.getValue().setOnMouseClicked(mouseEvent -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            onClickTask(mouseEvent, task)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setRoot(root);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void styleTreeItem(TreeItem\u003cLabel\u003e treeItem, TreeItem\u003cLabel\u003e parentItem, String name, Color color) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Label treeLabel \u003d new Label(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        treeLabel.setTextFill(color);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        treeLabel.setPadding(new Insets(3));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        treeLabel.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        treeItem.setValue(treeLabel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        treeItem.setExpanded(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        parentItem.getChildren().add(treeItem);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void refresh() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        populateTree();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onClickModule(MouseEvent mouseEvent, Module module) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (mouseEvent.getClickCount() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new ChangeDirectoryCommand(module));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                directoryPathLabel.setText(DirectoryTraverser.getFullPath()); // Reset path"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else if (mouseEvent.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new InfoCommand(module));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onClickCategory(MouseEvent mouseEvent, Category category) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (mouseEvent.getClickCount() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new ChangeDirectoryCommand(category));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                directoryPathLabel.setText(DirectoryTraverser.getFullPath()); // Reset path"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else if (mouseEvent.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new InfoCommand(category));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onClickTask(MouseEvent mouseEvent, Task task) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (mouseEvent.getClickCount() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new ChangeDirectoryCommand(task));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                directoryPathLabel.setText(DirectoryTraverser.getFullPath()); // Reset path"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else if (mouseEvent.getClickCount() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new InfoCommand(task));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 151
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/component/SyntaxConsole.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.CommandFormatText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class SyntaxConsole extends TextFlow {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public SyntaxConsole() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        customiseStyle();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void customiseStyle() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setStyle(\"-fx-font-family: Consolas; -fx-font-size: 12pt; -fx-background-color: aliceblue;\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"-fx-border-color: lightgrey; -fx-border-radius: 3\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setMinHeight(30);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.setPadding(new Insets(5));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getCommandWord(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String whiteSpace \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return input.trim().split(whiteSpace)[0]; // Get the first word in the input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows the command format hint to the user based on the command word entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The current input typed in the console."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showCommandFormat(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.getChildren().clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String commandWord \u003d getCommandWord(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.getChildren().add(CommandFormatText.getCommandFormat(commandWord));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 37
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/controller/MainController.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.component.AutoCompleteTextField;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.component.DailyTaskCounter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.component.DirectoryTree;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.component.SyntaxConsole;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.InputHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.TextUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.DIVIDER;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class MainController implements Initializable {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Daily Task Counter Panel components */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public HBox overdueBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label overdueTaskCount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public VBox mondayBox;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label mondayTaskCount;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label mondayDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public VBox tuesdayBox;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label tuesdayTaskCount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label tuesdayDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public VBox wednesdayBox;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label wednesdayTaskCount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label wednesdayDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public VBox thursdayBox;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label thursdayTaskCount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label thursdayDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public VBox fridayBox;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label fridayTaskCount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label fridayDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public VBox saturdayBox;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label saturdayTaskCount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label saturdayDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public VBox sundayBox;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label sundayTaskCount;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Label sundayDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Directory Tree components */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private VBox directoryBox;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DirectoryTree directoryTree;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Console components */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private VBox consoleBox;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private SyntaxConsole syntaxConsole;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private AutoCompleteTextField console;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Label directoryPathLabel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Screen components */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TextFlow consoleScreen;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ScrollPane consoleScreenScrollPane;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final Set\u003cKeyCode\u003e pressedKeys \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void initialize(URL url, ResourceBundle resourceBundle) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Auto scroll-down"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        consoleScreenScrollPane.vvalueProperty().bind(consoleScreen.heightProperty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        consoleScreen.setStyle(\"-fx-font-family: Consolas; -fx-font-size: 12pt\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryTree \u003d new DirectoryTree(consoleScreen, directoryPathLabel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        syntaxConsole \u003d new SyntaxConsole();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console \u003d new AutoCompleteTextField();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryPathLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryBox.getChildren().add(directoryTree);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryTree.prefHeightProperty().bind(directoryBox.heightProperty());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String currentUserInput \u003d console.getText();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            syntaxConsole.getChildren().clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            new GuiParser(console, syntaxConsole).smartParse(currentUserInput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.addEventFilter(KeyEvent.ANY, this::onKeyType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.setOnAction(this::onSubmitInput);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        consoleBox.getChildren().addAll(syntaxConsole, console);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        refreshScene();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        welcomeUser();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Set focus on console on start"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.requestFocus();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void welcomeUser() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Text logo \u003d TextUtil.createText(MESSAGE_LOGO, Color.MAGENTA);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Text welcomeMessage \u003d TextUtil.createText(String.format(\"%s\\n%s\\n\\n\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                MESSAGE_WELCOME_1, MESSAGE_WELCOME_2), Color.BLUE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Text divider \u003d TextUtil.createText(DIVIDER + \"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        consoleScreen.getChildren().addAll(logo, divider, welcomeMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onSubmitInput(ActionEvent actionEvent) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String userInput \u003d console.getText().trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        InputHistory.add(userInput);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new GuiExecutor(consoleScreen).executeAction(userInput);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        refreshScene();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Handles the event when the user types on the console."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param keyEvent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The key type / press event"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void onKeyType(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Add currently pressed keys"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (keyEvent.getEventType() \u003d\u003d KeyEvent.KEY_PRESSED) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            pressedKeys.add(keyEvent.getCode());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Remove released keys"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (keyEvent.getEventType() \u003d\u003d KeyEvent.KEY_RELEASED) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            pressedKeys.remove(keyEvent.getCode());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (keyEvent.isControlDown() \u0026\u0026 pressedKeys.contains(KeyCode.UP)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String previousInput \u003d InputHistory.previous();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.setText(previousInput);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (keyEvent.isControlDown() \u0026\u0026 pressedKeys.contains(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String nextInput \u003d InputHistory.next();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.setText(nextInput);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (keyEvent.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            syntaxConsole.showCommandFormat(console.getText());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void refreshScene() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        refreshTaskCounterPanel();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryTree.refresh();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        directoryPathLabel.setText(DirectoryTraverser.getFullPath());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.clear();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void refreshTaskCounterPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new DailyTaskCounter(overdueTaskCount).setOverdueTaskCount();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new DailyTaskCounter(mondayBox, mondayTaskCount, mondayDate, DayOfWeek.MONDAY).setDailyTaskCount();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new DailyTaskCounter(tuesdayBox, tuesdayTaskCount, tuesdayDate, DayOfWeek.TUESDAY).setDailyTaskCount();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new DailyTaskCounter(wednesdayBox, wednesdayTaskCount, wednesdayDate, DayOfWeek.WEDNESDAY).setDailyTaskCount();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new DailyTaskCounter(thursdayBox, thursdayTaskCount, thursdayDate, DayOfWeek.THURSDAY).setDailyTaskCount();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new DailyTaskCounter(fridayBox, fridayTaskCount, fridayDate, DayOfWeek.FRIDAY).setDailyTaskCount();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new DailyTaskCounter(saturdayBox, saturdayTaskCount, saturdayDate, DayOfWeek.SATURDAY).setDailyTaskCount();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        new DailyTaskCounter(sundayBox, sundayTaskCount, sundayDate, DayOfWeek.SUNDAY).setDailyTaskCount();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onClickDailyTask(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DailyTaskCounter.onClickDailyTask(mouseEvent, consoleScreen);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void onClickOverdueTask(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DailyTaskCounter.onClickOverdueTask(mouseEvent, consoleScreen);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 196
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/io/GuiCommandPattern.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.ALL_FLAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.DEADLINE_PREFIX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.EXACT_FLAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.FILE_PREFIX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.TASK_PREFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class GuiCommandPattern {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\s*\\\\S+)(?\u003cparameters\u003e.*)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern ADD_MODULE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern ADD_CATEGORY_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern ADD_TASK_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cdeadline\u003e(?:\\\\s+\" + DEADLINE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cprioritySecond\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern ADD_FILE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cfileInfo\u003e(?:\\\\s+\" + FILE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern DELETE_AND_LIST_MODULE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern DELETE_AND_LIST_CATEGORY_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern DELETE_AND_LIST_TASK_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern DELETE_AND_LIST_FILE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cexact\u003e(?:\\\\s+\" + EXACT_FLAG + \")?)\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003callSecond\u003e(?:\\\\s+\" + ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern LIST_TASK_SORTED_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + Parser.PRIORITY_PREFIX + \")?)\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cdeadline\u003e(?:\\\\s+\" + Parser.DEADLINE_PREFIX + \")?)\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cprioritySecond\u003e(?:\\\\s+\" + Parser.PRIORITY_PREFIX + \")?)\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern DUE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003call\u003e(?:\\\\s+\" + Parser.ALL_FLAG + \")?)\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern EDIT_MODULE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern EDIT_CATEGORY_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern EDIT_TASK_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cpriority\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cdeadline\u003e(?:\\\\s+\" + DEADLINE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cprioritySecond\u003e(?:\\\\s+\" + PRIORITY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern EDIT_FILE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cfileInfo\u003e(?:\\\\s+\" + FILE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern DONE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final Pattern OPEN_FILE_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"(?\u003cidentifier\u003e(?:\\\\s+\\\\w\\\\S*)*)\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cmoduleCode\u003e(?:\\\\s+\" + MODULE_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ccategoryName\u003e(?:\\\\s+\" + CATEGORY_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003ctaskDescription\u003e(?:\\\\s+\" + TASK_PREFIX + \"(?:\\\\s+\\\\w\\\\S*)+)?)\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"(?\u003cinvalid\u003e.*)\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 136
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/io/GuiExecutor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.CategoryTableCreator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.FileTableCreator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.ModuleTableCreator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.TextUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.TaskTableCreator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.basicdirectory.BasicCategory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.basicdirectory.BasicFile;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.basicdirectory.BasicModule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.basicdirectory.BasicTask;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.ListCreator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.DIVIDER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class GuiExecutor {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow consoleScreen;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public GuiExecutor(TextFlow consoleScreen) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        GuiExecutor.consoleScreen \u003d consoleScreen;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the corresponding action based on the command given by the user in the console."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input given by the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void executeAction(String userInput) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        displayResult(result);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Save list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (StorageManager.isToSave()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new StorageManager(StoragePath.SAVE_PATH).saveList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                showMessage(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (ExitCommand.isExit()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Stage window \u003d (Stage) consoleScreen.getScene().getWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            window.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Executes the command given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to be executed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void executeCommand(Command command) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.execute(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        displayResult(result);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (ExitCommand.isExit()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Stage window \u003d (Stage) consoleScreen.getScene().getWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            window.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows a message on the console screen to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to show"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!message.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Text feedbackToUser \u003d TextUtil.createText(String.format(\"%s\", message), Color.NAVY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            consoleScreen.getChildren().addAll(feedbackToUser);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Displays the result on the console screen to the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result from executing the command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void displayResult(CommandResult result) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (result.getFeedbackToUser() \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!result.getFeedbackToUser().isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            showMessage(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryLevel dataType \u003d result.getDirectoryLevel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (dataType) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e moduleList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Module.class::cast)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TableView\u003cBasicModule\u003e modules \u003d new ModuleTableCreator(moduleList, consoleScreen).createModuleListTable();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            consoleScreen.getChildren().add(modules);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cCategory\u003e categoryList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category.class::cast)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TableView\u003cBasicCategory\u003e categories \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    new CategoryTableCreator(categoryList, consoleScreen).createCategoryListTable();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            consoleScreen.getChildren().add(categories);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task.class::cast)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TableView\u003cBasicTask\u003e tasks \u003d new TaskTableCreator(taskList, consoleScreen).createTaskListTable();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            consoleScreen.getChildren().add(tasks);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e fileList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TableView\u003cBasicFile\u003e files \u003d new FileTableCreator(fileList, consoleScreen).createFileListTable();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            consoleScreen.getChildren().add(files);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case NONE:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (result.getHelpGuide() \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cString\u003e helpList \u003d result.getHelpGuide();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String helpGuide \u003d ListCreator.createGeneralListTable(helpList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Text helpGuideText \u003d TextUtil.createText(String.format(\"%s\", helpGuide), Color.MIDNIGHTBLUE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            consoleScreen.getChildren().add(helpGuideText);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Text divider \u003d TextUtil.createText(String.format(\"\\n%s\\n\\n\", DIVIDER), Color.DARKKHAKI);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        consoleScreen.getChildren().add(divider);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Opens up the file chooser for the user to select a file to add to the File List."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  A String array containing the path and name of the selected file"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String[] executeFileChooser() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Stage stage \u003d (Stage) consoleScreen.getScene().getWindow();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] chosenFileInformation \u003d new String[2];"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileChooser.setTitle(\"Select File To Add\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        File chosenFile \u003d fileChooser.showOpenDialog(stage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (chosenFile !\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            chosenFileInformation[0] \u003d chosenFile.getAbsolutePath();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            chosenFileInformation[1] \u003d chosenFile.getName();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return chosenFileInformation;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void clearScreen() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        consoleScreen.getChildren().clear();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 195
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/io/GuiParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.DueCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListFileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskSortedCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddCategoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddFileCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditCategoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditFileCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditModuleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteFileCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.OpenFileCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.ParseFailureException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.component.AutoCompleteTextField;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.component.SyntaxConsole;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTimeFormat;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.directory.DirectoryTraverser.getBaseCategory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.directory.DirectoryTraverser.getBaseModule;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.directory.DirectoryTraverser.getBaseTask;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.directory.DirectoryTraverser.getCurrentDirectory;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.directory.DirectoryTraverser.getCurrentDirectoryLevel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.ADD_CATEGORY_FORMAT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.ADD_FILE_FORMAT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.ADD_MODULE_FORMAT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.ADD_TASK_FORMAT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.DELETE_AND_LIST_CATEGORY_FORMAT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.DELETE_AND_LIST_FILE_FORMAT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.DELETE_AND_LIST_MODULE_FORMAT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.DELETE_AND_LIST_TASK_FORMAT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.DONE_FORMAT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.DUE_FORMAT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.EDIT_CATEGORY_FORMAT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.EDIT_FILE_FORMAT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.EDIT_MODULE_FORMAT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.EDIT_TASK_FORMAT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.LIST_TASK_SORTED_FORMAT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiCommandPattern.OPEN_FILE_FORMAT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.util.TextUtil.createText;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class GuiParser {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String NONE \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String GENERIC_ADD_COMMAND \u003d \"mkdir\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String GENERIC_DELETE_COMMAND \u003d \"rm\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String GENERIC_LIST_COMMAND \u003d \"ls\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String CATEGORY_PREFIX \u003d \"-c\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FILE_PREFIX \u003d \"-f\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String PRIORITY_PREFIX \u003d \"-p\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DEADLINE_PREFIX \u003d \"-d\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String ALL_FLAG \u003d \"-a\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String EXACT_FLAG \u003d \"-e\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int PREFIX_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String COMMAND_WORD_GROUP \u003d \"commandWord\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String PARAMETERS_GROUP \u003d \"parameters\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String IDENTIFIER_GROUP \u003d \"identifier\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String MODULE_GROUP \u003d \"moduleCode\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String CATEGORY_GROUP \u003d \"categoryName\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String TASK_GROUP \u003d \"taskDescription\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String FILE_GROUP \u003d \"fileInfo\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DEADLINE_GROUP \u003d \"deadline\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String PRIORITY_GROUP \u003d \"priority\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String PRIORITY_GROUP_SECOND \u003d \"prioritySecond\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String EXACT_GROUP \u003d \"exact\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String ALL_GROUP \u003d \"all\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String ALL_GROUP_SECOND \u003d \"allSecond\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String INVALID_GROUP \u003d \"invalid\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private AutoCompleteTextField console;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private SyntaxConsole syntaxConsole;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public GuiParser(AutoCompleteTextField console, SyntaxConsole syntaxConsole) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.console \u003d console;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.syntaxConsole \u003d syntaxConsole;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final ArrayList\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            AddModuleCommand.COMMAND_WORD, AddCategoryCommand.COMMAND_WORD, AddTaskCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            AddFileCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DeleteModuleCommand.COMMAND_WORD, DeleteCategoryCommand.COMMAND_WORD, DeleteTaskCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DeleteFileCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ListModuleCommand.COMMAND_WORD, ListCategoryCommand.COMMAND_WORD, ListTaskCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ListFileCommand.COMMAND_WORD, ListTaskSortedCommand.COMMAND_WORD, DueCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            EditModuleCommand.COMMAND_WORD, EditCategoryCommand.COMMAND_WORD, EditTaskCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            EditFileCommand.COMMAND_WORD, MarkAsDoneCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ChangeDirectoryCommand.COMMAND_WORD, OpenFileCommand.COMMAND_WORD, InfoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            UndoCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            AddTagCommand.COMMAND_WORD, GENERIC_ADD_COMMAND, GENERIC_DELETE_COMMAND, GENERIC_LIST_COMMAND"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input given by the user, checks the syntax and format, and highlights the input with various colors."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input being typed by the user"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void smartParse(String input) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            switch (Executor.getPromptType()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case INDICES:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                smartParseIndices(input);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case CONFIRMATION:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                smartParseConfirmation(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Matcher matcher \u003d smartParseCommandWord(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                smartParseParameters(matcher);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ParseFailureException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Exit"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the command word in the input string from the console."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input being typed by the user"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Matcher smartParseCommandWord(String input) throws ParseFailureException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(input, BASIC_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawCommandWord \u003d matcher.group(COMMAND_WORD_GROUP);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String commandWord \u003d rawCommandWord.trim().toLowerCase();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parameters \u003d matcher.group(PARAMETERS_GROUP);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfCommandWord \u003d matcher.start(COMMAND_WORD_GROUP);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfCommandWord \u003d matcher.end(COMMAND_WORD_GROUP);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        populateSuggestions(commandWord, COMMAND_WORDS, startIndexOfCommandWord, endIndexOfCommandWord, NONE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNotTypingAttribute(startIndexOfCommandWord, endIndexOfCommandWord)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(commandWord, rawCommandWord, parameters, endIndexOfCommandWord, COMMAND_WORDS, true);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseParameters(Matcher matcher) throws ParseFailureException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String commandWord \u003d matcher.group(COMMAND_WORD_GROUP).trim().toLowerCase();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parameters \u003d matcher.group(PARAMETERS_GROUP);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int startIndexOfParameters \u003d matcher.start(PARAMETERS_GROUP);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case GENERIC_ADD_COMMAND:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseGenericAddCommand(parameters);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case GENERIC_DELETE_COMMAND:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case GENERIC_LIST_COMMAND:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseGenericDeleteAndListCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListModuleTask.COMMAND_WORD:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(parameters, Color.BLUE));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseAddModuleCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseAddCategoryCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseAddTaskCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseAddFileCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseDeleteAndListModuleCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseDeleteAndListCategoryCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseDeleteAndListTaskCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseDeleteAndListFileCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListTaskSortedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseListTaskSortedCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseDueCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseEditModuleCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case EditCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseEditCategoryCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseEditTaskCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case EditFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseEditFileCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MarkAsDoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseMarkAsDoneCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ChangeDirectoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseChangeDirectoryCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case OpenFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseOpenFileCommand(parameters, startIndexOfParameters);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case InfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseEmptyParameterCommand(parameters);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(parameters, Color.CRIMSON));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseEmptyParameterCommand(String parameters) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(parameters, Color.CRIMSON));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseChangeDirectoryCommand(String parameters, int startIndex) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndex \u003d startIndex + parameters.length();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String nextDirectory \u003d parameters.trim();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Change to upper case for module code parameter"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (DirectoryTraverser.getCurrentDirectoryLevel() \u003d\u003d DirectoryLevel.ROOT) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            nextDirectory \u003d nextDirectory.toUpperCase();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (nextDirectory.equals(\"..\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(parameters, Color.GREEN));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cString\u003e suggestedDirectories \u003d generateSuggestedDirectories();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            populateSuggestions(nextDirectory, suggestedDirectories, startIndex, endIndex, NONE);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (isMatchingWord(nextDirectory, suggestedDirectories)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(parameters, Color.GREEN));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else if (isPartOfWord(nextDirectory, suggestedDirectories)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(parameters, Color.ORANGE));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(parameters, Color.CRIMSON));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseGenericAddCommand(String parameters) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(parameters, Color.BLUE));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseGenericDeleteAndListCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndex \u003d parameters.length() + startIndex;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedDirectories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ROOT:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestedDirectories \u003d generateSuggestedModules();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case MODULE:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestedDirectories \u003d generateSuggestedCategories(noKeyword, true);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case CATEGORY:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestedDirectories \u003d generateSuggestedTasks(noKeyword, noKeyword, true);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case TASK:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestedDirectories \u003d generateSuggestedFiles(noKeyword, noKeyword, noKeyword, true);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Ignore error; popup will have no entries"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(parameters.trim(), parameters, NONE, endIndex, suggestedDirectories, false);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        populateSuggestions(parameters.trim(), suggestedDirectories, startIndex, endIndex, NONE);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseAddModuleCommand(String parameters, int startIndex)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, ADD_MODULE_FORMAT);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfModule \u003d matcher.start(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfModule \u003d matcher.end(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedModules \u003d generateSuggestedNewModules();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        populateSuggestions(moduleCode.trim(), suggestedModules, startIndexOfModule, endIndexOfModule, NONE);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (console.getCaretPosition() \u003e endIndexOfModule) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String parametersAfter \u003d parameters.substring(matcher.end(IDENTIFIER_GROUP));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightInput(moduleCode.trim().toUpperCase(), moduleCode, parametersAfter, endIndexOfModule,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    suggestedModules, true);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void smartParseAddCategoryCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, ADD_CATEGORY_FORMAT);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(categoryName, Color.BLUE));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParsePriority(matcher, parameters, PRIORITY_GROUP);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void smartParseAddTaskCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, ADD_TASK_FORMAT);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(taskDescription, Color.BLUE));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseCategory(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasPriority \u003d smartParsePriority(matcher, parameters, PRIORITY_GROUP);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseDeadline(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, PRIORITY_GROUP_SECOND);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParsePriority(matcher, parameters, PRIORITY_GROUP_SECOND);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void smartParseAddFileCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, ADD_FILE_FORMAT);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(fileName, Color.BLUE));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseCategory(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseTask(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseFile(matcher);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseDeleteAndListModuleCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, DELETE_AND_LIST_MODULE_FORMAT);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityModule(matcher, parameters, startIndex, false);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasAllFlag \u003d smartParseFlag(matcher, ALL_GROUP, ALL_FLAG);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseFlag(matcher, EXACT_GROUP, EXACT_FLAG);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasAllFlag) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, ALL_GROUP_SECOND);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseFlag(matcher, ALL_GROUP_SECOND, ALL_FLAG);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseDeleteAndListCategoryCommand(String parameters, int startIndex)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, DELETE_AND_LIST_CATEGORY_FORMAT);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityCategory(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, false);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasAllFlag \u003d smartParseFlag(matcher, ALL_GROUP, ALL_FLAG);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseFlag(matcher, EXACT_GROUP, EXACT_FLAG);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasAllFlag) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, ALL_GROUP_SECOND);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseFlag(matcher, ALL_GROUP_SECOND, ALL_FLAG);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseDeleteAndListTaskCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, DELETE_AND_LIST_TASK_FORMAT);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityTask(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, false);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseCategory(matcher, parameters, startIndex, false);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasAllFlag \u003d smartParseFlag(matcher, ALL_GROUP, ALL_FLAG);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseFlag(matcher, EXACT_GROUP, EXACT_FLAG);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasAllFlag) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, ALL_GROUP_SECOND);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseFlag(matcher, ALL_GROUP_SECOND, ALL_FLAG);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseDeleteAndListFileCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, DELETE_AND_LIST_FILE_FORMAT);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityFile(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, false);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseCategory(matcher, parameters, startIndex, false);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseTask(matcher, parameters, startIndex, false);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasAllFlag \u003d smartParseFlag(matcher, ALL_GROUP, ALL_FLAG);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseFlag(matcher, EXACT_GROUP, EXACT_FLAG);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasAllFlag) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, ALL_GROUP_SECOND);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseFlag(matcher, ALL_GROUP_SECOND, ALL_FLAG);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseListTaskSortedCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, LIST_TASK_SORTED_FORMAT);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Check if have only either deadline or priority"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasPriority \u003d smartParseFlag(matcher, PRIORITY_GROUP, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, DEADLINE_GROUP);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, PRIORITY_GROUP_SECOND);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            checkInvalid(matcher);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasDeadline \u003d smartParseFlag(matcher, DEADLINE_GROUP, DEADLINE_PREFIX);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasDeadline) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, PRIORITY_GROUP_SECOND);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParseFlag(matcher, PRIORITY_GROUP_SECOND, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseDueCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, DUE_FORMAT);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseTimeSpecifier(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseFlag(matcher, ALL_GROUP, ALL_FLAG);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseTimeSpecifier(Matcher matcher, String parameters, int startIndex)"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawFilter \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (rawFilter.isBlank()) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String filter \u003d rawFilter.trim().toLowerCase();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (filter.equals(\"over\")) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            syntaxConsole.getChildren().add(createText(rawFilter, Color.GREEN));"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] filterData \u003d filter.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assert filterData.length \u003c\u003d 3 : \"Should have at most 2 sections.\";"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String timeSpecifier \u003d \"\";"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (filterData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            date \u003d filterData[0];"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (filterData.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            timeSpecifier \u003d filterData[0];"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            date \u003d filterData[1];"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfDate \u003d rawFilter.indexOf(timeSpecifier) + timeSpecifier.length() + startIndex;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfDate \u003d matcher.end(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawTimeSpecifier \u003d rawFilter.substring(0, startIndexOfDate - startIndex);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawDate \u003d rawFilter.substring(startIndexOfDate - startIndex);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfterIncludeDate \u003d parameters.substring(startIndexOfDate - startIndex);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfterExcludeDate \u003d parameters.substring(endIndexOfDate - startIndex);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (timeSpecifier.isEmpty()) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cString\u003e suggestedTimeSpecifiers \u003d generateSuggestedTimeSpecifier();"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            populateSuggestions(date, suggestedTimeSpecifiers, startIndexOfDate, endIndexOfDate, NONE);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (isNotTypingAttribute(startIndexOfDate, endIndexOfDate)) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Parse time specifier"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!timeSpecifier.isEmpty()) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (isValidTimeSpecifier(timeSpecifier)) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawTimeSpecifier, Color.GREEN));"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (isNotTypingAttribute(startIndex, startIndexOfDate)) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    addText(new Pair\u003c\u003e(rawTimeSpecifier, Color.CRIMSON),"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            new Pair\u003c\u003e(parametersAfterIncludeDate, Color.DARKGRAY));"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    addText(new Pair\u003c\u003e(rawTimeSpecifier, Color.DARKGRAY),"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            new Pair\u003c\u003e(parametersAfterIncludeDate, Color.DARKGRAY));"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ParseFailureException();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (timeSpecifier.equalsIgnoreCase(\"over\")) {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (!date.isEmpty()) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    addText(new Pair\u003c\u003e(rawDate, Color.CRIMSON), new Pair\u003c\u003e(parametersAfterExcludeDate, Color.DARKGRAY));"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    throw new ParseFailureException();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Parse date"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isValidDate(date)) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawDate, Color.GREEN));"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (isNotTypingAttribute(startIndexOfDate, endIndexOfDate)) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawDate, Color.CRIMSON), new Pair\u003c\u003e(parametersAfterExcludeDate, Color.DARKGRAY));"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawDate, Color.ORANGE), new Pair\u003c\u003e(parametersAfterExcludeDate, Color.DARKGRAY));"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseEditModuleCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, EDIT_MODULE_FORMAT);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkDuplicateModule(matcher, parameters);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseEditCategoryCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, EDIT_CATEGORY_FORMAT);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityCategory(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkDuplicateCategory(matcher, parameters);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParsePriority(matcher, parameters, PRIORITY_GROUP);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseEditTaskCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, EDIT_TASK_FORMAT);"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityTask(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseCategory(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkDuplicateTask(matcher, parameters);"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean hasPriority \u003d smartParsePriority(matcher, parameters, PRIORITY_GROUP);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseDeadline(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (hasPriority) {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            highlightIncorrect(matcher, PRIORITY_GROUP_SECOND);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            smartParsePriority(matcher, parameters, PRIORITY_GROUP_SECOND);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseEditFileCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, EDIT_FILE_FORMAT);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityFile(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseCategory(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseTask(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkDuplicateFile(matcher, parameters);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseMarkAsDoneCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, DONE_FORMAT);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityTask(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseCategory(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseOpenFileCommand(String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d matchPattern(parameters, OPEN_FILE_FORMAT);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseIdentityFile(matcher, parameters, startIndex);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseModule(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseCategory(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        smartParseTask(matcher, parameters, startIndex, true);"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        checkInvalid(matcher);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void checkDuplicateModule(Matcher matcher, String parameters) throws ParseFailureException {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleGroup \u003d matcher.group(MODULE_GROUP);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleGroup.isBlank()) {"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d moduleGroup.replace(MODULE_PREFIX, NONE).trim().toUpperCase();"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d moduleGroup.indexOf(MODULE_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d moduleGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawModuleName \u003d moduleGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(MODULE_GROUP));"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Highlight the prefix first"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Retrieves Module List and checks if new module code is repeated"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedModules \u003d generateSuggestedModules();"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (suggestedModules.contains(moduleCode)) {"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Repeated module code"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawModuleName, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (!ModuleManager.getModulesMap().containsKey(moduleCode)) {"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Module code is not an NUS module"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawModuleName, Color.ORANGE));"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Valid module code"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawModuleName, Color.BLUE));"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void checkDuplicateCategory(Matcher matcher, String parameters) throws ParseFailureException {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryGroup \u003d matcher.group(CATEGORY_GROUP);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryGroup.isBlank()) {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d categoryGroup.replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d categoryGroup.indexOf(CATEGORY_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d categoryGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawCategoryName \u003d categoryGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(CATEGORY_GROUP));"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Highlight the prefix first"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Retrieves Category List and checks if new category name is repeated"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cString\u003e suggestedCategories \u003d generateSuggestedCategories(moduleCode, true);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (suggestedCategories.contains(categoryName)) {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Repeated category name"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawCategoryName, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ParseFailureException();"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Valid new category name"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawCategoryName, Color.BLUE));"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Unable to get missing module code"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawCategoryName, Color.ORANGE), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void checkDuplicateTask(Matcher matcher, String parameters) throws ParseFailureException {"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskGroup \u003d matcher.group(TASK_GROUP);"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskGroup.isBlank()) {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d taskGroup.replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d taskGroup.indexOf(TASK_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d taskGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawTaskDescription \u003d taskGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(TASK_GROUP));"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Highlight the prefix first"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Retrieves Task List and checks if new task description is repeated"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cString\u003e suggestedTasks \u003d generateSuggestedTasks(moduleCode, categoryName, true);"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (suggestedTasks.contains(taskDescription)) {"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Repeated task description"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawTaskDescription, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ParseFailureException();"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Valid new task description"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawTaskDescription, Color.BLUE));"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Unable to get missing module code or category name"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawTaskDescription, Color.ORANGE), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void checkDuplicateFile(Matcher matcher, String parameters) throws ParseFailureException {"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileGroup \u003d matcher.group(FILE_GROUP);"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileGroup.isBlank()) {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d fileGroup.replace(FILE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d fileGroup.indexOf(FILE_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d fileGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawFileName \u003d fileGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(FILE_GROUP));"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Highlight the prefix first"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Retrieves File List and checks if new file name is repeated"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cString\u003e suggestedFiles \u003d generateSuggestedFiles(moduleCode, categoryName,"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    taskDescription, false);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (suggestedFiles.contains(fileName)) {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Repeated file name"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawFileName, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ParseFailureException();"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Valid new file name"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawFileName, Color.BLUE));"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Unable to get missing module code or category name or task description"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawFileName, Color.ORANGE), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseIdentityModule(Matcher matcher, String parameters, int startIndex, boolean isExact)"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawModuleCode \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (rawModuleCode.isBlank()) {"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfModule \u003d  matcher.start(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfModule \u003d  matcher.end(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d rawModuleCode.trim().toUpperCase();"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(IDENTIFIER_GROUP));"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedModules \u003d generateSuggestedModules();"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        populateSuggestions(moduleCode, suggestedModules, startIndexOfModule, endIndexOfModule, NONE);"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNotTypingAttribute(startIndexOfModule, endIndexOfModule)) {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(moduleCode, rawModuleCode, parametersAfter, endIndexOfModule, suggestedModules, isExact);"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseIdentityCategory(Matcher matcher, String parameters, int startIndex)"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawCategoryName \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (rawCategoryName.isBlank()) {"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfCategory \u003d  matcher.start(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfCategory \u003d  matcher.end(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d rawCategoryName.trim();"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(IDENTIFIER_GROUP));"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedCategories;"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            suggestedCategories \u003d generateSuggestedCategories(moduleCode, false);"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            populateSuggestions(categoryName, suggestedCategories, startIndexOfCategory, endIndexOfCategory, NONE);"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawCategoryName, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNotTypingAttribute(startIndexOfCategory, endIndexOfCategory)) {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(categoryName, rawCategoryName, parametersAfter, endIndexOfCategory, suggestedCategories, false);"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseIdentityTask(Matcher matcher, String parameters, int startIndex)"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawTaskDescription \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (rawTaskDescription.isBlank()) {"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfTask \u003d  matcher.start(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfTask \u003d  matcher.end(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d rawTaskDescription.trim();"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(IDENTIFIER_GROUP));"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedTasks;"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            suggestedTasks \u003d generateSuggestedTasks(moduleCode, categoryName, false);"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            populateSuggestions(taskDescription, suggestedTasks, startIndexOfTask, endIndexOfTask, NONE);"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawTaskDescription, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNotTypingAttribute(startIndexOfTask, endIndexOfTask)) {"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(taskDescription, rawTaskDescription, parametersAfter, endIndexOfTask, suggestedTasks, false);"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseIdentityFile(Matcher matcher, String parameters, int startIndex)"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawFileName \u003d matcher.group(IDENTIFIER_GROUP);"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (rawFileName.isBlank()) {"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfFile \u003d  matcher.start(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfFile \u003d  matcher.end(IDENTIFIER_GROUP) + startIndex;"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d rawFileName.trim();"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(IDENTIFIER_GROUP));"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedFiles;"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            suggestedFiles \u003d generateSuggestedFiles(moduleCode, categoryName, taskDescription, false);"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            populateSuggestions(fileName, suggestedFiles, startIndexOfFile, endIndexOfFile, NONE);"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawFileName, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNotTypingAttribute(startIndexOfFile, endIndexOfFile)) {"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(fileName, rawFileName, parametersAfter, endIndexOfFile, suggestedFiles, false);"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseModule(Matcher matcher, String parameters, int startIndex, boolean isExact)"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleGroup \u003d matcher.group(MODULE_GROUP);"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleGroup.isBlank()) {"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfModule \u003d  matcher.start(MODULE_GROUP) + startIndex;"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfModule \u003d  matcher.end(MODULE_GROUP) + startIndex;"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d moduleGroup.replace(MODULE_PREFIX, NONE).trim().toUpperCase();"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d moduleGroup.indexOf(MODULE_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d moduleGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedModules \u003d generateSuggestedModules();"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        populateSuggestions(moduleCode, suggestedModules, startIndexOfModule, endIndexOfModule, MODULE_PREFIX);"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNotTypingAttribute(startIndexOfModule, endIndexOfModule)) {"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawModuleCode \u003d moduleGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(MODULE_GROUP));"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(moduleCode, rawModuleCode, parametersAfter, endIndexOfModule, suggestedModules, isExact);"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseCategory(Matcher matcher, String parameters, int startIndex, boolean isExact)"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryGroup \u003d matcher.group(CATEGORY_GROUP);"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryGroup.isBlank()) {"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfCategory \u003d  matcher.start(CATEGORY_GROUP) + startIndex;"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfCategory \u003d  matcher.end(CATEGORY_GROUP) + startIndex;"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d categoryGroup.replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d categoryGroup.indexOf(CATEGORY_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d categoryGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawCategoryName \u003d categoryGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedCategories;"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            suggestedCategories \u003d generateSuggestedCategories(moduleCode, isExact);"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            populateSuggestions(categoryName, suggestedCategories, startIndexOfCategory,"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    endIndexOfCategory, CATEGORY_PREFIX);"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawCategoryName, Color.CRIMSON), new Pair\u003c\u003e(parameters, Color.DARKGRAY));"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNotTypingAttribute(startIndexOfCategory, endIndexOfCategory)) {"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d parameters.substring(matcher.end(CATEGORY_GROUP));"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(categoryName, rawCategoryName, parametersAfter, endIndexOfCategory,"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestedCategories, isExact);"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseTask(Matcher matcher, String parameters, int startIndex, boolean isExact)"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskGroup \u003d matcher.group(TASK_GROUP);"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskGroup.isBlank()) {"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfTask \u003d  matcher.start(TASK_GROUP) + startIndex;"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfTask \u003d  matcher.end(TASK_GROUP) + startIndex;"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d taskGroup.replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d taskGroup.indexOf(TASK_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d taskGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawTaskDescription \u003d taskGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(TASK_GROUP));"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestedTasks;"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            suggestedTasks \u003d generateSuggestedTasks(moduleCode, categoryName, isExact);"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            populateSuggestions(taskDescription, suggestedTasks, startIndexOfTask, endIndexOfTask, TASK_PREFIX);"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawTaskDescription, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNotTypingAttribute(startIndexOfTask, endIndexOfTask)) {"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            console.getEntriesPopup().hide();"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        highlightInput(taskDescription, rawTaskDescription, parametersAfter, endIndexOfTask,"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestedTasks, isExact);"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseFile(Matcher matcher) {"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileGroup \u003d matcher.group(FILE_GROUP);"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fileGroup.isBlank()) {"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d fileGroup.indexOf(FILE_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d fileGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawFileName \u003d fileGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(rawFileName, Color.BLUE));"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseDeadline(Matcher matcher, String parameters, int startIndex) throws ParseFailureException {"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String deadlineGroup \u003d matcher.group(DEADLINE_GROUP);"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (deadlineGroup.isBlank()) {"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int startIndexOfDeadline \u003d  matcher.start(DEADLINE_GROUP) + startIndex;"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfDeadline \u003d  matcher.end(DEADLINE_GROUP) + startIndex;"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d deadlineGroup.indexOf(DEADLINE_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d deadlineGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawDeadline \u003d deadlineGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String deadline \u003d rawDeadline.trim();"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(DEADLINE_GROUP));"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isValidDeadline(deadline)) {"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawDeadline, Color.GREEN));"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (isNotTypingAttribute(startIndexOfDeadline, endIndexOfDeadline)) {"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawDeadline, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawDeadline, Color.ORANGE), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean smartParsePriority(Matcher matcher, String parameters, String groupName)"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String priorityGroup \u003d matcher.group(groupName);"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (priorityGroup.isBlank()) {"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d priorityGroup.indexOf(PRIORITY_PREFIX) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d priorityGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rawPriority \u003d priorityGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String priority \u003d rawPriority.trim();"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parametersAfter \u003d  parameters.substring(matcher.end(groupName));"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isValidPriority(priority)) {"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawPriority, Color.GREEN));"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawPriority, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean smartParseFlag(Matcher matcher, String flagName, String flagPrefix) {"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String flagGroup \u003d matcher.group(flagName);"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (flagGroup.isBlank()) {"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int endIndexOfPrefix \u003d flagGroup.indexOf(flagPrefix) + PREFIX_LENGTH;"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefix \u003d flagGroup.substring(0, endIndexOfPrefix);"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(prefix, Color.GREEN));"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String rest \u003d flagGroup.substring(endIndexOfPrefix);"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(rest, Color.GREEN));"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isValidDeadline(String deadlineString) {"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // A valid deadline can be successfully parsed as a datetime"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDateTime(deadlineString);"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isValidPriority(String priorityString) {"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            int priority \u003d Integer.parseInt(priorityString);"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return priority \u003e\u003d 0 \u0026\u0026 priority \u003c\u003d 20;"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isValidTimeSpecifier(String timeSpecifier) {"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final ArrayList\u003cString\u003e acceptedTimeSpecifiers \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Arrays.asList(\"after\", \"a\", \"before\", \"b\", \"on\", \"over\")"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return acceptedTimeSpecifiers.contains(timeSpecifier.toLowerCase());"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isValidDate(String dateString) {"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // A valid date can be successfully parsed as a date"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDate(dateString);"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateException e) {"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Matcher matchPattern(String parameters, Pattern format)"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws ParseFailureException {"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d format.matcher(parameters);"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(parameters, Color.CRIMSON));"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new ParseFailureException();"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return matcher;"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void highlightInput(String parameter, String rawParameter, String parametersAfter, int endIndex,"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cString\u003e suggestions, boolean isExact) throws ParseFailureException {"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!isPartOfWord(parameter, suggestions)) {"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Does not match a suggestion at all"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (isExact) {"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawParameter, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ParseFailureException();"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawParameter, Color.ORANGE));"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isMatchingWord(parameter, suggestions)) {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Completely matches a suggestion"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawParameter, Color.GREEN));"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (console.getCaretPosition() \u003e endIndex) {"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Partially matches a suggestion but not typing"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (isExact) {"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawParameter, Color.CRIMSON), new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ParseFailureException();"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(rawParameter, Color.ORANGE));"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Partially matches a suggestion and still typing"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(rawParameter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (isExact) {"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(parametersAfter, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ParseFailureException();"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void highlightIncorrect(Matcher matcher, String groupName) {"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String group \u003d matcher.group(groupName);"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(group, Color.CRIMSON));"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Adds colored texts into the syntax console."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param texts"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The colored texts to be added"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final void addText(Pair\u003cString, Color\u003e... texts) {"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Pair\u003cString, Color\u003e stringColorPair : texts) {"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            syntaxConsole.getChildren().add(createText(stringColorPair.getKey(), stringColorPair.getValue()));"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e generateSuggestedDirectories() {"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Module module : ModuleManager.getModuleList()) {"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestions.add(module.getModuleCode());"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Category category : ((Module) getCurrentDirectory()).getCategories().getCategoryList()) {"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestions.add(category.getCategoryName());"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (Task task : ((Category) getCurrentDirectory()).getTasks().getTaskList()) {"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestions.add(task.getDescription());"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (TaskFile file : ((Task) getCurrentDirectory()).getFiles().getFileList()) {"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                suggestions.add(file.getFileName());"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e generateSuggestedNewModules() {"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e moduleSuggestions \u003d new ArrayList\u003c\u003e(ModuleManager.getModulesMap().keySet());"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Show only suggestions of modules that have not been added yet"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.getModuleList().stream()"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Module::getModuleCode)     // Get module code for current modules"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .forEach(moduleSuggestions::remove);   // Remove module code from set"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleSuggestions;"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e generateSuggestedModules() {"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return ModuleManager.getModuleList().stream()"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Module::getModuleCode)     // Get all the module codes in the Module List"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new)); // And convert into an Array List"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e generateSuggestedCategories(String moduleCode, boolean isExact)"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill in missing information for exact filtering"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty() \u0026\u0026 isExact) {"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isExact) {"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.filterExact(moduleCode, NONE).stream()"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category::getCategoryName) // Get all the category names in the Category List of the module"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new)); // And convert into an Array List"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.filter(moduleCode, NONE).stream()"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category::getCategoryName) // Get all the category names in the Category List of the module"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new)); // And convert into an Array List"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e generateSuggestedTasks(String moduleCode, String categoryName, boolean isExact)"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill in missing information for exact filtering"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty() \u0026\u0026 isExact) {"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryName.isEmpty() \u0026\u0026 isExact) {"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!getBaseModule().isSameModule(moduleCode)) {"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryName \u003d getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isExact) {"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.filterExact(moduleCode, categoryName, NONE).stream()"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task::getDescription) // Get all task descriptions in the Task List of the module\u0027s category"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new)); // And convert into an Array List"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.filter(moduleCode, categoryName, NONE).stream()"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task::getDescription) // Get all task descriptions in the Task List of the module\u0027s category"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new)); // And convert into an Array List"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e generateSuggestedFiles(String moduleCode, String categoryName, String taskDescription,"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            boolean isExact) throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Fill in missing information for exact filtering"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isExact) {"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                moduleCode \u003d getBaseModule().getModuleCode();"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (categoryName.isEmpty()) {"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (!getBaseModule().isSameModule(moduleCode)) {"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                categoryName \u003d getBaseCategory().getCategoryName();"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (!getBaseModule().isSameModule(moduleCode) || !getBaseCategory().isSameCategory(categoryName)) {"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    throw new IncorrectDirectoryLevelException();"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                taskDescription \u003d getBaseTask().getDescription();"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isExact) {"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.filterExact(moduleCode, categoryName, taskDescription, NONE).stream()"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile::getFileName) // Get all file names in the File List of the category\u0027s tasks"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new)); // And convert into an Array List"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return ModuleManager.filter(moduleCode, categoryName, taskDescription, NONE).stream()"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile::getFileName) // Get all file names in the File List of the category\u0027s tasks"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new)); // And convert into an Array List"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cString\u003e generateSuggestedTimeSpecifier() {"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(\"before\", \"after\", \"on\", \"over\"));"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void populateSuggestions(String keyword, ArrayList\u003cString\u003e suggestions,"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                     int startIndex, int endIndex, String prefix) {"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.getEntries().clear();"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.getEntries().addAll(suggestions);"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.setEnteredText(keyword, startIndex, endIndex, prefix);"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        console.displaySuggestions();"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isNotTypingAttribute(int startIndex, int endIndex) {"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return console.getCaretPosition() \u003c startIndex || console.getCaretPosition() \u003e endIndex;"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void checkInvalid(Matcher matcher) {"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP);"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        syntaxConsole.getChildren().add(createText(invalid, Color.CRIMSON));"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isPartOfWord(String givenWord, ArrayList\u003cString\u003e acceptedWords) {"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String word : acceptedWords) {"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (word.contains(givenWord)) {"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isMatchingWord(String givenWord, ArrayList\u003cString\u003e acceptedWords) {"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String word : acceptedWords) {"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (word.equals(givenWord)) {"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseIndices(String input) throws ParseFailureException {"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final int limit \u003d Executor.getFilteredList().size();"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final char whiteSpace \u003d \u0027 \u0027;"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); ++i) {"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (input.charAt(i) \u003d\u003d whiteSpace) {"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Find all list numbers separated by spaces"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            int indexBefore \u003d i;"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            StringBuilder listNumberToParse \u003d new StringBuilder();"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (; i \u003c input.length() \u0026\u0026 input.charAt(i) !\u003d whiteSpace; ++i) {"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                listNumberToParse.append(input.charAt(i));"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                int listNumber \u003d Integer.parseInt(listNumberToParse.toString());"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Checks if list number is within limit"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (isInvalidListNumber(listNumber, limit)) {"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // List number either not within limit, or contains non-numeric character"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String correctSegment \u003d input.substring(0, indexBefore);"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String incorrectSegment \u003d input.substring(indexBefore, i);"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String afterSegment \u003d (i \u003c input.length()) ? input.substring(i) : \"\";"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                addText(new Pair\u003c\u003e(correctSegment, Color.GREEN), new Pair\u003c\u003e(incorrectSegment, Color.CRIMSON),"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        new Pair\u003c\u003e(afterSegment, Color.DARKGRAY));"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                throw new ParseFailureException();"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        addText(new Pair\u003c\u003e(input, Color.GREEN));"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isInvalidListNumber(int listNumber, int limit) {"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return listNumber \u003c\u003d 0 || listNumber \u003e limit;"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void smartParseConfirmation(String input) {"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final ArrayList\u003cString\u003e acceptedConfirmations \u003d new ArrayList\u003c\u003e(Arrays.asList(\"yes\", \"y\", \"no\", \"n\"));"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (acceptedConfirmations.contains(input.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(input, Color.GREEN));"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            addText(new Pair\u003c\u003e(input, Color.CRIMSON));"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 1443
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/io/InputHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * Stores the history of the user\u0027s input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class InputHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static int currentIndex \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String NONE \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Adds the recently entered input into the input history."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The recently entered input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static void add(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        history.add(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        currentIndex \u003d getLastIndex(); // Set to last index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the previous input in the input history."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The previous input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String previous() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (currentIndex \u003c 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (currentIndex \u003d\u003d 0) ? history.get(currentIndex) : history.get(currentIndex--);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the next input in the input history."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The next input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String next() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (currentIndex \u003c 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return NONE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (currentIndex \u003d\u003d getLastIndex()) ? NONE : history.get(++currentIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static int getLastIndex() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return history.size() - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 57
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/CommandFormatText.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddFileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditCategoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditFileCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditModuleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteFileCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskSortedCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListCategoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListFileCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleTask;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ClearCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.OpenFileCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.ALL_FLAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.CATEGORY_PREFIX;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.DEADLINE_PREFIX;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.EXACT_FLAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.FILE_PREFIX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.MODULE_PREFIX;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.PRIORITY_PREFIX;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.io.GuiParser.TASK_PREFIX;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.gui.util.TextUtil.createText;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class CommandFormatText {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow commandFormat \u003d new TextFlow();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static void initialise() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.setStyle(\"-fx-font-size: 12pt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String GENERIC_ADD_COMMAND \u003d \"mkdir\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String GENERIC_DELETE_COMMAND \u003d \"rm\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String GENERIC_LIST_COMMAND \u003d \"ls\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the command format hint to show the user as a TextFlow. The text is highlighted with various colors"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * to allow user to recognise and differentiate compulsory and optional attributes."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param commandWord"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command word corresponding to the format to be shown"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command format hint"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static TextFlow getCommandFormat(String commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialise();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case GENERIC_ADD_COMMAND:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getGenericAddFormat();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case GENERIC_DELETE_COMMAND:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return  getGenericDeleteFormat();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case GENERIC_LIST_COMMAND:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getGenericListFormat();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getAddModuleFormat();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getAddCategoryFormat();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getAddTaskFormat();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getAddFileFormat();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getAddTagFormat();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDeleteModuleFormat();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDeleteCategoryFormat();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDeleteTaskFormat();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case DeleteFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDeleteFileFormat();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getListModuleFormat();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getListCategoryFormat();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getListTaskFormat();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getListFileFormat();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ListTaskSortedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getListTaskSortedFormat();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getEditModuleFormat();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case EditCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getEditCategoryFormat();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getEditTaskFormat();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case EditFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getEditFileFormat();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MarkAsDoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDoneFormat();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ChangeDirectoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getChangeDirectoryFormat();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case OpenFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getOpenFileFormat();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case InfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getInfoFormat();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getUndoFormat();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getRedoFormat();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getHelpFormat();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getClearFormat();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getExitFormat();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new TextFlow();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String invalidString \u003d \"Invalid Command Word!\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            commandFormat.getChildren().add(createText(invalidString, Color.CRIMSON));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return commandFormat;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getGenericAddFormat() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(GENERIC_ADD_COMMAND, Color.GREEN),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cnew directory name\u003e \", Color.BLUE)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getGenericListFormat() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(GENERIC_LIST_COMMAND, Color.GREEN),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" [ \u003cchild directory name\u003e ] \", Color.DARKGRAY)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getGenericDeleteFormat() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(GENERIC_DELETE_COMMAND, Color.GREEN),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cchild directory name\u003e \", Color.BLUE)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getAddModuleFormat() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(AddModuleCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e\", Color.BLUE)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getAddCategoryFormat() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(AddCategoryCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s\", \"[\", PRIORITY_PREFIX, \"\u003cpriority\u003e\", \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getAddTaskFormat() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(AddTaskCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s %s %s\", \"[\", DEADLINE_PREFIX, \"\u003cdeadline\u003e\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        PRIORITY_PREFIX, \"\u003cpriority\u003e\", \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getAddFileFormat() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(AddFileCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" [ \u003cfile name\u003e ] \", Color.DARKGRAY),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(TASK_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s\", \"[\", FILE_PREFIX, \"\u003cfile path\u003e\", \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getAddTagFormat() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(AddTagCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctag name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(TASK_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e \", Color.BLUE)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getDeleteModuleFormat() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(DeleteModuleCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s\", \"[\", EXACT_FLAG, ALL_FLAG, \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getDeleteCategoryFormat() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(DeleteCategoryCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s\", \"[\", EXACT_FLAG, ALL_FLAG, \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getDeleteTaskFormat() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(DeleteTaskCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s\", \"[\", EXACT_FLAG, ALL_FLAG, \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getDeleteFileFormat() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(DeleteFileCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cfile name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(TASK_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s\", \"[\", EXACT_FLAG, ALL_FLAG, \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getListModuleFormat() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(ListModuleCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s %s\", \"[\", \"\u003cmodule keyword\u003e\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        EXACT_FLAG, ALL_FLAG, \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getListCategoryFormat() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(ListCategoryCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s %s %s %s\", \"[\", \"\u003ccategory keyword\u003e\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        MODULE_PREFIX, \"\u003cmodule keyword\u003e\", EXACT_FLAG, ALL_FLAG, \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getListTaskFormat() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(ListTaskCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s %s %s %s %s %s\", \"[\", \"\u003ctask keyword\u003e\","
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        MODULE_PREFIX, \"\u003cmodule keyword\u003e\","
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        CATEGORY_PREFIX, \"\u003ccategory keyword\u003e\", EXACT_FLAG, ALL_FLAG, \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getListFileFormat() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(ListFileCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s %s %s %s %s %s %s %s\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \"[\", \"\u003cfile keyword\u003e\", MODULE_PREFIX, \"\u003cmodule keyword\u003e\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        CATEGORY_PREFIX, \"\u003ccategory keyword\u003e\", TASK_PREFIX, \"\u003ctask keyword\u003e\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        EXACT_FLAG, ALL_FLAG, \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getListTaskSortedFormat() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(ListTaskSortedCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s %s %s\","
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \"[ \u003cmodule code\u003e ]\", \"[\", DEADLINE_PREFIX, PRIORITY_PREFIX,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \"(choose 1; default -d)\", \"]\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getEditModuleFormat() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(EditModuleCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cnew module code\u003e \", Color.BLUE)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getEditCategoryFormat() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(EditCategoryCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s %s %s\", \"{\", CATEGORY_PREFIX, \"\u003cnew category name\u003e\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        PRIORITY_PREFIX, \"\u003cnew priority\u003e\", \"}\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getEditTaskFormat() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(EditTaskCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(String.format(\" %s %s %s %s %s %s %s %s\", \"{\","
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        TASK_PREFIX, \"\u003cnew task description\u003e\", DEADLINE_PREFIX, \"\u003cnew deadline\u003e\","
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        PRIORITY_PREFIX, \"\u003cnew priority\u003e\", \"}\"), Color.DARKGRAY)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.setStyle(\"-fx-font-size: 9.8pt\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getEditFileFormat() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(EditFileCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cfile name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(TASK_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(FILE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cnew file name\u003e\", Color.BLUE)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getDoneFormat() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MarkAsDoneCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getChangeDirectoryFormat() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(ChangeDirectoryCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cnext directory name\u003e\", Color.BLUE),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" to traverse down; \", Color.DARKGRAY),"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(ChangeDirectoryCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\"..\", Color.BLUE),"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" to traverse up\", Color.DARKGRAY)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getOpenFileFormat() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().addAll("
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(OpenFileCommand.COMMAND_WORD, Color.GREEN),"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" [ \u003cfile name\u003e ] \", Color.DARKGRAY),"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(MODULE_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003cmodule code\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(CATEGORY_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ccategory name\u003e \", Color.BLUE),"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(TASK_PREFIX, Color.GREEN),"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                createText(\" \u003ctask description\u003e\", Color.BLUE)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getInfoFormat() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().add(createText(InfoCommand.COMMAND_WORD, Color.GREEN));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getUndoFormat() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().add(createText(UndoCommand.COMMAND_WORD, Color.GREEN));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getRedoFormat() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().add(createText(RedoCommand.COMMAND_WORD, Color.GREEN));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getHelpFormat() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().add(createText(HelpCommand.COMMAND_WORD, Color.GREEN));"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getClearFormat() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().add(createText(ClearCommand.COMMAND_WORD, Color.GREEN));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static TextFlow getExitFormat() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        commandFormat.getChildren().add(createText(ExitCommand.COMMAND_WORD, Color.GREEN));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return commandFormat;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 453
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/TextUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class TextUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts a string into a Text."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The corresponding Text"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Text createText(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new Text(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts a string into a colored Text."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input string to be colored"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param color"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The color of the Text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The corresponding colored Text"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static Text createText(String input, Color color) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Text text \u003d new Text(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        text.setFill(color);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 35
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/tablecreator/CategoryTableCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util.tablecreator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.basicdirectory.BasicCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class CategoryTableCreator {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int TABLE_WIDTH \u003d 880;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ID_WIDTH \u003d 50;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MODULE_CODE_WIDTH \u003d 150;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CATEGORY_NAME_WIDTH \u003d 630;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int PRIORITY_WIDTH \u003d 50;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ROW_HEIGHT \u003d 30;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int HEADER_HEIGHT \u003d 35;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cCategory\u003e categoryList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TextFlow consoleScreen;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Category Table Creator class to create a category table."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of categories to show"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param consoleScreen"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The console screen to show the list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public CategoryTableCreator(ArrayList\u003cCategory\u003e categoryList, TextFlow consoleScreen) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryList \u003d categoryList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.consoleScreen \u003d consoleScreen;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a Table View from the categories in the category list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Table View of the categories in the category list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TableView\u003cBasicCategory\u003e createCategoryListTable() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableView\u003cBasicCategory\u003e categoryTable \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialiseCategoryTable(categoryTable);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryTable;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void initialiseCategoryTable(TableView\u003cBasicCategory\u003e categoryTable) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Row properties"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryTable.setRowFactory(basicCategoryTableView -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TableRow\u003cBasicCategory\u003e row \u003d new TableRow\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setPrefHeight(ROW_HEIGHT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setOnMouseClicked(event -\u003e onRowClick(event, row));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return row;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Set height"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int height \u003d categoryList.size() * ROW_HEIGHT + HEADER_HEIGHT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryTable.setPrefHeight(height);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Populate columns and data"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryTable.getColumns()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .addAll(getIdColumn(), getModuleCodeColumn(), getCategoryNameColumn(), getPriorityColumn());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryTable.getItems().addAll(getBasicCategoryList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Width properties"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryTable.setMinWidth(TABLE_WIDTH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryTable.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryTable.setPlaceholder(new Label(\"No modules to show\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicCategory, Integer\u003e getIdColumn() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicCategory, Integer\u003e idColumn \u003d new TableColumn\u003c\u003e(\"NO\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"id\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setPrefWidth(ID_WIDTH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return idColumn;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicCategory, String\u003e getModuleCodeColumn() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicCategory, String\u003e moduleCodeColumn \u003d new TableColumn\u003c\u003e(\"Module\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"moduleCode\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setPrefWidth(MODULE_CODE_WIDTH);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleCodeColumn;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicCategory, String\u003e getCategoryNameColumn() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicCategory, String\u003e categoryNameColumn \u003d new TableColumn\u003c\u003e(\"Category\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"categoryName\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setPrefWidth(CATEGORY_NAME_WIDTH);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryNameColumn;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicCategory, Integer\u003e getPriorityColumn() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicCategory, Integer\u003e priorityColumn \u003d new TableColumn\u003c\u003e(\"Pty\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        priorityColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"priority\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        priorityColumn.setPrefWidth(PRIORITY_WIDTH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        priorityColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return priorityColumn;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ObservableList\u003cBasicCategory\u003e getBasicCategoryList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cBasicCategory\u003e basicCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            basicCategoryList.add(new BasicCategory(id++, category.getParent().getModuleCode(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    category.getCategoryName(), category.getCategoryPriority()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return FXCollections.observableArrayList(basicCategoryList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onRowClick(MouseEvent mouseEvent, TableRow\u003cBasicCategory\u003e row) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY \u0026\u0026 !row.isEmpty()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            BasicCategory rowData \u003d row.getItem();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Category category \u003d ModuleManager.getCategory(rowData.getModuleCode(), rowData.getCategoryName());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new InfoCommand(category));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (DataNotFoundException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Do nothing"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 147
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/tablecreator/FileTableCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util.tablecreator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.basicdirectory.BasicFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class FileTableCreator {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int TABLE_WIDTH \u003d 880;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ID_WIDTH \u003d 50;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MODULE_CODE_WIDTH \u003d 130;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CATEGORY_NAME_WIDTH \u003d 180;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int TASK_DESCRIPTION_WIDTH \u003d 240;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int FILE_NAME_WIDTH \u003d 280;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ROW_HEIGHT \u003d 30;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int HEADER_HEIGHT \u003d 35;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTaskFile\u003e fileList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TextFlow consoleScreen;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the TaskFile Table Creator class to create a file table."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of files to show"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param consoleScreen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The console screen to show the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public FileTableCreator(ArrayList\u003cTaskFile\u003e fileList, TextFlow consoleScreen) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileList \u003d fileList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.consoleScreen \u003d consoleScreen;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a Table View from the files in the file list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Table View of the files in the file list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TableView\u003cBasicFile\u003e createFileListTable() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableView\u003cBasicFile\u003e fileTable \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialiseTaskFileTable(fileTable);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileTable;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void initialiseTaskFileTable(TableView\u003cBasicFile\u003e fileTable) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Row properties"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileTable.setRowFactory(basicTaskFileTableView -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TableRow\u003cBasicFile\u003e row \u003d new TableRow\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setPrefHeight(ROW_HEIGHT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setOnMouseClicked(event -\u003e onRowClick(event, row));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return row;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Set height"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int height \u003d fileList.size() * ROW_HEIGHT + HEADER_HEIGHT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileTable.setPrefHeight(height);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Populate columns and data"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileTable.getColumns()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .addAll(getIdColumn(), getModuleCodeColumn(), getCategoryNameColumn(), getTaskDescriptionColumn(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        getFileNameColumn());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileTable.getItems().addAll(getBasicFileList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Width properties"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileTable.setMinWidth(TABLE_WIDTH);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileTable.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileTable.setPlaceholder(new Label(\"No modules to show\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicFile, Integer\u003e getIdColumn() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicFile, Integer\u003e idColumn \u003d new TableColumn\u003c\u003e(\"NO\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"id\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setPrefWidth(ID_WIDTH);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return idColumn;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicFile, String\u003e getModuleCodeColumn() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicFile, String\u003e moduleCodeColumn \u003d new TableColumn\u003c\u003e(\"Module\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"moduleCode\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setPrefWidth(MODULE_CODE_WIDTH);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleCodeColumn;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicFile, String\u003e getCategoryNameColumn() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicFile, String\u003e categoryNameColumn \u003d new TableColumn\u003c\u003e(\"Category\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"categoryName\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setPrefWidth(CATEGORY_NAME_WIDTH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryNameColumn;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicFile, String\u003e getTaskDescriptionColumn() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicFile, String\u003e descriptionColumn \u003d new TableColumn\u003c\u003e(\"Task\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        descriptionColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"taskDescription\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        descriptionColumn.setPrefWidth(TASK_DESCRIPTION_WIDTH);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        descriptionColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return descriptionColumn;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicFile, String\u003e getFileNameColumn() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicFile, String\u003e deadlineColumn \u003d new TableColumn\u003c\u003e(\"File\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        deadlineColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"fileName\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        deadlineColumn.setPrefWidth(FILE_NAME_WIDTH);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        deadlineColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return deadlineColumn;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ObservableList\u003cBasicFile\u003e getBasicFileList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cBasicFile\u003e basicTaskFileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            basicTaskFileList.add(new BasicFile(id++, file.getParent().getParent().getParent().getModuleCode(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    file.getParent().getParent().getCategoryName(), file.getParent().getDescription(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    file.getFileName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return FXCollections.observableArrayList(basicTaskFileList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onRowClick(MouseEvent mouseEvent, TableRow\u003cBasicFile\u003e row) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY \u0026\u0026 !row.isEmpty()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            BasicFile rowData \u003d row.getItem();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                TaskFile file \u003d ModuleManager.getFile(rowData.getModuleCode(), rowData.getCategoryName(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        rowData.getTaskDescription(), rowData.getFileName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new InfoCommand(file));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (DataNotFoundException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Do nothing"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 160
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/tablecreator/ModuleTableCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util.tablecreator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.basicdirectory.BasicModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ModuleTableCreator {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int TABLE_WIDTH \u003d 880;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ID_WIDTH \u003d 50;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MODULE_CODE_WIDTH \u003d 150;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int TITLE_WIDTH \u003d 680;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ROW_HEIGHT \u003d 30;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int HEADER_HEIGHT \u003d 35;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TextFlow consoleScreen;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Module Table Creator class to create a module table."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of modules to show"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param consoleScreen"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The console screen to show the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public ModuleTableCreator(ArrayList\u003cModule\u003e moduleList, TextFlow consoleScreen) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.consoleScreen \u003d consoleScreen;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a Table View from the modules in the module list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Table View of the modules in the module list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TableView\u003cBasicModule\u003e createModuleListTable() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableView\u003cBasicModule\u003e moduleTable \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialiseModuleTable(moduleTable);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleTable;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void initialiseModuleTable(TableView\u003cBasicModule\u003e moduleTable) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Row properties"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleTable.setRowFactory(basicModuleTableView -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TableRow\u003cBasicModule\u003e row \u003d new TableRow\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setPrefHeight(ROW_HEIGHT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setOnMouseClicked(event -\u003e onRowClick(event, row));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return row;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Set height"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int height \u003d moduleList.size() * ROW_HEIGHT + HEADER_HEIGHT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleTable.setPrefHeight(height);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Populate columns and data"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleTable.getColumns().addAll(getIdColumn(), getModuleCodeColumn(), getTitleColumn());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleTable.getItems().addAll(getBasicModuleList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Width properties"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleTable.setMinWidth(TABLE_WIDTH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleTable.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleTable.setPlaceholder(new Label(\"No modules to show\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicModule, Integer\u003e getIdColumn() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicModule, Integer\u003e idColumn \u003d new TableColumn\u003c\u003e(\"NO\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"id\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setPrefWidth(ID_WIDTH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return idColumn;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicModule, String\u003e getModuleCodeColumn() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicModule, String\u003e moduleCodeColumn \u003d new TableColumn\u003c\u003e(\"Module Code\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"moduleCode\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setPrefWidth(MODULE_CODE_WIDTH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleCodeColumn;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicModule, String\u003e getTitleColumn() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicModule, String\u003e titleColumn \u003d new TableColumn\u003c\u003e(\"Module Title\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        titleColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"title\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        titleColumn.setMinWidth(TITLE_WIDTH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        titleColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return titleColumn;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ObservableList\u003cBasicModule\u003e getBasicModuleList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cBasicModule\u003e basicModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            basicModuleList.add(new BasicModule(id++, module.getModuleCode(), module.getTitle()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return FXCollections.observableArrayList(basicModuleList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onRowClick(MouseEvent mouseEvent, TableRow\u003cBasicModule\u003e row) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY \u0026\u0026 !row.isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            BasicModule rowData \u003d row.getItem();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Module module \u003d ModuleManager.getModule(rowData.getModuleCode());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new InfoCommand(module));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Do nothing"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 134
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/tablecreator/TaskTableCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util.tablecreator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableRow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseButton;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.io.GuiExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.gui.util.tablecreator.basicdirectory.BasicTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.common.Constants.CHECK_ICON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.common.Constants.CROSS_ICON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class TaskTableCreator {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int TABLE_WIDTH \u003d 880;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ID_WIDTH \u003d 40;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int MODULE_CODE_WIDTH \u003d 100;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CATEGORY_NAME_WIDTH \u003d 150;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int TASK_DESCRIPTION_WIDTH \u003d 230;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int DEADLINE_WIDTH \u003d 270;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int PRIORITY_WIDTH \u003d 40;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int DONE_STATUS_WIDTH \u003d 50;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int ROW_HEIGHT \u003d 30;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int HEADER_HEIGHT \u003d 35;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TextFlow consoleScreen;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the Task Table Creator class to create a task table."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of tasks to show"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param consoleScreen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The console screen to show the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TaskTableCreator(ArrayList\u003cTask\u003e taskList, TextFlow consoleScreen) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.consoleScreen \u003d consoleScreen;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a Table View from the tasks in the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The Table View of the tasks in the task list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public TableView\u003cBasicTask\u003e createTaskListTable() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableView\u003cBasicTask\u003e taskTable \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        initialiseTaskTable(taskTable);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskTable;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void initialiseTaskTable(TableView\u003cBasicTask\u003e taskTable) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Row properties"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskTable.setRowFactory(basicTaskTableView -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TableRow\u003cBasicTask\u003e row \u003d new TableRow\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setPrefHeight(ROW_HEIGHT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            row.setOnMouseClicked(event -\u003e onRowClick(event, row));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return row;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Set height"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int height \u003d taskList.size() * ROW_HEIGHT + HEADER_HEIGHT;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskTable.setPrefHeight(height);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Populate columns and data"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskTable.getColumns()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .addAll(getIdColumn(), getModuleCodeColumn(), getCategoryNameColumn(), getDescriptionColumn(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        getDeadlineColumn(), getPriorityColumn(), getDoneStatusColumn());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskTable.getItems().addAll(getBasicTaskList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Width properties"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskTable.setMinWidth(TABLE_WIDTH);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskTable.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskTable.setPlaceholder(new Label(\"No modules to show\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicTask, Integer\u003e getIdColumn() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicTask, Integer\u003e idColumn \u003d new TableColumn\u003c\u003e(\"NO\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"id\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setPrefWidth(ID_WIDTH);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        idColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return idColumn;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicTask, String\u003e getModuleCodeColumn() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicTask, String\u003e moduleCodeColumn \u003d new TableColumn\u003c\u003e(\"Module\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"moduleCode\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setPrefWidth(MODULE_CODE_WIDTH);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleCodeColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleCodeColumn;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicTask, String\u003e getCategoryNameColumn() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicTask, String\u003e categoryNameColumn \u003d new TableColumn\u003c\u003e(\"Category\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"categoryName\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setPrefWidth(CATEGORY_NAME_WIDTH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryNameColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryNameColumn;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicTask, String\u003e getDescriptionColumn() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicTask, String\u003e descriptionColumn \u003d new TableColumn\u003c\u003e(\"Task\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        descriptionColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        descriptionColumn.setPrefWidth(TASK_DESCRIPTION_WIDTH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        descriptionColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return descriptionColumn;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicTask, String\u003e getDeadlineColumn() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicTask, String\u003e deadlineColumn \u003d new TableColumn\u003c\u003e(\"Deadline\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        deadlineColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"deadline\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        deadlineColumn.setPrefWidth(DEADLINE_WIDTH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Color table rows depending on the proximity to deadline"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        deadlineColumn.setCellFactory(column -\u003e new TableCell\u003cBasicTask, String\u003e() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            protected void updateItem(String deadlineString, boolean empty) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                super.updateItem(deadlineString, empty);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                TableRow\u003cBasicTask\u003e row \u003d getTableRow();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                if (deadlineString \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    row.setStyle(\"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                setText(deadlineString);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                BasicTask basicTask \u003d row.getItem();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    Task task \u003d ModuleManager.getTask(basicTask.getModuleCode(), basicTask.getCategoryName(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            basicTask.getDescription());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    if (task.isDone()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        // Highlight if task is done"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        row.setStyle(\"-fx-background-color: Gainsboro\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    } else if (task.getDeadline().isPresent() \u0026\u0026 task.getDeadline().isDue()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        // Highlight if task is due"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        row.setStyle(\"-fx-background-color: PeachPuff\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    } else if (task.getDeadline().isPresent()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u0026\u0026 task.getDeadline().isBefore(LocalDate.now().plusDays(3))) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        // Highlight if task is near deadline (within 2 days)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        row.setStyle(\"-fx-background-color: CornSilk\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                } catch (DataNotFoundException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    // Do nothing"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        deadlineColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return deadlineColumn;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicTask, Integer\u003e getPriorityColumn() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicTask, Integer\u003e priorityColumn \u003d new TableColumn\u003c\u003e(\"Pty\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        priorityColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"priority\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        priorityColumn.setPrefWidth(PRIORITY_WIDTH);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        priorityColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return priorityColumn;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TableColumn\u003cBasicTask, String\u003e getDoneStatusColumn() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        TableColumn\u003cBasicTask, String\u003e doneStatusColumn \u003d new TableColumn\u003c\u003e(\"Done\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        doneStatusColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"doneStatus\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        doneStatusColumn.setPrefWidth(DONE_STATUS_WIDTH);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        doneStatusColumn.setStyle(\"-fx-alignment: CENTER\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return doneStatusColumn;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private ObservableList\u003cBasicTask\u003e getBasicTaskList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cBasicTask\u003e basicTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String deadline \u003d task.getDeadline().isPresent() ? task.getDeadline().toShow() : \"-NIL-\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String doneStatus \u003d task.isDone() ? CHECK_ICON : CROSS_ICON;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            basicTaskList.add(new BasicTask(id++, task.getParent().getParent().getModuleCode(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    task.getParent().getCategoryName(), task.getDescription(), deadline,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    task.getPriority(), doneStatus));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return FXCollections.observableArrayList(basicTaskList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void onRowClick(MouseEvent mouseEvent, TableRow\u003cBasicTask\u003e row) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (mouseEvent.getButton() \u003d\u003d MouseButton.PRIMARY \u0026\u0026 !row.isEmpty()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            BasicTask rowData \u003d row.getItem();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Task task \u003d ModuleManager.getTask(rowData.getModuleCode(), rowData.getCategoryName(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        rowData.getDescription());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new GuiExecutor(consoleScreen).executeCommand(new InfoCommand(task));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (DataNotFoundException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Do nothing"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 220
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/tablecreator/basicdirectory/BasicCategory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util.tablecreator.basicdirectory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class BasicCategory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Integer priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the basic Category class with only its attributes for creating a Category Table."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The id of the category in the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the parent module"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public BasicCategory(Integer id, String moduleCode, String categoryName, Integer priority) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the id of the category."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The id of the category"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the module code of the parent module."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the parent module"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the name of the category."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the priority of the category."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the category"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Integer getPriority() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iceclementi": 69
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/tablecreator/basicdirectory/BasicFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util.tablecreator.basicdirectory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class BasicFile {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the basic TaskFile class with only its attributes for creating a File Table."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The id of the file in the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the parent module"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the parent category"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskDescription"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the parent task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileName"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public BasicFile(Integer id, String moduleCode, String categoryName, String taskDescription, String fileName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the id of the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The id of the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the module code of the parent module."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the parent module"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the name of the parent category."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the parent category"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the description of the parent task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the parent task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the name of the file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 81
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/tablecreator/basicdirectory/BasicModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util.tablecreator.basicdirectory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class BasicModule {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the basic Module class with only its attributes for creating a Module Table."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The id of the module in the list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param title"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The title of the module"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public BasicModule(Integer id, String moduleCode, String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the id of the module."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The id of the module"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the module code of the module."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the title of the module."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The title of the module"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 53
    }
  },
  {
    "path": "src/main/java/seedu/nuke/gui/util/tablecreator/basicdirectory/BasicTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.gui.util.tablecreator.basicdirectory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class BasicTask {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Integer id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String categoryName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Integer priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String doneStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Constructs the basic Category class with only its attributes for creating a Category Table."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The id of the task in the list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the parent module"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the parent category"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param doneStatus"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The done status of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public BasicTask(Integer id, String moduleCode, String categoryName, String description, String deadline,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                     Integer priority, String doneStatus) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.doneStatus \u003d doneStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the id of the category."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The id of the category"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Integer getId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the module code of the parent module."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module code of the parent module"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the name of the category."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the category"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The description of the task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The deadline of the task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the priority of the task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority of the task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Integer getPriority() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the done status of the task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The done status of the task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDoneStatus() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return doneStatus;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 110
    }
  },
  {
    "path": "src/main/java/seedu/nuke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.IncorrectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddCategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddFileCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import seedu.nuke.command.addcommand.AddTagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditCategoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditFileCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditModuleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.EditTaskCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.editcommand.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.FilterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteFileCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.DueCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskSortedCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListCategoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListFileCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleTask;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.InfoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.OpenFileCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.RedoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.promptcommand.ConfirmationStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.promptcommand.DeleteConfirmationPrompt;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.promptcommand.ListNumberPrompt;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTimeFormat;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_PREFIX_FOUND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_DATETIME_FORMAT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_PARAMETERS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_PRIORITY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MISSING_DIRECTORY_NAME;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MISSING_PARAMETERS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_CHECK_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DEADLINE_OR_PRIORITY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EMPTY_INPUT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EXTRA_PARAMETERS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_DELETE_INDICES;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MISSING_CATEGORY_NAME;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MISSING_DIRECTORY_TO_DELETE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MISSING_MODULE_CODE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MISSING_TAG_NAME;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MISSING_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_DIRECTORY_TO_DELETE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_EDIT_CATEGORY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_EDIT_FILE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_EDIT_MODULE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_EDIT_TASK;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_PREFIX_ALLOWED;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_UNKNOWN_COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003cparameters\u003e.*)\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String WHITESPACES \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String NONE \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static final String GENERIC_LIST_COMMAND \u003d \"ls\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static final String GENERIC_ADD_COMMAND \u003d \"mkdir\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private static final String GENERIC_DELETE_COMMAND \u003d \"rm\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MODULE_PREFIX \u003d \"-m\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String CATEGORY_PREFIX \u003d \"-c\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TASK_PREFIX \u003d \"-t\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FILE_PREFIX \u003d \"-f\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String PRIORITY_PREFIX \u003d \"-p\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DEADLINE_PREFIX \u003d \"-d\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String ALL_FLAG \u003d \"-a\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String EXACT_FLAG \u003d \"-e\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String COMMAND_WORD_GROUP \u003d \"commandWord\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String PARAMETERS_GROUP \u003d \"parameters\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String IDENTIFIER_GROUP \u003d \"identifier\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String MODULE_GROUP \u003d \"moduleCode\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String CATEGORY_GROUP \u003d \"categoryName\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String TASK_GROUP \u003d \"taskDescription\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String FILE_GROUP \u003d \"fileInfo\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DEADLINE_GROUP \u003d \"deadline\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String PRIORITY_GROUP \u003d \"priority\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String PRIORITY_GROUP_SECOND \u003d \"prioritySecond\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String EXACT_GROUP \u003d \"exact\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String ALL_GROUP \u003d \"all\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String ALL_GROUP_SECOND \u003d \"allSecond\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String INVALID_GROUP \u003d \"invalid\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input string read by the \u003cb\u003eUI\u003c/b\u003e and converts the string into a specific \u003cb\u003eCommand\u003c/b\u003e, which is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * to be executed by the \u003cb\u003eNuke\u003c/b\u003e program."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The user input has to start with a certain keyword (i.e. \u003ci\u003ecommand word\u003c/i\u003e), otherwise an"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003eInvalid Command Exception\u003c/i\u003e will be thrown."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input The user input read by the \u003cb\u003eUI\u003c/b\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003cb\u003ecorresponding\u003c/b\u003e command to be executed"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see seedu.nuke.ui.Ui"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Command parseCommand(String input) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_EMPTY_INPUT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_COMMAND_FORMAT + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String commandWord \u003d matcher.group(COMMAND_WORD_GROUP).toLowerCase().trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String parameters \u003d matcher.group(PARAMETERS_GROUP);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            case GENERIC_ADD_COMMAND:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareGenericAddCommand(parameters);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case GENERIC_LIST_COMMAND:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareGenericListCommand(parameters);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            case GENERIC_DELETE_COMMAND:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                return prepareGenericDeleteCommand(parameters);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareAddModuleCommand(parameters);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareAddCategoryCommand(parameters);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareAddTaskCommand(parameters);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case AddFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareAddFileCommand(parameters);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                return prepareAddTagCommand(parameters);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListModuleCommand(parameters, true);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListCategoryCommand(parameters, true);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListTaskCommand(parameters, true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DeleteFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListFileCommand(parameters, true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListModuleCommand(parameters, false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListCategoryCommand(parameters, false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListTaskCommand(parameters, false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListFileCommand(parameters, false);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListModuleTask.COMMAND_WORD:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new ListModuleTask(parameters.trim());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ListTaskSortedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareListTaskSortedCommand(parameters);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case DueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDueCommand(parameters);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case EditModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareEditModuleCommand(parameters);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case EditCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareEditCategoryCommand(parameters);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareEditTaskCommand(parameters);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case EditFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareEditFileCommand(parameters);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case MarkAsDoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareMarkAsDoneCommand(parameters);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ChangeDirectoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareChangeDirectoryCommand(parameters);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case OpenFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareOpenFileCommand(parameters);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case InfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareCommandWithoutParameters(new InfoCommand(), parameters);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareCommandWithoutParameters(new UndoCommand(), parameters);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareCommandWithoutParameters(new RedoCommand(), parameters);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareCommandWithoutParameters(new HelpCommand(), parameters);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareClearCommand(parameters);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareCommandWithoutParameters(new ExitCommand(), parameters);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new IncorrectCommand(MESSAGE_UNKNOWN_COMMAND_WORD);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (InvalidParameterException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PARAMETERS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DuplicatePrefixException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\", MESSAGE_DUPLICATE_PREFIX_FOUND, e.getMessage()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command that has no parameters."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to be executed later if it passes the check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareCommandWithoutParameters(Command command, String parameters) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!parameters.isEmpty()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Prepare Generic Commands */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepare the command to add the content based on the directory of the user is currently in."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param parameters The parameters given by the user"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return The command to change the current directory"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidParameterException exception is thrown when parameter is invalid."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws DuplicatePrefixException exception is thrown when duplicated prefix is provided."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareGenericAddCommand(String parameters)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (containsPrefix(parameters)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_PREFIX_ALLOWED);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareAddModuleCommand(parameters);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareAddCategoryCommand(parameters);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareAddTaskCommand(parameters);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareAddFileCommand(parameters);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepare the command to list the content based on the directory of the user is currently in."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param parameters The parameters given by the user"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return The command to change the current directory"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidParameterException exception is thrown when parameter is invalid."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws DuplicatePrefixException exception is thrown when duplicated prefix is provided."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareGenericListCommand(String parameters)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (containsPrefix(parameters)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_PREFIX_ALLOWED);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListModuleCommand(parameters, false);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String listCategoriesString \u003d String.format(\" %s %s\", MODULE_PREFIX, parameters);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListCategoryCommand(listCategoriesString, false);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListCategoryCommand(parameters, false);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String listTasksString \u003d String.format(\" %s %s\", CATEGORY_PREFIX, parameters);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListTaskCommand(listTasksString, false);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListTaskCommand(parameters, false);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String listFilesString \u003d String.format(\" %s %s\", TASK_PREFIX, parameters);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return prepareDeleteAndListFileCommand(listFilesString, false);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareDeleteAndListFileCommand(parameters, false);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INCORRECT_DIRECTORY_LEVEL);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Prepare the command to delete the content based on the directory of the user is currently in."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param parameters The parameters given by the user"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @return The command to change the current directory"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws InvalidParameterException exception is thrown when parameter is invalid."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @throws DuplicatePrefixException exception is thrown when duplicated prefix is provided."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private Command prepareGenericDeleteCommand(String parameters)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (containsPrefix(parameters)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_PREFIX_ALLOWED);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_DIRECTORY_TO_DELETE);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final String deleteString \u003d String.format(\" %s -e\", parameters);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        switch (DirectoryTraverser.getCurrentDirectoryLevel()) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case ROOT:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareDeleteAndListModuleCommand(deleteString, true);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareDeleteAndListCategoryCommand(deleteString, true);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareDeleteAndListTaskCommand(deleteString, true);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return prepareDeleteAndListFileCommand(deleteString, true);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_DIRECTORY_TO_DELETE);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Prepare Add Commands */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to add a module."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to add a module"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddModuleCommand(String parameters)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddModuleCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, AddModuleCommand.FORMAT));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_MODULE_CODE);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        return new AddModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to add a category."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to add a category"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddCategoryCommand(String parameters)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddCategoryCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, AddCategoryCommand.FORMAT));"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (categoryName.isEmpty()) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_CATEGORY_NAME);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String priority \u003d matcher.group(PRIORITY_GROUP).replace(PRIORITY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (priority.isEmpty()) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddCategoryCommand(moduleCode, categoryName);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddCategoryCommand(moduleCode, categoryName, parsePriority(priority));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException | InvalidPriorityException e) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to add a task."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to add a task"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddTaskCommand(String parameters)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddTaskCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DEADLINE_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, AddTaskCommand.FORMAT));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_TASK_DESCRIPTION);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String deadline \u003d matcher.group(DEADLINE_GROUP).replace(DEADLINE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String priority \u003d getOptionalAttribute(matcher, PRIORITY_GROUP, PRIORITY_GROUP_SECOND)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .replace(PRIORITY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime deadlineToSet;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            deadlineToSet \u003d DateTimeFormat.stringToDateTime(deadline);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (priority.isEmpty()) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddTaskCommand(moduleCode, categoryName, taskDescription, deadlineToSet);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new AddTaskCommand(moduleCode, categoryName, taskDescription, deadlineToSet,"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    parsePriority(priority));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException | InvalidPriorityException e) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to add a file."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to add a file"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddFileCommand(String parameters)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddFileCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX, FILE_PREFIX);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, AddFileCommand.FORMAT));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String filePath \u003d matcher.group(FILE_GROUP).replace(FILE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new AddFileCommand(moduleCode, categoryName, taskDescription, fileName, filePath);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareAddTagCommand(String parameters)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d AddTagCommand.REGEX_FORMATS.matcher(parameters);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, AddTagCommand.FORMAT));"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String tagName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (tagName.isEmpty()) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_TAG_NAME);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new AddTagCommand(new ArrayList\u003c\u003e(Arrays.asList(tagName)), moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Prepare Delete and List Commands */"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to delete modules or show filtered modules."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to delete modules or show filtered modules"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDeleteAndListModuleCommand(String parameters, boolean isDelete)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d FilterCommand.MODULE_REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, EXACT_FLAG, ALL_FLAG);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d matcher.group(EXACT_GROUP).trim();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return isDelete"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    ? new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, invalid,"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            MESSAGE_CHECK_COMMAND_FORMAT, DeleteModuleCommand.FORMAT)) :"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, invalid,"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            MESSAGE_CHECK_COMMAND_FORMAT, ListModuleCommand.FORMAT));"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteModuleCommand(moduleKeyword, isExact);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ListModuleCommand(moduleKeyword, isExact);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to delete categories or show filtered categories."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to delete categories or show filtered categories"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDeleteAndListCategoryCommand(String parameters, boolean isDelete)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d FilterCommand.CATEGORY_REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, EXACT_FLAG, ALL_FLAG);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryKeyword \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d matcher.group(EXACT_GROUP).trim();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String allFlag \u003d getOptionalAttribute(matcher, ALL_GROUP, ALL_GROUP_SECOND);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isAll \u003d !allFlag.isEmpty();"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return isDelete"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    ? new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, invalid,"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            MESSAGE_CHECK_COMMAND_FORMAT, DeleteCategoryCommand.FORMAT)) :"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, invalid,"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            MESSAGE_CHECK_COMMAND_FORMAT, ListCategoryCommand.FORMAT));"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteCategoryCommand(moduleKeyword, categoryKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ListCategoryCommand(moduleKeyword, categoryKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to delete tasks or show filtered tasks."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to delete tasks or show filtered tasks"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDeleteAndListTaskCommand(String parameters, boolean isDelete)"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d FilterCommand.TASK_REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, EXACT_FLAG, ALL_FLAG);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskKeyword \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryKeyword \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d matcher.group(EXACT_GROUP).trim();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String allFlag \u003d getOptionalAttribute(matcher, ALL_GROUP, ALL_GROUP_SECOND);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isAll \u003d !allFlag.isEmpty();"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return isDelete"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    ? new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, invalid,"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            MESSAGE_CHECK_COMMAND_FORMAT, DeleteTaskCommand.FORMAT)) :"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, invalid,"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            MESSAGE_CHECK_COMMAND_FORMAT, ListTaskCommand.FORMAT));"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteTaskCommand(moduleKeyword, categoryKeyword, taskKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ListTaskCommand(moduleKeyword, categoryKeyword, taskKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to delete files or show filtered files."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to delete files or show filtered files"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDeleteAndListFileCommand(String parameters, boolean isDelete)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d FilterCommand.FILE_REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX, EXACT_FLAG, ALL_FLAG);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileKeyword \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleKeyword \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryKeyword \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskKeyword \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String exactFlag \u003d matcher.group(EXACT_GROUP).trim();"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String allFlag \u003d getOptionalAttribute(matcher, ALL_GROUP, ALL_GROUP_SECOND);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isAll \u003d !allFlag.isEmpty();"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isExact \u003d !exactFlag.isEmpty();"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return isDelete"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    ? new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, invalid,"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            MESSAGE_CHECK_COMMAND_FORMAT, DeleteFileCommand.FORMAT)) :"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT, invalid,"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            MESSAGE_CHECK_COMMAND_FORMAT, ListFileCommand.FORMAT));"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isDelete) {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteFileCommand(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ListFileCommand(moduleKeyword, categoryKeyword, taskKeyword, fileKeyword, isExact, isAll);"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to show a list of undone tasks sorted by deadline or priority."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to show a list of undone tasks sorted by deadline or priority"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareListTaskSortedCommand(String parameters)"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d ListTaskSortedCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, DEADLINE_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String deadlineFlag \u003d matcher.group(DEADLINE_GROUP).trim();"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String priorityFlag \u003d getOptionalAttribute(matcher, PRIORITY_GROUP, PRIORITY_GROUP_SECOND);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\", MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    invalid, MESSAGE_CHECK_COMMAND_FORMAT, ListTaskSortedCommand.FORMAT));"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Contains both deadline and priority prefixes"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!deadlineFlag.isEmpty() \u0026\u0026 !priorityFlag.isEmpty()) {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_DEADLINE_OR_PRIORITY);"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isByPriority \u003d !priorityFlag.isEmpty();"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ListTaskSortedCommand(moduleCode, isByPriority);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to show filtered tasks by a time period."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to show tasks due on a certain time period"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareDueCommand(String parameters)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (parameters.isBlank()) {"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_PARAMETERS);"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d DueCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, ALL_FLAG);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String dateFilter \u003d matcher.group(IDENTIFIER_GROUP).trim().toLowerCase();"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String allFlag \u003d matcher.group(ALL_GROUP).trim();"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        boolean isAll \u003d !allFlag.isEmpty();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, DueCommand.FORMAT));"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (dateFilter.equals(\"over\")) {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DueCommand(dateFilter, isAll);"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] dateFilterData \u003d dateFilter.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (dateFilterData[0].equals(\"over\")) {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new IncorrectCommand(MESSAGE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (dateFilterData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new DueCommand(DateTimeFormat.stringToDate(dateFilterData[0]), null, isAll);"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else if (dateFilterData.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new DueCommand(DateTimeFormat.stringToDate(dateFilterData[1]), dateFilterData[0], isAll);"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new IncorrectCommand(MESSAGE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateException e) {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Prepare Edit Commands */"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to edit a module."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to edit a module"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareEditModuleCommand(String parameters)"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d EditModuleCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String oldModuleCode \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newModuleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, EditModuleCommand.FORMAT));"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNothingToEdit(newModuleCode)) {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_MODULE);"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new EditModuleCommand(oldModuleCode, newModuleCode);"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to edit a category."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to edit a category"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareEditCategoryCommand(String parameters)"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d EditCategoryCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String oldCategoryName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newCategoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newPriority \u003d matcher.group(PRIORITY_GROUP).replace(PRIORITY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, EditCategoryCommand.FORMAT));"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNothingToEdit(newCategoryName, newPriority)) {"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_CATEGORY);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newPriority.isEmpty()) {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new EditCategoryCommand(oldCategoryName, moduleCode, newCategoryName);"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new EditCategoryCommand(oldCategoryName, moduleCode, newCategoryName, parsePriority(newPriority));"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException | InvalidPriorityException e) {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to edit a task."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to edit a task"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareEditTaskCommand(String parameters)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d EditTaskCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX,"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                DEADLINE_PREFIX, PRIORITY_PREFIX);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String oldTaskDescription \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newTaskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newDeadline \u003d matcher.group(DEADLINE_GROUP).replace(DEADLINE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newPriority \u003d getOptionalAttribute(matcher, PRIORITY_GROUP, PRIORITY_GROUP_SECOND)"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .replace(PRIORITY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, EditTaskCommand.FORMAT));"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNothingToEdit(newTaskDescription, newDeadline, newPriority)) {"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_TASK);"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime newDeadlineToSet;"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            newDeadlineToSet \u003d DateTimeFormat.stringToDateTime(newDeadline);"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (newPriority.isEmpty()) {"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new EditTaskCommand(oldTaskDescription, moduleCode, categoryName, newTaskDescription,"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    newDeadlineToSet);"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new EditTaskCommand(oldTaskDescription, moduleCode, categoryName, newTaskDescription,"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    newDeadlineToSet, parsePriority(newPriority));"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (NumberFormatException | InvalidPriorityException e) {"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to edit a file."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to edit a file"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareEditFileCommand(String parameters)"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d EditFileCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX, FILE_PREFIX);"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String oldFileName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String newFileName \u003d matcher.group(FILE_GROUP).replace(FILE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, EditFileCommand.FORMAT));"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isNothingToEdit(newFileName)) {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_NO_EDIT_FILE);"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new EditFileCommand(oldFileName, moduleCode, categoryName, taskDescription, newFileName);"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareMarkAsDoneCommand(String parameters)"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d MarkAsDoneCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX);"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, MarkAsDoneCommand.FORMAT));"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new MarkAsDoneCommand(moduleCode, categoryName, taskDescription);"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* Miscellaneous Commands */"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to change the current directory."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to change the current directory"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareChangeDirectoryCommand(String parameters) {"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (parameters.isBlank()) {"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_MISSING_DIRECTORY_NAME);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (parameters.trim().equals(\"..\")) {"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ChangeDirectoryCommand();"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ChangeDirectoryCommand(parameters.trim());"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to open file(s)."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to open file(s)"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareOpenFileCommand(String parameters)"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Matcher matcher \u003d OpenFileCommand.REGEX_FORMAT.matcher(parameters);"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        validateParameters(parameters, matcher, MODULE_PREFIX, CATEGORY_PREFIX, TASK_PREFIX);"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String fileName \u003d matcher.group(IDENTIFIER_GROUP).trim();"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String moduleCode \u003d matcher.group(MODULE_GROUP).replace(MODULE_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String categoryName \u003d matcher.group(CATEGORY_GROUP).replace(CATEGORY_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String taskDescription \u003d matcher.group(TASK_GROUP).replace(TASK_PREFIX, NONE).trim();"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String invalid \u003d matcher.group(INVALID_GROUP).trim();"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!invalid.isEmpty()) {"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(String.format(\"%s%s\\n\\n%s%s\\n\","
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, invalid, MESSAGE_CHECK_COMMAND_FORMAT, OpenFileCommand.FORMAT));"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new OpenFileCommand(moduleCode, categoryName, taskDescription, fileName);"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Prepares the command to clear the GUI Console Screen."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to clear the GUI Console Screen"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Command prepareClearCommand(String parameters) {"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // This is exclusive for Gui only"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!Executor.isGui()) {"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_UNKNOWN_COMMAND_WORD);"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!parameters.isEmpty()) {"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_EXTRA_PARAMETERS);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the priority is between 0 and 100 inclusive."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The priority given by the user"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if the priority is within range, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isPriorityWithinRange(int priority) {"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return priority \u003e\u003d 0 \u0026\u0026 priority \u003c\u003d 20;"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses a string as a priority."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param priorityString"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The string representing the priority"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The numeric priority of the string"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidPriorityException"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the priority is invalid as it is not within the expected range"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int parsePriority(String priorityString) throws InvalidPriorityException {"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int priorityToSet \u003d Integer.parseInt(priorityString);"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!isPriorityWithinRange(priorityToSet)) {"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidPriorityException();"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return priorityToSet;"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Validate the parameters given by the user for the respective command."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters given by the user"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The matcher to match for attributes and check for validity"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameterPrefixes"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The prefixes used for the respective command"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidParameterException"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If an invalid parameter is found in the parameters or the parameters do not match the expected format"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws DuplicatePrefixException"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If a duplicate prefix is found in the parameters"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private void validateParameters(String parameters, Matcher matcher, String... parameterPrefixes)"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidParameterException, DuplicatePrefixException {"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e duplicatedPrefixes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String prefix : parameterPrefixes) {"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (countPrefixOccurrences(parameters, prefix) \u003e 1) {"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                duplicatedPrefixes.add(prefix);"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!duplicatedPrefixes.isEmpty()) {"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String allDuplicatedPrefixes \u003d \"Duplicated prefix: \" + String.join(\", \", duplicatedPrefixes);"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new DuplicatePrefixException(allDuplicatedPrefixes);"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidParameterException();"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * A simple method to count the number of prefix occurrences within a string."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fullString"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The main string to count the number of substring"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param prefix"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The prefix to find in the main string"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private int countPrefixOccurrences(String fullString, String prefix) {"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Smaller than prefix length"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fullString.length() \u003c prefix.length() + 1) {"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Count number of prefixes in the centre of string"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefixWithSpaces \u003d String.format(\" %s \", prefix);"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        while ((index \u003d fullString.indexOf(prefixWithSpaces, index)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ++count;"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ++index;"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Check if there is a prefix at the back of the string"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String prefixWithFrontSpace \u003d String.format(\" %s\", prefix);"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int indexOfLastPrefix \u003d fullString.length() - prefixWithFrontSpace.length();"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (fullString.substring(indexOfLastPrefix).equals(prefixWithFrontSpace)) {"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ++count;"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the parameters contains any prefixes."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param parameters"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The parameters to check"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if a prefix is found, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean containsPrefix(String parameters) {"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Pattern prefixRegex \u003d Pattern.compile(\".*?\\\\s+-.*\");"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return prefixRegex.matcher(parameters).matches();"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the correctly parsed optional attribute from a pair of duplicate attribute groups."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The matcher to find the optional attribute"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param firstGroup"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the first group"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param secondGroup"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The name of the second group"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The correct optional attribute"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getOptionalAttribute(Matcher matcher, String firstGroup, String secondGroup) {"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String first \u003d matcher.group(firstGroup).trim();"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String second \u003d matcher.group(secondGroup).trim();"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return !first.isEmpty() ? first : second;"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if there is anything to edit from the input given by the user."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param attributes"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The attributes to be edited"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if there is nothing to edit, or \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isNothingToEdit(String... attributes) {"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String attribute : attributes) {"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (!attribute.isEmpty()) {"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input as a confirmation status to a confirmation prompt for the user, and prepares the"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * corresponding command."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input given by the user"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to be executed"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Command parseConfirmation(String userInput) {"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yes\":"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"y\":"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteConfirmationPrompt(ConfirmationStatus.CONFIRM);"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"no\":"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"n\":"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteConfirmationPrompt(ConfirmationStatus.ABORT);"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DeleteConfirmationPrompt(ConfirmationStatus.WAIT);"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Parses the input as indices to prepare a command to utilise the parsed indices."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The input string given by the user"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The command to be executed"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Command parseIndices(String input) {"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        final Matcher matcher \u003d ListNumberPrompt.INDICES_FORMAT.matcher(input.trim());"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            Executor.terminatePrompt();"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_DELETE_INDICES);"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String indicesString \u003d matcher.group(\"indices\");"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] separatedIndicesString \u003d indicesString.split(WHITESPACES);"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Convert String array to Integer ArrayList and removing duplicates"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cInteger\u003e indices \u003d Stream.of(separatedIndicesString)"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Integer::parseInt).distinct()"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Decrement each index by 1 due to 0-based indexing"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        IntStream.range(0, indices.size())"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .forEach(currentValue -\u003e indices.set(currentValue, indices.get(currentValue) - 1));"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return new ListNumberPrompt(indices);"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidParameterException extends InvalidFormatException {"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class DuplicatePrefixException extends InvalidFormatException {"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        private String message;"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        public DuplicatePrefixException(String message) {"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            this.message \u003d message;"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        public String getMessage() {"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidPriorityException extends InvalidFormatException {"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 5,
      "wangqinNick": 24,
      "A11riseforme": 58,
      "iceclementi": 1118
    }
  },
  {
    "path": "src/main/java/seedu/nuke/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public interface Tag {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void setTag(ArrayList\u003cString\u003e infos);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void removeTag(String tag);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void removeAllTags();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public String getTag();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 6,
      "wangqinNick": 5,
      "A11riseforme": 2
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/TextUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.Ansi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.GREEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.MAGENTA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.RED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.DIVIDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_WELCOME_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_MESSAGE \u003d BLUE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_RESPONSE \u003d GREEN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_DIVIDER \u003d BLACK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_LOGO \u003d MAGENTA;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color SYSTEM_COLOR_ALERT \u003d RED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display welcome message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void showWelcomeMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_1).reset());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "                ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_WELCOME_2).reset());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display the exit message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static void showExitMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        System.out.println(ansi().bold().fg(SYSTEM_COLOR_MESSAGE).a(MESSAGE_EXIT).reset());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * clear the screen."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void clearScreen() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().eraseScreen());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * display the logo."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void displayLogo() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        ansi().reset();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.print(ansi().bold().fg(SYSTEM_COLOR_LOGO).a(MESSAGE_LOGO).reset());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * print a divider."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static void printDivider() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        System.out.println(ansi().bold().fg(SYSTEM_COLOR_DIVIDER).a(DIVIDER).reset());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 9,
      "wangqinNick": 52,
      "A11riseforme": 21
    }
  },
  {
    "path": "src/main/java/seedu/nuke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.ChangeDirectoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddFileCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddTagCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.addcommand.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.editcommand.EditCategoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.editcommand.EditModuleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.editcommand.EditTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.editcommand.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskSortedCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListCategoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListModuleTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.filtercommand.listcommand.ListTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.ListCreator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Constructs the \u003ccode\u003eUI\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out \u003d new PrintStream(System.out);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows the directory path to the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showDirectoryPath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(String.format(\"%s : \", DirectoryTraverser.getFullPath()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Reads the user input from the command line."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The input given by the user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        showDirectoryPath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows the result message after the command given by the user input is executed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Also, shows a list to the user if requested."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The result after executing a command given by the user input"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showResult(CommandResult result) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (result.getFeedbackToUser() \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            showMessage(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (!result.getFeedbackToUser().isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            showMessage(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if ((result.getDirectoryLevel() \u003d\u003d DirectoryLevel.NONE) \u0026\u0026 result.getHelpGuide() \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String listTableToShow;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (result.getDirectoryLevel()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cModule\u003e moduleList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Module.class::cast)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createModuleListTable(moduleList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case CATEGORY:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cCategory\u003e categoryList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Category.class::cast)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createCategoryListTable(categoryList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case TASK:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(Task.class::cast)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createTaskListTable(taskList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case FILE:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cTaskFile\u003e fileList \u003d result.getShownList().stream()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createFileListTable(fileList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case NONE:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            if (result.getHelpGuide() \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ArrayList\u003cString\u003e helpList \u003d result.getHelpGuide();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTableToShow \u003d ListCreator.createGeneralListTable(helpList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        showMessage(listTableToShow);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param message Message to be shown"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        out.println(message.replace(\"\\n\", LS));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * print the Strings in an ArrayList to the user."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * @param shownList an ArrayList of Strings to be shown to the user"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void printShownList(ArrayList\u003cString\u003e shownList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        final String divider \u003d String.format(\"%s%s%s\", \"+\", \"-\".repeat(100), \"+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        for (String str : shownList) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(str);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        System.out.println(divider + \"\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 31,
      "A11riseforme": 9,
      "iceclementi": 121
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time\u003c/h3\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A \u003cb\u003eDate Time\u003c/b\u003e contains both \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e information. This is used to hold the \u003ci\u003edatetime\u003c/i\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * information of the task\u0027s deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String FORMAT \u003d \"dd/mm/yyyy hh:mma\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"dd/MM/yyyy\"; // Date format to be displayed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String TIME_FORMAT \u003d \"hh:mma\"; // Time format to be displayed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String DATE_SORT_FORMAT \u003d \"yyyyMMdd\"; // Date format for sorting"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String TIME_SORT_FORMAT \u003d \"HHmm\"; // Time format for sorting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime(LocalTime time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime(LocalDate date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this.time \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public DateTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        this(null, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if datetime values are \u003cb\u003eNOT\u003c/b\u003e \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  \u003ccode\u003eTRUE\u003c/code\u003e if datetime is \u003cb\u003eNOT\u003c/b\u003e \u003ccode\u003eNULL\u003c/code\u003e and \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isPresent() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hasDate() \u0026\u0026 hasTime();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003etime\u003c/code\u003e."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_FORMAT}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003etime\u003c/code\u003e as a string with the format {@value TIME_FORMAT}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time.format(DateTimeFormatter.ofPattern(TIME_FORMAT));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value DATE_SORT_FORMAT}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by date."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getDateInSortFormat() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hasDate() ? date.format(DateTimeFormatter.ofPattern(DATE_SORT_FORMAT)) : \"_\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Returns the \u003ccode\u003edate\u003c/code\u003e as a string with the format {@value TIME_SORT_FORMAT}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * This format is primarily used for sorting tasks by time."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String getTimeInSortFormat() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hasTime() ? time.format(DateTimeFormatter.ofPattern(TIME_SORT_FORMAT)) : \"_\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String getDateTimeInSortFormat() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return getDateInSortFormat() + getTimeInSortFormat();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is the same as the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is the same as the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isOn(LocalDate date) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(date);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is before the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is before the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isBefore(LocalDate date) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isBefore(date);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is after the specified \u003ccode\u003edate\u003c/code\u003e."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date The \u003ci\u003edate\u003c/i\u003e in question"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is after the specified \u003ccode\u003edate\u003c/code\u003e, and"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isAfter(LocalDate date) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isAfter(date);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003etime\u003c/code\u003e attribute is \u003cb\u003enot\u003c/b\u003e \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003etime\u003c/code\u003e is not \u003ccode\u003eNULL\u003c/code\u003e, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean hasTime() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return time !\u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e attribute is \u003cb\u003enot\u003c/b\u003e \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if \u003ccode\u003edate\u003c/code\u003e is not \u003ccode\u003eNULL\u003c/code\u003e, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private boolean hasDate() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        return date !\u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the current day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isToday() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003ccode\u003edate\u003c/code\u003e is the same as the next day\u0027s \u003ci\u003edate\u003c/i\u003e, and"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private boolean isTomorrow() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return this.date.minusDays(1).isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Checks if the current \u003ci\u003edate\u003c/i\u003e and \u003ci\u003etime\u003c/i\u003e have passed the \u003ccode\u003edate\u003c/code\u003e and \u003ccode\u003etime\u003c/code\u003e."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e i.e. The \u003cb\u003eDate Time\u003c/b\u003e has expired."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return \u003ccode\u003eTRUE\u003c/code\u003e if the \u003cb\u003eDate Time\u003c/b\u003e has expired, and \u003ccode\u003eFALSE\u003c/code\u003e otherwise"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public boolean isDue() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return LocalDate.now().isAfter(date)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                || (hasTime() \u0026\u0026 isToday() \u0026\u0026 LocalTime.now().isAfter(time));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003edate\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003edate\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String dateToString() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (isToday()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"today\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (isTomorrow()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return \"tomorrow\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getDateString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the \u003ccode\u003etime\u003c/code\u003e into a string format."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * If \u003ccode\u003etime\u003c/code\u003e is \u003ccode\u003eNULL\u003c/code\u003e, an empty string is returned instead."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003etime\u003c/code\u003e in a string format."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private String timeToString() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return hasTime() ? getTimeString() : \"\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts \u003cb\u003eDate Time\u003c/b\u003e into its string representation, containing its \u003ccode\u003edate\u003c/code\u003e and"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003etime\u003c/code\u003e information, and an indicator to show if the datetime has already passed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The string representation of \u003cb\u003eDate Time\u003c/b\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toShow() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String toShow \u003d dateToString() + \" \" + timeToString();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (isDue()) ? toShow + \" [OVER!]\" : toShow;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts \u003cb\u003eDate Time\u003c/b\u003e into its string representation, containing its \u003ccode\u003edate\u003c/code\u003e and"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ccode\u003etime\u003c/code\u003e information, and an indicator to show if the datetime has already passed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The string representation of \u003cb\u003eDate Time\u003c/b\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return getDateString() + \" \" + timeToString();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 8,
      "A11riseforme": 2,
      "iceclementi": 227
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/DateTimeFormat.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.InvalidFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ch3\u003eDate Time Format\u003c/h3\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * The \u003cb\u003eDate Time Format\u003c/b\u003e formats and converts strings into various \u003ci\u003edatetime\u003c/i\u003e objects, specifically"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * \u003ccode\u003eDateTime\u003c/code\u003e, \u003ccode\u003eLocalDate\u003c/code\u003e and \u003ccode\u003eLocalTime\u003c/code\u003e objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class DateTimeFormat {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of date formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_DATE_FORMATS \u003d {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        \"dd-MM-yyyy\", \"dd/MM[/yyyy]\", \"d/MM[/yyyy]\", \"dd/M[/yyyy]\", \"d/M[/yyyy]\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd/MM[/yy]\", \"d/MM[/yy]\", \"dd/M[/yy]\", \"d/M[/yy]\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd-MM[-yyyy]\", \"d-MM[-yyyy]\", \"dd-M[-yyyy]\", \"d-M[-yyyy]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"dd-MM[-yy]\", \"d-MM[-yy]\", \"dd-M[-yy]\", \"d-M[-yy]\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"ddMMyyyy\", \"ddMMyy\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /* An exhaustive list of time formats accepted by the Nuke program */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String[] ALL_TIME_FORMATS \u003d {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        \"H:mm\", \"h:mma\", \"H:mma\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"h.mma\", \"H.mma\", \"H.mm\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"hmma\", \"Hmma\", \"Hmm\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \"ha\", \"Ha\", \"H\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final int CURRENT_YEAR \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edatetime\u003c/code\u003e string into a \u003ccode\u003eDateTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ci\u003etime\u003c/i\u003e attribute must be present in the string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The \u003ci\u003edate\u003c/i\u003e attribute is \u003cu\u003eoptional\u003c/u\u003e and is set to the current date if absent."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e The attributes must be in accepted formats for successful conversion."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param datetime"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The string to be converted into its corresponding \u003ccode\u003eDateTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003ccode\u003eDateTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateTimeException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If more than 2 attributes are present in the string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the \u003ci\u003edate\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the \u003ci\u003etime\u003c/i\u003e attribute in the string is invalid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static DateTime stringToDateTime(String datetime)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throws InvalidDateTimeException, InvalidDateException, InvalidTimeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (datetime.isBlank()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String[] dateTimeData \u003d datetime.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (dateTimeData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String time \u003d dateTimeData[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new DateTime(stringToTime(time));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                String date \u003d dateTimeData[0].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return new DateTime(stringToDate(date));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else if (dateTimeData.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String date \u003d dateTimeData[0].trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String time \u003d dateTimeData[1].trim().toUpperCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return new DateTime(stringToDate(date), stringToTime(time));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003edate\u003c/code\u003e string into a \u003ccode\u003eLocalDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003edate\u003c/code\u003e string must be in either an accepted \u003ci\u003edate\u003c/i\u003e format or an accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003ci\u003edate specifier\u003c/i\u003e \u003ci\u003e\u003csmall\u003e(See Below)\u003c/small\u003e\u003c/i\u003e."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eAccepted Date Specifiers\u003c/b\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etoday\u003c/i\u003e or \u003ci\u003etdy\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003eyesterday\u003c/i\u003e or \u003ci\u003eyst\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *     \u003cli\u003e\u003ci\u003etomorrow\u003c/i\u003e or \u003ci\u003etmr\u003c/i\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The string to be converted into its corresponding \u003ccode\u003eLocalDate\u003c/code\u003e object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The \u003ccode\u003eLocalDate\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidDateException"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003edate\u003c/i\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalDate stringToDate(String date) throws InvalidDateException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Checks if matches date specifiers first, before checking if matches date formats"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        switch (date.toLowerCase()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tdy\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yesterday\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"yst\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tmr\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"monday\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getNextDateOfDay(DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tuesday\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getNextDateOfDay(DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"wednesday\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getNextDateOfDay(DayOfWeek.WEDNESDAY);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"thursday\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getNextDateOfDay(DayOfWeek.THURSDAY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"friday\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getNextDateOfDay(DayOfWeek.FRIDAY);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"saturday\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getNextDateOfDay(DayOfWeek.SATURDAY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"sunday\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return getNextDateOfDay(DayOfWeek.SUNDAY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            for (String formatPattern : ALL_DATE_FORMATS) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    DateTimeFormatter format \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .appendPattern(formatPattern)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .parseDefaulting(ChronoField.YEAR_OF_ERA, CURRENT_YEAR)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            .toFormatter();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    return LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    // Ignore invalid formats"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            // Throws exception if fails to parse all date formats"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Converts the specified \u003ccode\u003etime\u003c/code\u003e string into a \u003ccode\u003eLocalTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cb\u003eNote\u003c/b\u003e: The \u003ccode\u003etime\u003c/code\u003e string must be in either an accepted \u003ci\u003etime\u003c/i\u003e format or \u003ccode\u003eNULL\u003c/code\u003e."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Otherwise, an \u003ccode\u003eException\u003c/code\u003e will be thrown."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * \u003cbr\u003e In the case of a \u003ccode\u003eNULL\u003c/code\u003e \u003ccode\u003etime\u003c/code\u003e string, \u003ccode\u003eNULL\u003c/code\u003e will be returned instead."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param time The string to be converted into its corresponding \u003ccode\u003eLocalTime\u003c/code\u003e object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return The \u003ccode\u003eLocalTime\u003c/code\u003e object converted from the string"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @throws InvalidTimeException If the \u003ccode\u003edate\u003c/code\u003e string is an invalid \u003ci\u003etime\u003c/i\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalTime stringToTime(String time) throws InvalidTimeException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String format : ALL_TIME_FORMATS) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                return LocalTime.parse(time.toUpperCase(), DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                // Ignore invalid formats"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Throws exception if fails to parse all time formats"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        throw new InvalidTimeException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Gets the closest date of a day of the week after the current date."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param dayOfWeek"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The day of the week for which its date is to be found"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The closest date of the specified day of the week"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static LocalDate getNextDateOfDay(DayOfWeek dayOfWeek) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DayOfWeek currentDay \u003d currentDate.getDayOfWeek();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int dayCount \u003d (dayOfWeek.ordinal() - currentDay.ordinal() + 7) % 7;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Toggle between current day or week after"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // if (dayCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //    dayCount \u003d 7;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return currentDate.plusDays(dayCount);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003edatetime\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static class InvalidDateTimeException extends InvalidFormatException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003edate\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidDateException extends InvalidDateTimeException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     * Signals that the \u003ci\u003etime\u003c/i\u003e string given is in an invalid format."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static class InvalidTimeException extends InvalidDateTimeException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 2,
      "A11riseforme": 13,
      "iceclementi": 219
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/DummyModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * This class is solely for loading bunch of modules from a json file"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " * and to be converted into objects of DummyModules, for users to enrol into."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "public class DummyModule {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangqinNick": 1,
      "A11riseforme": 25
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/ExceptionMessage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_DIRECTORY_NAME \u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Please include the name of the directory you want to move to.\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Alternatively, enter .. to move to the parent directory instead.\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Sorry, the module is not found.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_PROVIDED \u003d \"Sorry, the module is not provided by NUS currently.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Sorry, the module already exists.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_CATEGORY_NOT_FOUND \u003d \"Sorry, the category is not found.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"Sorry, the category already exists.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_FOUND \u003d \"Sorry, the task is not found.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Sorry, the task already exists.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_TASK_FILE_NOT_FOUND \u003d \"Sorry, the file is not found.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK_FILE \u003d \"Sorry, the file already exists.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_IMPLICIT_FILE_EXCEED_LIMIT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the name of the file you are adding exceeds 30 characters.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Please enter a new file name.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \"Sorry, some parameters seem to be missing.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIORITY \u003d \"Alert! Priority should be a number between 0 and 20.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the deadline you entered is not in a recognised datetime format.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Please make sure to follow the datetime format as such:\\n\\t\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + DateTime.FORMAT + \"\\nExample: 06/06/2020 12:00am\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the date you entered is not in a recognised date format.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Please make sure to follow the date format as such:\\n\\t\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + DateTime.DATE_FORMAT + \"\\nExample: 07/07/2020\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_LIST_NUMBER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"The List number is not found on the list! Deletion is aborted.\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_TRAVERSE_ERROR \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"There seems to be an error when traversing. Moving back to Root...\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FAILED_DIRECTORY_TRAVERSAL \u003d \"Unable to traverse further.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DIRECTORY_NOT_FOUND \u003d \"Sorry, the next directory could not be found.\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DIRECTORY_LEVEL \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, unable to execute the command at the current directory level.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Either move to the appropriate directory level, or enter the full directory path.\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAMETERS \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Oh no! It seems that some invalid or missing parameters were found!\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PREFIX_FOUND \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"There seems to be duplicate prefix(es) in your input...\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_IO_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file.\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_SYSTEM_EXCEPTION \u003d \"Oh no! There was an error in retrieving your file. \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Please check that your file is not currently running.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Sorry, the file path entered is invalid.\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_ADD_FILE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the file does not exists. Please check the file path again.\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_SECURITY_EXCEPTION \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Oh no! File access was denied by device\u0027s security program.\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_OPEN \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"The following file(s) could not be opened as they cannot be found:\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND_DELETE \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Deletion completed.\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"However, note that the following file(s) could not be deleted completely from Nuke as they \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"could not be found:\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 68
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/ListCreator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " * A utility class to create a sorted list table from an Array List."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListCreator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String LIST_DIVIDER \u003d String.format(\"%s%s%s\\n\", \"+\", \"-\".repeat(98), \"+\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a general list table from a list of Strings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param listToShow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list to be converted to a table"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list table to show to the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String createGeneralListTable(ArrayList\u003cString\u003e listToShow) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder listTable \u003d new StringBuilder(String.format(\"%s\\n\", LIST_DIVIDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (String listItem : listToShow) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            listTable.append(String.format(\"%s\\n\", listItem));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        listTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return listTable.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a sorted module list table from a list of modules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param moduleList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of modules to be converted into a table"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The sorted module list table"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String createModuleListTable(ArrayList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder moduleListTable \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleListTable.append(createModuleListTableHeader());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleTitle \u003d (module.getTitle() !\u003d null) ? module.getTitle() : \"-NIL-\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            moduleListTable.append(String.format(\"%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(Integer.toString(id++), 4), 4), SEPARATOR,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleCode, 16), 16), SEPARATOR,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleTitle, 78), 78)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleListTable.append(String.format(\"Total modules: %d\\n\", moduleList.size()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        moduleListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return moduleListTable.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the header of the module list table."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The header of the module list table"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String createModuleListTableHeader() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder header \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(String.format(\"%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"NO\", 4), SEPARATOR,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE CODE\", 16), SEPARATOR,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE TITLE\", 78)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return header.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a sorted category list table from a list of categories."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param categoryList"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of categories to be converted into a table"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The sorted category list table"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String createCategoryListTable(ArrayList\u003cCategory\u003e categoryList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder categoryListTable \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryListTable.append(createCategoryListTableHeader());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Category category : categoryList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d category.getParent().getModuleCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String categoryName \u003d category.getCategoryName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String priority \u003d String.valueOf(category.getCategoryPriority());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            categoryListTable.append(String.format(\"%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(Integer.toString(id++), 4), 4), SEPARATOR,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleCode, 16), 16), SEPARATOR,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(categoryName, 72), 72), SEPARATOR,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(priority, 5), 5)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryListTable.append(String.format(\"Total categories: %d\\n\", categoryList.size()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        categoryListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return categoryListTable.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the header of the category list table."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The header of the category list table"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String createCategoryListTableHeader() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder header \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(String.format(\"%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"NO\", 4), SEPARATOR,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE\", 16), SEPARATOR,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"CATEGORY\", 72), SEPARATOR,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"PTY\", 5)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return header.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a sorted task list table from a list of tasks."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of tasks to be converted into a table"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The sorted task list table"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String createTaskListTable(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder taskListTable \u003d new StringBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskListTable.append(createTaskListTableHeader());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d task.getParent().getParent().getModuleCode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String categoryName \u003d task.getParent().getCategoryName();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String deadline \u003d task.getDeadline().isPresent() ? task.getDeadline().toShow() : \"-NIL-\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String priority \u003d String.valueOf(task.getPriority());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            String statusIcon \u003d task.getStatusIcon();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            taskListTable.append(String.format(\"%s%s%s%s%s%s%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(Integer.toString(id++), 4), 4), SEPARATOR,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleCode, 10), 10), SEPARATOR,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    centraliseText(fitText(categoryName, 16), 16), SEPARATOR,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(taskDescription, 25), 25), SEPARATOR,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(deadline, 28), 28), SEPARATOR,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                    centraliseText(fitText(priority, 5), 5), SEPARATOR,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(statusIcon, 6), 6)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskListTable.append(String.format(\"Total tasks: %d\\n\", taskList.size()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        taskListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return taskListTable.toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the header of the task list table."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The header of the task list table"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String createTaskListTableHeader() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder header \u003d new StringBuilder();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        header.append(String.format(\"%s%s%s%s%s%s%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"NO\", 4), SEPARATOR,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE\", 10), SEPARATOR,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                centraliseText(\"CATEGORY\", 16), SEPARATOR,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"TASK\", 25), SEPARATOR,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"DEADLINE\", 28), SEPARATOR,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                centraliseText(\"PTY\", 5), SEPARATOR,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                centraliseText(\"DONE\", 6)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return header.toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates a sorted file list table from a list of files."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param fileList"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The list of files to be converted into a table"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The sorted file list table"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String createFileListTable(ArrayList\u003cTaskFile\u003e fileList) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder fileListTable \u003d new StringBuilder();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileListTable.append(createFileListTableHeader());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int id \u003d 1;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (TaskFile file : fileList) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String moduleCode \u003d file.getParent().getParent().getParent().getModuleCode();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String categoryName \u003d file.getParent().getParent().getCategoryName();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String taskDescription \u003d file.getParent().getDescription();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String fileName \u003d file.getFileName();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fileListTable.append(String.format(\"%s%s%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(Integer.toString(id++), 4), 4), SEPARATOR,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(moduleCode, 15), 15), SEPARATOR,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(categoryName, 20), 20), SEPARATOR,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(taskDescription, 27), 27), SEPARATOR,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    centraliseText(fitText(fileName, 30), 30)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileListTable.append(String.format(\"Total files: %d\\n\", fileList.size()));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        fileListTable.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return fileListTable.toString();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the header of the task list table."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The header of the task list table"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String createFileListTableHeader() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder header \u003d new StringBuilder();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(String.format(\"%s%s%s%s%s%s%s%s%s\\n\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"NO\", 4), SEPARATOR,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"MODULE\", 15), SEPARATOR,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"CATEGORY\", 20), SEPARATOR,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"TASK\", 27), SEPARATOR,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                centraliseText(\"FILE\", 30)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        header.append(LIST_DIVIDER);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return header.toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Adds the specified number of spaces."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param numberOfSpaces"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The number of spaces to be added"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  A string containing the specified number of spaces"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String addSpaces(int numberOfSpaces) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \" \".repeat(numberOfSpaces);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Centralises the given text in a segment of given length by padding with spaces before and after the text."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The text to be centralised"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param segmentLength"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The length of the segment in which the text is centralised"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The centralised text"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String centraliseText(String text, int segmentLength) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int numberOfLeftSpaces \u003d (segmentLength - text.length()) / 2;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        int numberOfRightSpaces \u003d (segmentLength - text.length() + 1) / 2;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return addSpaces(numberOfLeftSpaces) + text + addSpaces(numberOfRightSpaces);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Fits the given text into a segment of given length, truncating the text with ellipses if the text exceeds"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * the segment length."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The text to be fitted"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param segmentLength"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The length of the segment in which the text is fitted"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The fitted text"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private static String fitText(String text, int segmentLength) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String ellipses \u003d \"...\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return (text.length() \u003e segmentLength) ? (text.substring(0, segmentLength - 3) + ellipses) : text;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 8,
      "iceclementi": 301
    }
  },
  {
    "path": "src/main/java/seedu/nuke/util/Message.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "import org.fusesource.jansi.Ansi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Directory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color COLOR_ALERT \u003d Ansi.Color.RED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color COLOR_OUTPUT \u003d Ansi.Color.WHITE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color COLOR_ASK_CONFIRMATION \u003d Ansi.Color.BLUE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final Ansi.Color COLOR_FRAME \u003d Ansi.Color.GREEN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \"      ___          ___          ___          ___     \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     /__/\\\\        /__/\\\\        /__/|        /  /\\\\    \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     \\\\  \\\\:\\\\       \\\\  \\\\:\\\\      |  |:|       /  /:/_   \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"      \\\\  \\\\:\\\\       \\\\  \\\\:\\\\     |  |:|      /  /:/ /\\\\  \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"  _____\\\\__\\\\:\\\\  ___  \\\\  \\\\:\\\\  __|  |:|     /  /:/ /:/_ \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" /__/::::::::\\\\/__/\\\\  \\\\__\\\\:\\\\/__/\\\\_|:|____/__/:/ /:/ /\\\\\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \" \\\\  \\\\:\\\\~~\\\\~~\\\\/\\\\  \\\\:\\\\ /  /:/\\\\  \\\\:\\\\/:::::/\\\\  \\\\:\\\\/:/ /:/\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"  \\\\  \\\\:\\\\  ~~~  \\\\  \\\\:\\\\  /:/  \\\\  \\\\::/~~~~  \\\\  \\\\::/ /:/ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"   \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/    \\\\  \\\\:\\\\       \\\\  \\\\:\\\\/:/  \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"    \\\\  \\\\:\\\\       \\\\  \\\\::/      \\\\  \\\\:\\\\       \\\\  \\\\::/   \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"     \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/        \\\\__\\\\/    \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_WELCOME_1 \u003d \"Welcome to NUKE Task Tracker!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_WELCOME_2 \u003d \"What would you like to do today?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String DIVIDER \u003d \"-\".repeat(100);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageTaskSuccessfullyList(int taskCount) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"There are (is) %d task(s) in the list!\\n\", taskCount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the command entered contains some unrecognised parameters starting from here:\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_CHECK_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Please check to make sure to follow the command format as such:\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND_WORD \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the command word at the start of your input is unrecognised.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EXTRA_PARAMETERS \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"There seems to be some extra parameters in the command.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Please check the command format again or enter help to find out more.\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_PREFIX_ALLOWED \u003d \"Sorry, no prefix allowed for this command.\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"Please enter a command.\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_MODULE_CODE \u003d \"Please enter a module code.\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_CATEGORY_NAME \u003d \"Please enter a category name.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_TASK_DESCRIPTION \u003d \"Please enter a task description.\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_FILE_NAME \u003d \"Please enter a file name.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_FILE_PATH \u003d \"Please enter a file path.\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_TAG_NAME \u003d \"Please enter a tag name.\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_SHOW_LIST \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_MODULES_TO_SHOW \u003d \"There are no modules to show.\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_CATEGORIES_TO_SHOW \u003d \"There are no categories to show.\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_TASKS_TO_SHOW \u003d \"There are no tasks to show.\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_FILES_TO_SHOW \u003d \"There are no files to show.\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DEADLINE_OR_PRIORITY \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Please choose either to sort by deadline or priority.\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_MODULES_FOUND \u003d \"Sorry. No modules found.\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_CATEGORIES_FOUND \u003d \"Sorry. No categories found.\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_TASKS_FOUND \u003d \"Sorry. No tasks found.\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_FILES_FOUND \u003d \"Sorry. No files found.\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"Here are valid commands and corresponding format:\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "    public static final String MESSAGE_TAG_ADDED \u003d \"Tag added!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_CATEGORY_EXCEED_LIMIT \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the category name cannot exceed 15 characters.\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_TASK_EXCEED_LIMIT \u003d \"Sorry, the task description cannot exceed 25 characters.\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_FILE_EXCEED_LIMIT \u003d \"Sorry, the file name cannot exceed 30 characters.\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    public static String messageAddModuleSuccess(String moduleCode, String title) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Module %s %s is added.\\n\", moduleCode, title);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageAddCategorySuccess(String categoryName) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Category %s is created.\\n\", categoryName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageAddTaskSuccess(String taskDescription) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! Task %s is created.\\n\", taskDescription);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageAddFileSuccess(String fileName) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"SUCCESS!! File %s is added.\\n\", fileName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"SUCCESS!! Module(s) have been deleted.\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_CATEGORY_SUCCESS \u003d \"SUCCESS!! Category(s) have been deleted.\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"SUCCESS!! Task(s) have been deleted.\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_FILE_SUCCESS \u003d \"SUCCESS!! Files(s) have been deleted.\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_DELETE_ABORTED \u003d \"The deletion is aborted.\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of a module."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The module to be deleted"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of the module"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteModule(Module toDelete) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Confirm delete %s %s?\\n\", toDelete.getModuleCode(), toDelete.getTitle());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of multiple modules."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredModules"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of modules"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices of the modules to be deleted from the list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of modules"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteModule(ArrayList\u003cModule\u003e filteredModules,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                    ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder promptMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptMessage.append(\"Confirm delete these modules?\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteModuleCode \u003d filteredModules.get(index).getModuleCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteTitle \u003d filteredModules.get(index).getTitle();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            promptMessage.append(String.format(\"%s %s\\n\", toDeleteModuleCode, toDeleteTitle));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptMessage.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to prompt user to enter the indices of the modules to be deleted from the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredModules"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of modules to be deleted"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to prompt the user to enter the indices"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messagePromptDeleteModuleIndices(ArrayList\u003cDirectory\u003e filteredModules) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d filteredModules.stream()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Module.class::cast)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \"Multiple matching modules were found.\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + ListCreator.createModuleListTable(modules)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\nEnter the list number(s) of the modules to delete.\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of a category."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The category to be deleted"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of the category"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteCategory(Category toDelete) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Confirm delete %s?\\n\", toDelete.getCategoryName());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of multiple categories."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredCategories"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of categories"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices of the categories to be deleted from the list"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of categories"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteCategory(ArrayList\u003cCategory\u003e filteredCategories,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                      ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder promptMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptMessage.append(\"Confirm delete these categories?\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteCategoryName \u003d filteredCategories.get(index).getCategoryName();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            promptMessage.append(String.format(\"%s\\n\", toDeleteCategoryName));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptMessage.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to prompt user to enter the indices of the categories to be deleted from the list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredCategories"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of categories to be deleted"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to prompt the user to enter the indices"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messagePromptDeleteCategoryIndices(ArrayList\u003cDirectory\u003e filteredCategories) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e categories \u003d filteredCategories.stream()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Category.class::cast)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \"Multiple matching categories were found.\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + ListCreator.createCategoryListTable(categories)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\nEnter the list number(s) of the categories to delete.\\n\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of a task."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The task to be deleted"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of the task"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteTask(Task toDelete) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Confirm delete %s?\\n\", toDelete.getDescription());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of multiple tasks."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredTasks"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of tasks"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices of the tasks to be deleted from the list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of tasks"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteTask(ArrayList\u003cTask\u003e filteredTasks, ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder promptMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptMessage.append(\"Confirm delete these tasks?\\n\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteTaskDescription \u003d filteredTasks.get(index).getDescription();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            promptMessage.append(String.format(\"%s\\n\", toDeleteTaskDescription));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptMessage.toString();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to prompt user to enter the indices of the tasks to be deleted from the list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredTasks"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of tasks to be deleted"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to prompt the user to enter the indices"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messagePromptDeleteTaskIndices(ArrayList\u003cDirectory\u003e filteredTasks) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d filteredTasks.stream()"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(Task.class::cast)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \"Multiple matching tasks were found.\\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + ListCreator.createTaskListTable(tasks)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\nEnter the list number(s) of the tasks to delete.\\n\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of a file."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDelete"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The file to be deleted"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of the file"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteFile(TaskFile toDelete) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return String.format(\"Confirm delete %s?\\n\", toDelete.getFileName());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to confirm deletion of multiple files."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredFiles"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param toDeleteIndices"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The indices of the files to be deleted from the list"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to confirm deletion of files"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messageConfirmDeleteFile(ArrayList\u003cTaskFile\u003e filteredFiles,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                  ArrayList\u003cInteger\u003e toDeleteIndices) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        StringBuilder promptMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        promptMessage.append(\"Confirm delete these files?\\n\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        for (int index : toDeleteIndices) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            String toDeleteFileName \u003d filteredFiles.get(index).getFileName();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            promptMessage.append(String.format(\"%s\\n\", toDeleteFileName));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return promptMessage.toString();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * Creates the message to prompt user to enter the indices of the files to be deleted from the list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @param filteredFiles"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The filtered list of files to be deleted"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     *  The message to prompt the user to enter the indices"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static String messagePromptDeleteFileIndices(ArrayList\u003cDirectory\u003e filteredFiles) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e files \u003d filteredFiles.stream()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .map(TaskFile.class::cast)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        return \"Multiple matching files were found.\\n\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + ListCreator.createFileListTable(files)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\nEnter the list number(s) of the files to delete.\\n\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_PROMPT_FORMAT \u003d \"Enter \u0027yes\u0027 to confirm or \u0027no\u0027 to abort.\\n\";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_INDICES \u003d \"Deletion aborted due to invalid index provided.\\n\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_DELETE \u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Attempting to delete the current or its parent\u0027s directory.\\nPlease move out of the directory first.\\n\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_MISSING_DIRECTORY_TO_DELETE \u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Please enter the name of the directory to delete.\\n\";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_DIRECTORY_TO_DELETE \u003d \"Sorry, there is nothing else to delete here.\\n\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_SPECIFIER \u003d"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the time specifier you entered is not recognised.\\n\""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Please make sure the time specifier entered is either:\\n\\t\""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"\u0027before\u0027, \u0027after\u0027 or \u0027on\u0027\\n\""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Alternatively, you can also enter \u0027over\u0027 without the date information to see all your overdue tasks.\\n\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"SUCCESS!! The module has been updated.\\n\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EDIT_CATEGORY_SUCCESS \u003d \"SUCCESS!! The category has been updated.\\n\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"SUCCESS!! The task has been updated.\\n\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_EDIT_FILE_SUCCESS \u003d \"SUCCESS!! The file has been updated.\\n\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_EDIT \u003d \"There is nothing to edit.\\n\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_MODULE \u003d \"Please enter a new module code to edit.\\n\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_CATEGORY \u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Please enter either a new category name or priority to edit.\\n\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_TASK \u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Please enter a new task description, priority or deadline to edit.\\n\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_EDIT_FILE \u003d \"Please enter a new file name to edit.\\n\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_REDO_SUCCESS \u003d \"SUCCESS!! Data has been reverted back to the next state.\\n\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"SUCCESS!! Data has been reverted to the previous state.\\n\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_OPEN_FILE_SUCCESS \u003d \"The files are opening now...\\n\";"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_NO_FILE_CHOSEN \u003d \"No file was chosen.\\n\";"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_NAME \u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \"Sorry, the name of the file you are adding contains words that begins with a symbol.\\n\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            + \"Please enter a new file name.\\n\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wangqinNick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 1,
      "wangqinNick": 13,
      "A11riseforme": 14,
      "iceclementi": 315
    }
  },
  {
    "path": "src/main/resources/main.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.effect.InnerShadow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003cVBox prefHeight\u003d\"700.0\" prefWidth\u003d\"1250.0\" style\u003d\"-fx-background-color: #bdb2a2;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.nuke.gui.controller.MainController\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \u003cVBox prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-background-color: #f0fafa;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \u003cVBox prefHeight\u003d\"123.0\" prefWidth\u003d\"1200.0\" style\u003d\"-fx-background-color: #bfd6db;\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" spacing\u003d\"5.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003cHBox fx:id\u003d\"overdueBox\" maxWidth\u003d\"308.0\" onMouseClicked\u003d\"#onClickOverdueTask\" prefHeight\u003d\"94.0\" prefWidth\u003d\"305.0\" style\u003d\"-fx-background-color: #dae7f2; -fx-border-color: #ff621f; -fx-border-width: 3; -fx-border-radius: 7; -fx-background-radius: 10;\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"88.0\" prefWidth\u003d\"131.0\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"overdueTaskCount\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"48.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                      \u003cVBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"160.0\" prefHeight\u003d\"88.0\" prefWidth\u003d\"160.0\" spacing\u003d\"2.0\" style\u003d\"-fx-background-color: #ff621f;\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                              \u003cLabel text\u003d\"OVERDUE\" textFill\u003d\"#403c39\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                  \u003cfont\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                      \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                  \u003c/font\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                              \u003cLabel text\u003d\"TASKS\" textFill\u003d\"#403c39\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                              \u003cInsets bottom\u003d\"10.0\" left\u003d\"20.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003ccursor\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003c/cursor\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                \u003cGridPane hgap\u003d\"5.0\" prefHeight\u003d\"94.0\" prefWidth\u003d\"887.0\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cVBox fx:id\u003d\"mondayBox\" alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#onClickDailyTask\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: #c1cbd4; -fx-border-radius: 7; -fx-background-color: #dae7f2; -fx-border-width: 3; -fx-background-radius: 10;\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #f53e2a; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                      \u003cLabel alignment\u003d\"CENTER\" text\u003d\"MONDAY\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                          \u003cfont\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                              \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                          \u003c/font\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                      \u003cLabel fx:id\u003d\"mondayTaskCount\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"mondayDate\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                            \u003c/children\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003ccursor\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/cursor\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cVBox fx:id\u003d\"tuesdayBox\" alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#onClickDailyTask\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: #c1cbd4; -fx-border-radius: 7; -fx-background-color: #dae7f2; -fx-border-width: 3; -fx-background-radius: 10;\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #ff8b1f; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel alignment\u003d\"CENTER\" text\u003d\"TUESDAY\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"tuesdayTaskCount\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"tuesdayDate\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003ccursor\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/cursor\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cVBox fx:id\u003d\"wednesdayBox\" alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#onClickDailyTask\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: #c1cbd4; -fx-border-radius: 7; -fx-background-color: #dae7f2; -fx-border-width: 3; -fx-background-radius: 10;\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #ffda1f; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel alignment\u003d\"CENTER\" text\u003d\"WEDNESDAY\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"wednesdayTaskCount\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"wednesdayDate\"\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003ccursor\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/cursor\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cVBox fx:id\u003d\"thursdayBox\" alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#onClickDailyTask\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: #c1cbd4; -fx-border-radius: 7; -fx-background-color: #dae7f2; -fx-border-width: 3; -fx-background-radius: 10;\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #8ed65e; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel alignment\u003d\"CENTER\" text\u003d\"THURSDAY\"\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"thursdayTaskCount\"\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"thursdayDate\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003ccursor\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/cursor\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cVBox fx:id\u003d\"fridayBox\" alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#onClickDailyTask\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: #c1cbd4; -fx-border-radius: 7; -fx-background-color: #dae7f2; -fx-border-width: 3; -fx-background-radius: 10;\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #87cee8; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel alignment\u003d\"CENTER\" text\u003d\"FRIDAY\"\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"fridayTaskCount\"\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"fridayDate\"\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003ccursor\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/cursor\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cVBox fx:id\u003d\"saturdayBox\" alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#onClickDailyTask\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: #c1cbd4; -fx-border-radius: 7; -fx-background-color: #dae7f2; -fx-border-width: 3; -fx-background-radius: 10;\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #99aef7; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel alignment\u003d\"CENTER\" text\u003d\"SATURDAY\"\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"saturdayTaskCount\"\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"saturdayDate\"\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003ccursor\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/cursor\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cVBox fx:id\u003d\"sundayBox\" alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#onClickDailyTask\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: #c1cbd4; -fx-border-radius: 7; -fx-background-color: #dae7f2; -fx-border-width: 3; -fx-background-radius: 10;\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: #d4a4fc; -fx-background-radius: 5;\"\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel alignment\u003d\"CENTER\" text\u003d\"SUNDAY\"\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"sundayTaskCount\"\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cLabel fx:id\u003d\"sundayDate\"\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003c/Label\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003ccursor\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cCursor fx:constant\u003d\"HAND\" /\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/cursor\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \u003cHBox prefHeight\u003d\"463.0\" prefWidth\u003d\"600.0\" spacing\u003d\"5.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003cVBox fx:id\u003d\"directoryBox\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"561.0\" prefWidth\u003d\"305.0\" spacing\u003d\"2.0\" style\u003d\"-fx-border-color: #a5c6d4; -fx-border-radius: 5; -fx-background-color: #f2fafc; -fx-background-radius: 10; -fx-border-width: 2;\" HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                \u003cLabel alignment\u003d\"TOP_CENTER\" text\u003d\"DIRECTORY LIST\" textFill\u003d\"#403c39\"\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cFont name\u003d\"Bauhaus 93\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cInsets bottom\u003d\"2.0\" left\u003d\"2.0\" right\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"463.0\" prefWidth\u003d\"360.0\" style\u003d\"-fx-background-color: #edf1f2; -fx-background-radius: 7; -fx-border-width: 1; -fx-border-radius: 5; -fx-border-color: #a5b5c2;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"110.0\" prefWidth\u003d\"1077.0\"\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cVBox fx:id\u003d\"consoleBox\" minHeight\u003d\"65.0\" prefHeight\u003d\"0.0\" prefWidth\u003d\"935.0\" /\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cHBox alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"directoryPathLabel\" alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                          \u003cFont name\u003d\"Consolas Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003cpadding\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                           \u003c/padding\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                \u003cScrollPane fx:id\u003d\"consoleScreenScrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" prefHeight\u003d\"510.0\" prefWidth\u003d\"1077.0\" style\u003d\"-fx-focus-color: transparent; -fx-faint-focus-color: transparent; -fx-background-color: transparent;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003cTextFlow fx:id\u003d\"consoleScreen\" lineSpacing\u003d\"1.0\" prefHeight\u003d\"450.0\" prefWidth\u003d\"900.0\" style\u003d\"-fx-border-color: lightgrey; -fx-border-radius: 3; -fx-background-color: #fafeff; -fx-background-radius: 10;\"\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                            \u003ceffect\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                                \u003cInnerShadow color\u003d\"#ababab\" height\u003d\"15.0\" radius\u003d\"7.0\" width\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                            \u003c/effect\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                        \u003c/TextFlow\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                    \u003c/content\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 427
    }
  },
  {
    "path": "src/test/java/seedu/nuke/NukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class NukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "iceclementi": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.RedoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.command.misc.RedoCommand.MESSAGE_REDO_AT_END;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_REDO_AT_END, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(0, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 38,
      "iceclementi": 3
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.misc.UndoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ScreenShotManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_UNDO_AT_BEGINNING, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"addm cs3230\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(2, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ScreenShotManager.saveScreenShot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"CS3235\", ModuleManager.getModuleList().get(0).getModuleCode());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 41,
      "iceclementi": 1
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/addcommand/AddCategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_CATEGORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageAddCategorySuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class AddCategoryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // base case"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(ModuleManager.getModuleList().get(0).getCategories().getCategoryList().size(), 4);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"addc test -m cs3235\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(5, ModuleManager.getModuleList().get(0).getCategories().getCategoryList().size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(messageAddCategorySuccess(\"test\"), result1.getFeedbackToUser());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // duplicate category"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"addc test -m cs3235\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(ModuleManager.getModuleList().get(0).getCategories().getCategoryList().size(), 5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_DUPLICATE_CATEGORY, result2.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // wrong module"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"addc test -m cs3230\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(ModuleManager.getModuleList().get(0).getCategories().getCategoryList().size(), 5);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result3.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // a new category"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result4 \u003d Executor.executeCommand(\"addc asdf -m cs3235\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(ModuleManager.getModuleList().get(0).getCategories().getCategoryList().size(), 6);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(messageAddCategorySuccess(\"asdf\"), result4.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 46
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/addcommand/AddFileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_ADD_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_FILE_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_MISSING_FILE_PATH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class AddFileCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addf save.txt -f C:\\\\save.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addf save.txt -m CS2113 -f C:\\\\save.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addf save.txt -m CS2113 -c Lab -f C:\\\\save.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addf save.txt -m CS2113 -c Lab -t read -f C:\\\\save.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addf save.txt -f C:\\\\save.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult resultSecond \u003d Executor.executeCommand(\"addf save.txt -t read -f C:\\\\save.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, resultSecond.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult resultThird \u003d Executor.executeCommand(\"addf save.txt -c Lab -t read -f C:\\\\save.txt\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, resultThird.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testLengthExceedFile() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"addt read -m CS2113 -c Lab -d tmr 2359\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd Lab\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd read\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addf abcdefghijklmnopqrstuvwxyzaaaaa\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_FILE_EXCEED_LIMIT, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNoFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"addt read -m CS2113 -c Lab -d tmr 2359\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd Lab\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd read\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addf save.txt\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_MISSING_FILE_PATH, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testInvalidPath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"addt read -m CS2113 -c Lab -d tmr 2359\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd Lab\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Executor.executeCommand(\"cd read\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addf save.txt -f C:\\\\save.txt\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_ADD_FILE_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 69,
      "iceclementi": 32
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/addcommand/AddModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageAddModuleSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class AddModuleCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(messageAddModuleSuccess(\"CS3235\", \"Computer Security\"), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // duplicate module"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(result1.getFeedbackToUser(), MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // non-exist module"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"addm cs12321\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(result2.getFeedbackToUser(), MESSAGE_MODULE_NOT_PROVIDED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // another valid module"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"addm cs3230\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(2, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 43
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/addcommand/AddTagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TAG_ADDED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class AddTagCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addg ur\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -m CS2113\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -m CS2113 -c Lab\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -m CS2113 -c Lab -t read\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -t read\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -c Lab -t read\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNormalTaskList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt read -c Lab\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -c Lab -t read\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_TAG_ADDED, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd Lab\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -t read\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_TAG_ADDED, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -t tp\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt quiz -c Assignment\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addg ur -c Assignment -t quiz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_TAG_ADDED, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 75,
      "iceclementi": 4
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/addcommand/AddTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_TASK_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.messageAddTaskSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class AddTaskCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // base case"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CategoryManager categoryManager \u003d ModuleManager.getModuleList().get(0).getCategories();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        TaskManager taskManager \u003d categoryManager.getCategoryList().get(0).getTasks();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(0, taskManager.getTaskList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // add a task with no deadline, priority"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"addt asdf -m cs3235 -c Lecture\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(messageAddTaskSuccess(\"asdf\"), result1.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, taskManager.getTaskList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"asdf\", taskManager.getTaskList().get(0).getDescription(), \"asdf\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"[N]\", taskManager.getTaskList().get(0).getStatusIcon());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, taskManager.getTaskList().get(0).getPriority());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // add a task with deadline, no priority"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"addt qwer -m cs3235 -c Lecture -d 12/4/2020 12:00\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(2, taskManager.getTaskList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, taskManager.getTaskList().get(1).getPriority());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"12/04/2020 12:00PM\", taskManager.getTaskList().get(1).getDeadline().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // add a task with priority, no deadline"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"addt zxcv -m cs3235 -c Lecture -p 10\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(3, taskManager.getTaskList().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(10, taskManager.getTaskList().get(2).getPriority());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // add a task with non-exist module"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result4 \u003d Executor.executeCommand(\"addt asdf -m cs1111 -c Lecture\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result4.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // add a task with non-exist category"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result5 \u003d Executor.executeCommand(\"addt asdf -m cs3235 -c asdfasdf\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_CATEGORY_NOT_FOUND, result5.getFeedbackToUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // add a duplicate task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result6 \u003d Executor.executeCommand(\"addt asdf -m cs3235 -c Lecture\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_DUPLICATE_TASK, result6.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result7 \u003d Executor.executeCommand(\"addt aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "                + \" -m cs3235 -c Lecture\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_TASK_EXCEED_LIMIT, result7.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 70
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/deletecommand/DeleteCategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_ABORTED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_CATEGORY_SUCCESS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_DELETE_INDICES;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_CATEGORIES_FOUND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteCategoryIndices;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class DeleteCategoryCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"delc\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_CATEGORIES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delc Lab\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_CATEGORIES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delc Lab -e\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_CATEGORIES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delc Lab -a\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_CATEGORIES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNormalCategoryList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm CS3235\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delc\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            categories.addAll(ModuleManager.getModule(\"CS2113\").getCategories().getCategoryList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            categories.addAll(ModuleManager.getModule(\"CS3235\").getCategories().getCategoryList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the module\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Comparator\u003cCategory\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                Comparator.comparing(category -\u003e category.getParent().getModuleCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Comparator\u003cCategory\u003e sortByCategory \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                Comparator.comparing(Category::getCategoryName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        categories.sort(sortByModule.thenComparing(sortByCategory));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(messagePromptDeleteCategoryIndices(new ArrayList\u003c\u003e(categories)), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INVALID_DELETE_INDICES, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delc Lab\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        categories.clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            categories.add(ModuleManager.getCategory(\"CS2113\", \"Lab\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            categories.add(ModuleManager.getCategory(\"CS3235\", \"Lab\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException | CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the module or category\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(messagePromptDeleteCategoryIndices(new ArrayList\u003c\u003e(categories)), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"1\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(\"Confirm delete these categories?\\nLab\\n\", result.getFeedbackToUser());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"y\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_DELETE_CATEGORY_SUCCESS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delc Tutorial -m CS2113\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            assertEquals(messageConfirmDeleteCategory(ModuleManager.getCategory(\"CS2113\", \"Tutorial\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                    result.getFeedbackToUser());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException | CategoryManager.CategoryNotFoundException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the module or category\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_DELETE_ABORTED, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 91,
      "iceclementi": 3
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/deletecommand/DeleteFileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_FILES_FOUND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class DeleteFileCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"delf\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_FILES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delf save.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_FILES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delf save.txt -m CS2113\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_FILES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * A JunitTest of DeleteFileCommand when the file list of all tasks of all modules is empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyFileList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delf\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_FILES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delf save.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_FILES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delf save.txt -m CS2113\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_FILES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 44,
      "iceclementi": 3
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/deletecommand/DeleteModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_DELETE_INDICES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_MODULES_FOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_PROMPT_FORMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteModuleIndices;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"delm CS2113\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_MODULES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_MODULES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNormalModuleList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm CS3235\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            modules.add(ModuleManager.getModule(\"CS2113\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            modules.add(ModuleManager.getModule(\"CS3235\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the module\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delm CS\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(messagePromptDeleteModuleIndices(new ArrayList\u003c\u003e(modules)), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INVALID_DELETE_INDICES, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delm CS -e\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_MODULES_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delm CS3235\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            assertEquals(messageConfirmDeleteModule(ModuleManager.getModule(\"CS3235\")), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the module\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        result \u003d Executor.executeCommand(\"x\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(MESSAGE_PROMPT_FORMAT, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"y\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_DELETE_MODULE_SUCCESS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 63,
      "iceclementi": 6
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/deletecommand/DeleteTaskCommand.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_ABORTED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_INVALID_DELETE_INDICES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_FOUND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.messageConfirmDeleteTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.messagePromptDeleteTaskIndices;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class DeleteTaskCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"delt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delt read\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delt read -m CS2113\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm CS3235\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delt read -e\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delt read -m CS2113\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNormalTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm CS3235\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt read -m CS2113 -c Lab\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt read handouts -m CS3235 -c Lecture\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt quiz -m CS2113 -c Tutorial\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt assignment2 -m CS3235 -c Assignment\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delt\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        tasks.addAll(ModuleManager.filterExact(\"\", \"\", \"\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Comparator\u003cTask\u003e sortByModule \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                Comparator.comparing(task -\u003e task.getParent().getParent().getModuleCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Comparator\u003cTask\u003e sortByCategory \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                Comparator.comparing(task -\u003e task.getParent().getCategoryName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Comparator\u003cTask\u003e sortByTask \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                Comparator.comparing(Task::getDescription);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Comparator\u003cTask\u003e sortByDeadline \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                Comparator.comparing(task -\u003e task.getDeadline().getDateTimeInSortFormat());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        Comparator\u003cTask\u003e sortByPriority \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                Comparator.comparing(Task::getPriority, Comparator.reverseOrder());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        tasks.sort(sortByModule.thenComparing(sortByCategory).thenComparing(sortByTask));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(messagePromptDeleteTaskIndices(new ArrayList\u003c\u003e(tasks)), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INVALID_DELETE_INDICES, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delt read\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            tasks.add(ModuleManager.getTask(\"CS2113\", \"Lab\", \"read\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            tasks.add(ModuleManager.getTask(\"CS3235\", \"Lecture\", \"read handouts\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException | CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                | TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the something\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(messagePromptDeleteTaskIndices(new ArrayList\u003c\u003e(tasks)), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"1\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(\"Confirm delete these tasks?\\nread\\n\", result.getFeedbackToUser());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_DELETE_ABORTED, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"delt read -e\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            assertEquals(messageConfirmDeleteTask(ModuleManager.getTask(\"CS2113\", \"Lab\", \"read\")),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                    result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException | CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                | TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the something\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"y\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_DELETE_TASK_SUCCESS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 110,
      "iceclementi": 5
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/editcommand/EditCategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_CATEGORY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_CATEGORY_SUCCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class EditCategoryCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt asdf -m cs3235 -c Assignment\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CategoryManager categoryManager \u003d ModuleManager.getModuleList().get(0).getCategories();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // base case."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edc Assignment -m cs3235 -c assignment\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_EDIT_CATEGORY_SUCCESS, result1.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"assignment\", categoryManager.getCategoryList().get(2).getCategoryName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, categoryManager.getCategoryList().get(2).getTasks().getTaskList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // non-exist module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"edc assignment1 -m asdf -c assignment\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result2.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // non-exist category"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"edc assignment1 -m cs3235 -c asdfasdf\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_CATEGORY_NOT_FOUND, result3.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // duplicate category"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result4 \u003d Executor.executeCommand(\"edc Lecture -m cs3235 -c assignment\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_DUPLICATE_CATEGORY, result4.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 51
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/editcommand/EditFileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK_FILE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_FILE_SUCCESS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_FILE_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class EditFileCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DirectoryTraverser.setCurrentLevelToRoot();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt read -m CS2113 -c Lab -d tmr 2359\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd Lab\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd read\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addf save.txt -f save.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addf asdf.txt -f save.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // base case"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf save.txt -f test.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_EDIT_FILE_SUCCESS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // no such module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf test.txt -m cs1010 -c Lab -t read -f asdf.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // no such category"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf test.txt -m cs2113 -c asdf -t read -f asdf.txt\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_CATEGORY_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // no such task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf test.txt -m cs2113 -c Lab -t asdf -f asdf.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // no such file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf qwer.txt -f test.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_TASK_FILE_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // duplicate file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf test.txt -f asdf.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_DUPLICATE_TASK_FILE, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // wrong directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd ..\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf test.txt -m cs2113 -c Lab -f asdf.txt\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf test.txt -m cs2113 -f asdf.txt\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"edf test.txt -f asdf.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 67
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/editcommand/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_MODULE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_PROVIDED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_EDIT_MODULE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class EditModuleCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // base case"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edm cs3235 -m cs3230\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_EDIT_MODULE_SUCCESS, result1.getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, ModuleManager.getModuleList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"CS3230\", ModuleManager.getModuleList().get(0).getModuleCode());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"Design and Analysis of Algorithms\", ModuleManager.getModuleList().get(0).getTitle());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"edm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(MESSAGE_NO_EDIT_MODULE, result2.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // edit to a non-exist module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"edm cs3230 -m asdfasdf\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_PROVIDED, result3.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // edit from a non-exist module"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result4 \u003d Executor.executeCommand(\"edm cs3235 -m cs1234\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result4.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //edit to a duplicate module"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result5 \u003d Executor.executeCommand(\"addm ifs4103\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result6 \u003d Executor.executeCommand(\"edm cs3230 -m ifs4103\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_DUPLICATE_MODULE, result6.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 49,
      "iceclementi": 2
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/editcommand/EditTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_DATETIME_FORMAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INVALID_PRIORITY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class EditTaskCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() throws CategoryManager.CategoryNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt asdf -m cs3235 -c Assignment -d 4/4/2020 12:00 -p 20\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CategoryManager categoryManager \u003d ModuleManager.getModuleList().get(0).getCategories();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        TaskManager taskManager \u003d categoryManager.getCategory(\"Assignment\").getTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // base case"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result1 \u003d Executor.executeCommand(\"edt asdf -m cs3235 -c Assignment -t qwer\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"qwer\", taskManager.getTaskList().get(0).getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result1 \u003d Executor.executeCommand(\"edt qwer -m cs3235 -c Assignment -d 3/4/2020 12:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"03/04/2020 12:00PM\", taskManager.getTaskList().get(0).getDeadline().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result1 \u003d Executor.executeCommand(\"edt qwer -m cs3235 -c Assignment -p 15\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result1.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(15, taskManager.getTaskList().get(0).getPriority());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result2 \u003d Executor.executeCommand(\"edt qwer -m cs3235 -c Assignment -p 30\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_INVALID_PRIORITY, result2.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(15, taskManager.getTaskList().get(0).getPriority());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // invalid deadline"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result3 \u003d Executor.executeCommand(\"edt qwer -m cs3235 -c Assignment -d asdfasdf\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_INVALID_DATETIME_FORMAT, result3.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(\"03/04/2020 12:00PM\", taskManager.getTaskList().get(0).getDeadline().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // non-exist module"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result4 \u003d Executor.executeCommand(\"edt qwer -m cs1234 -c Assignment -t asdf\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result4.getFeedbackToUser());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // non-exist category"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result5 \u003d Executor.executeCommand(\"edt qwer -m cs3235 -c asdf -t asdf\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_CATEGORY_NOT_FOUND, result5.getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // non-exist task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result6 \u003d Executor.executeCommand(\"edt aaaaaaaaa -m cs3235 -c Assignment -t asdf\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, result6.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // edit to duplicate task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result1 \u003d Executor.executeCommand(\"addt asdf -m cs3235 -c Assignment -d 4/4/2020 12:00 -p 20\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result7 \u003d Executor.executeCommand(\"edt qwer -m cs3235 -c Assignment -t asdf\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_DUPLICATE_TASK, result7.getFeedbackToUser());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 76
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/editcommand/MarkAsDoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_CATEGORY_NOT_FOUND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_TASK_NOT_FOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_EDIT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class MarkAsDoneCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"done\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done read\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done read -m CS2113 -c Lab\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done read\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done read -c Big Lab\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_CATEGORY_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd Lab\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done read\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done read -m CS2113 -c Lab\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNormalTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm CS3235\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt Big Lab Work -m CS2113 -c Lab -d 25/03/2020 0600\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt lab1 -m CS3235 -c Lab\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt watch webcast -m CS3235 -c Lecture\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt Tutorial 6 -m CS2113 -c Tutorial\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd Lab\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done Big Lab Work\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done Tutorial 6\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_TASK_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done lab1 -m CS3235\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"done lab1 -m CS3235 -c Lab\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_EDIT_TASK_SUCCESS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 83,
      "iceclementi": 4
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/filtercommand/listcommand/DueCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_TO_SHOW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class DueCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt test1 -m cs3235 -c Assignment -d 4/2/2020 12:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt test2 -m cs3235 -c Assignment -d 5/2/2020 12:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt test3 -m cs3235 -c Assignment -d 6/2/2020 12:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt test4 -m cs3235 -c Assignment -d 7/2/2020 12:00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt test5 -m cs3235 -c Assignment -d 8/2/2020 12:00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        //overdue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"due over\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(5, result.getShownList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // on 6/2/2020"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"due on 6/2/2020\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, result.getShownList().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // before 6/2/2020"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"due before 6/2/2020\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(2, result.getShownList().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // after 6/2/2020"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"due after 6/2/2020\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(2, result.getShownList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // on a impossible day"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"due on 6/2/2220\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // after a impossible day"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"due on 6/2/2220\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // before a impossible day"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"due on 6/2/1999\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 62
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/filtercommand/listcommand/ListCategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.storage.StoragePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_CATEGORIES_TO_SHOW;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class ListCategoryCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d ModuleLoader.load(StoragePath.NUS_MODULE_LIST_PATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise(modulesMap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm cs3235\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm cs3230\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addc test -m cs3235\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addc test1 -m cs3230\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addc test2 -m cs3235\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // lsc"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsc\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(11, result.getShownList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // lsc asdf"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsc asdf\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(MESSAGE_NO_CATEGORIES_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // lsc test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsc test\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(3, result.getShownList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // lsc test -m cs3230"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsc test -m cs3230\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, result.getShownList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // lsc test -m cs3235"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsc test -m cs3235\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(2, result.getShownList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // lsc test -e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsc test -e\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(1, result.getShownList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 54
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/filtercommand/listcommand/ListModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_MODULES_TO_SHOW;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class ListModuleCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"lsm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_MODULES_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsm CS\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_MODULES_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNormalModuleList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm CS3235\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm LAK3202\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            modules.add(ModuleManager.getModule(\"CS2113\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            modules.add(ModuleManager.getModule(\"CS3235\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            modules.add(ModuleManager.getModule(\"LAK3202\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the module\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(DirectoryLevel.MODULE, result.getDirectoryLevel());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(modules, result.getShownList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(null, result.getHelpGuide());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsm CS\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        modules.remove(2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(DirectoryLevel.MODULE, result.getDirectoryLevel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(modules, result.getShownList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(null, result.getHelpGuide());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsm CS -e\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_MODULES_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsm LAK3202 -e\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        modules.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            modules.add(ModuleManager.getModule(\"LAK3202\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the module\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(DirectoryLevel.MODULE, result.getDirectoryLevel());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(modules, result.getShownList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(null, result.getHelpGuide());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 74,
      "iceclementi": 3
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/filtercommand/listcommand/ListModuleTasksDeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_INCORRECT_DIRECTORY_LEVEL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.ExceptionMessage.MESSAGE_MODULE_NOT_FOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_TO_SHOW;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.messageTaskSuccessfullyList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * Junit test class to test ListModuleTasksDeadlineCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class ListModuleTasksDeadlineTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyModuleList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"lsmtd\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_INCORRECT_DIRECTORY_LEVEL, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsmtd CS2113\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_MODULE_NOT_FOUND, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsmtd CS2113\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd CS2113\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsmtd\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNormalTaskList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt read -m CS2113 -c Lab -d 28-3-2020 2359\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt quiz -m CS2113 -c Assignment -d 28-3-2020 1200\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt write -m CS2113 -c Lab\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            tasks.add(ModuleManager.getTask(\"CS2113\", \"Assignment\", \"quiz\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            tasks.add(ModuleManager.getTask(\"CS2113\", \"Lab\", \"read\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            tasks.add(ModuleManager.getTask(\"CS2113\", \"Lab\", \"write\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException | CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                | TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find something\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lsmtd CS2113\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(messageTaskSuccessfullyList(3), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(DirectoryLevel.TASK, result.getDirectoryLevel());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(null, result.getHelpGuide());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(tasks, result.getShownList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 80,
      "iceclementi": 3
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/filtercommand/listcommand/ListTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Root;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_TO_SHOW;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_SHOW_LIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class ListTaskCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"lst\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lst lab\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testNormalTaskList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(new Root());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addm CS3235\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lst\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt Big Lab Work -m CS2113 -c Lab -d 25/03/2020 0600\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt lab1 -m CS3235 -c Lab\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt watch webcast -m CS3235 -c Lecture\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt Tutorial -m CS2113 -c Tutorial\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lst Tu -e\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lst watch\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            tasks.add(ModuleManager.getTask(\"CS3235\", \"Lecture\", \"watch webcast\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException | CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                | TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the task\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(tasks, result.getShownList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(DirectoryLevel.TASK, result.getDirectoryLevel());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        result \u003d Executor.executeCommand(\"lst lab\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            tasks.add(ModuleManager.getTask(\"CS2113\", \"Lab\", \"Big Lab Work\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            tasks.add(ModuleManager.getTask(\"CS3235\", \"Lab\", \"lab1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException | CategoryManager.CategoryNotFoundException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "                | TaskManager.TaskNotFoundException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "            System.out.println(\"Cannot find the task\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(MESSAGE_SHOW_LIST, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(tasks, result.getShownList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(DirectoryLevel.TASK, result.getDirectoryLevel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 74,
      "iceclementi": 3
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/filtercommand/listcommand/ListTaskSortedCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.command.filtercommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static seedu.nuke.util.Message.MESSAGE_NO_TASKS_TO_SHOW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * Junit test class to test ListAllTasksDeadlineCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "public class ListTaskSortedCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testTasksCounting() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Command command \u003d new ListTaskSortedCommand(\"\", true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.execute(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (result.getDirectoryLevel() \u003d\u003d DirectoryLevel.TASK) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(ModuleManager.countAllTasks(), result.getShownList().size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(0, ModuleManager.countAllTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Command command \u003d new Parser().parseCommand(ListTaskSortedCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        CommandResult result \u003d Executor.execute(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        if (ModuleManager.countAllTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(MESSAGE_NO_TASKS_TO_SHOW, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 23,
      "A11riseforme": 1,
      "iceclementi": 17
    }
  },
  {
    "path": "src/test/java/seedu/nuke/command/misc/ChangeDirectoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "package seedu.nuke.command.misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.Executor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.DirectoryLevel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import seedu.nuke.directory.DirectoryTraverser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "class ChangeDirectoryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DirectoryTraverser.setCurrentLevelToRoot();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        CommandResult result \u003d Executor.executeCommand(\"addm CS2113\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"addt asdf -m cs2113 -c Assignment\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // cd cs2113"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd cs2113\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(DirectoryLevel.MODULE, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // cd .."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd ..\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(DirectoryLevel.ROOT, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // cd cs2113, cd Assignment"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd cs2113\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd Assignment\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(DirectoryLevel.CATEGORY, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        // cd asdf"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        result \u003d Executor.executeCommand(\"cd asdf\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        assertEquals(DirectoryLevel.TASK, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 39
    }
  },
  {
    "path": "src/test/java/seedu/nuke/commandtest/ListModuleDeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "package seedu.nuke.commandtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.Nuke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import seedu.nuke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " * Junit test class to test ListModuleTasksDeadlineCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "public class ListModuleDeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private Nuke nuke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     * constructor of this class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public ListModuleDeadlineTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //    nuke \u003d new Nuke();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //    command \u003d new ListModuleTasksDeadlineCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //} catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //    return;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        //        //}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testTasksCounting() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(0, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "        assertEquals(0, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HAOYUN49"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HAOYUN49": 32,
      "iceclementi": 7
    }
  },
  {
    "path": "src/test/java/seedu/nuke/directory/CategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class CategoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Module module \u003d new Module(\"CS2113T\", \"Software Engineering \u0026 Object-Oriented Programming\", \"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Category category \u003d new Category(module, \"Lab\", 4);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetCategoryName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"Lab\", category.getCategoryName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        category.setCategoryName(\"Tutorial\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"Tutorial\", category.getCategoryName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetCategoryPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(4, category.getCategoryPriority());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        category.setCategoryPriority(7);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(7, category.getCategoryPriority());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTasks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(0, category.getTasks().getTaskList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(new ArrayList\u003cTask\u003e(), category.getTasks().getTaskList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getParent() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, category.getParent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getLevel() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.CATEGORY, category.getLevel());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isSameCategory() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(category.isSameCategory(\"Lab\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(category.isSameCategory(\"lab\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(category.isSameCategory(\"La\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d \"Category Name: Lab\\nModule Code: CS2113T\\nPriority: 4\\nNumber of Tasks: 0\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, category.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 58
    }
  },
  {
    "path": "src/test/java/seedu/nuke/directory/DirectoryTraverserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.CategoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskFileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DataNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DirectoryTraversalOutOfBoundsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.DuplicateDataException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.IncorrectDirectoryLevelException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.exception.ModuleNotProvidedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class DirectoryTraverserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Root root \u003d new Root();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Module module \u003d new Module(\"CS2113T\", \"Software Engineering \u0026 Object-Oriented Programming\", \"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Category category \u003d new Category(module, \"Lab Work\", 4);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Task task \u003d new Task(category, \"do sequence diagram\", new DateTime(), 3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TaskFile file \u003d new TaskFile(task, \"seq_diag\", \"filePath\", \"originalFilePath\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String noKeyword \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void initialise() throws DuplicateDataException, ModuleNotProvidedException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.add(module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        module.getCategories().add(category);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        category.getTasks().add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.getFiles().add(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getCurrentDirectory() throws DirectoryTraversalOutOfBoundsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryTraverser.getCurrentDirectoryLevel(), DirectoryLevel.ROOT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseDown(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.MODULE, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, DirectoryTraverser.getCurrentDirectory());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseDown(category);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.CATEGORY, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, DirectoryTraverser.getCurrentDirectory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.FILE, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(file, DirectoryTraverser.getCurrentDirectory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseUp();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.TASK, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(task, DirectoryTraverser.getCurrentDirectory());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseUp();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.CATEGORY, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, DirectoryTraverser.getCurrentDirectory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(root);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.ROOT, DirectoryTraverser.getCurrentDirectoryLevel());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void traverse_invalid() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.traverseUp();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should throw an exception here!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DirectoryTraversalOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.traverseDown(file);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should throw an exception here!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DirectoryTraversalOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void findNextDirectory() throws DirectoryTraversalOutOfBoundsException, DataNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, DirectoryTraverser.findNextDirectory(\"CS2113T\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(file, DirectoryTraverser.findNextDirectory(\"seq_diag\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(category);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(task, DirectoryTraverser.findNextDirectory(\"do sequence diagram\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.findNextDirectory(\"directoryName\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should throw an exception here since this is the furthest directory.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DirectoryTraversalOutOfBoundsException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(module);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, DirectoryTraverser.findNextDirectory(\"Lab Work\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.findNextDirectory(\"Lab Wok\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should throw an exception here since incorrect name.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DataNotFoundException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getFullPath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expectedRootPath \u003d \"root\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expectedRootPath, DirectoryTraverser.getFullPath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(module);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expectedModulePath \u003d \"root / CS2113T\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expectedModulePath, DirectoryTraverser.getFullPath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(category);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expectedCategoryPath \u003d \"root / CS2113T / Lab Work\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expectedCategoryPath, DirectoryTraverser.getFullPath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expectedTaskPath \u003d \"root / CS2113T / Lab Work / do sequence diagram\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expectedTaskPath, DirectoryTraverser.getFullPath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expectedFilePath \u003d \"root / CS2113T / Lab Work / do sequence diagram / seq_diag\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expectedFilePath, DirectoryTraverser.getFullPath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getBaseModule() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(module, DirectoryTraverser.getBaseModule());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(module);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, DirectoryTraverser.getBaseModule());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(category);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, DirectoryTraverser.getBaseModule());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(task);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, DirectoryTraverser.getBaseModule());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, DirectoryTraverser.getBaseModule());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getBaseCategory() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(category, DirectoryTraverser.getBaseCategory());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(module);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(category, DirectoryTraverser.getBaseCategory());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(category);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, DirectoryTraverser.getBaseCategory());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(task);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, DirectoryTraverser.getBaseCategory());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, DirectoryTraverser.getBaseCategory());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getBaseTask() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(task, DirectoryTraverser.getBaseTask());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(module);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(task, DirectoryTraverser.getBaseTask());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(category);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(task, DirectoryTraverser.getBaseTask());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(task);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(task, DirectoryTraverser.getBaseTask());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(task, DirectoryTraverser.getBaseTask());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getBaseFile() throws IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(file, DirectoryTraverser.getBaseFile());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(module);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(file, DirectoryTraverser.getBaseFile());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(category);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(file, DirectoryTraverser.getBaseFile());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(task);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertEquals(file, DirectoryTraverser.getBaseFile());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(file, DirectoryTraverser.getBaseFile());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getModuleDirectory() throws ModuleManager.ModuleNotFoundException, IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, DirectoryTraverser.getModuleDirectory(\"CS2113T\"));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.getModuleDirectory(\"CS1101\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since no such module exist.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (ModuleManager.ModuleNotFoundException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.getModuleDirectory(noKeyword);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since directory is too low.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(module);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(module, DirectoryTraverser.getModuleDirectory(noKeyword));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getCategoryDirectory() throws ModuleManager.ModuleNotFoundException,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            CategoryManager.CategoryNotFoundException, IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, DirectoryTraverser.getCategoryDirectory(\"CS2113T\", \"Lab Work\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(category);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, DirectoryTraverser.getCategoryDirectory(noKeyword, noKeyword));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.getCategoryDirectory(\"cs1010\", noKeyword);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since incorrect module.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTaskDirectory() throws ModuleManager.ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException, IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(task, DirectoryTraverser.getTaskDirectory(\"CS2113T\", \"Lab Work\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"do sequence diagram\"));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(task);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(task, DirectoryTraverser.getTaskDirectory(noKeyword, noKeyword, noKeyword));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.getTaskDirectory(\"cs1010\", noKeyword, noKeyword);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since incorrect module.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.getTaskDirectory(\"CS2113T\", \"No Work\", noKeyword);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since incorrect category.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getFileDirectory() throws ModuleManager.ModuleNotFoundException, CategoryManager.CategoryNotFoundException,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            TaskManager.TaskNotFoundException, TaskFileManager.TaskFileNotFoundException,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            IncorrectDirectoryLevelException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(file, DirectoryTraverser.getFileDirectory(\"CS2113T\", \"Lab Work\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"do sequence diagram\", \"seq_diag\"));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DirectoryTraverser.traverseTo(file);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(file, DirectoryTraverser.getFileDirectory(noKeyword, noKeyword, noKeyword, noKeyword));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.getFileDirectory(\"cs1010\", noKeyword, noKeyword, noKeyword);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since incorrect module.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.getFileDirectory(\"CS2113T\", \"No Work\", noKeyword, noKeyword);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since incorrect category.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DirectoryTraverser.getFileDirectory(\"CS2113T\", \"Lab Work\", \"do class diagram\", noKeyword);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Exception should be thrown since incorrect task.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (IncorrectDirectoryLevelException e) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 336
    }
  },
  {
    "path": "src/test/java/seedu/nuke/directory/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class ModuleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Module module \u003d new Module(\"CS2113T\", \"Software Engineering \u0026 Object-Oriented Programming\", \"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetModuleCode() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"CS2113T\", module.getModuleCode());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        module.setModuleCode(\"CS2113\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"CS2113\", module.getModuleCode());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"Software Engineering \u0026 Object-Oriented Programming\", module.getTitle());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        module.setTitle(\"SE \u0026 OOP\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"SE \u0026 OOP\", module.getTitle());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"\", module.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        module.setDescription(\"Most Exciting Module of 2020!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"Most Exciting Module of 2020!\", module.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getCategories() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        // Default 4 categories inside: Lecture, Tutorial, Lab and Assignment"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(4, module.getCategories().getCategoryList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getParent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.ROOT, module.getParent().getLevel());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getLevel() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.MODULE, module.getLevel());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isSameModule() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(module.isSameModule(\"CS2113T\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(module.isSameModule(\"cs2113t\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(module.isSameModule(\"CS2113\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(module.isSameModule(\"CS\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d \"Module Code: CS2113T\\nModule Title: Software Engineering \u0026 Object-Oriented Programming\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Number of Categories: 4\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, module.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 63
    }
  },
  {
    "path": "src/test/java/seedu/nuke/directory/RootTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.data.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class RootTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Root root \u003d new Root();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getParent() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertNull(root.getParent());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getLevel() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.ROOT, root.getLevel());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ModuleManager.initialise();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d \"Root\\nNumber of Modules: 0\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, root.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 28
    }
  },
  {
    "path": "src/test/java/seedu/nuke/directory/TaskFileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class TaskFileTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Module module \u003d new Module(\"CS1231\", \"Discrete Structures\", \"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Category category \u003d new Category(module, \"Lecture\", 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Task task \u003d new Task(category, \"read chapter 6 notes\", new DateTime(), 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private TaskFile file \u003d new TaskFile(task, \"notes_6\", \"filePath\", \"originalFilePath\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetFileName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        file.setFileName(\"notes_8\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"notes_8\", file.getFileName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        file.setFilePath(\"newFilePath\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"newFilePath\", file.getFilePath());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getOriginalFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"originalFilePath\", file.getOriginalFilePath());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getParent() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(task, file.getParent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getLevel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.FILE, file.getLevel());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isSameFile() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(file.isSameFile(\"notes_6\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(file.isSameFile(\"Notes_6\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(file.isSameFile(\"x\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"File Name: notes_6\\nModule Code: CS1231\\nCategory Name: Lecture\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Task Description: read chapter 6 notes\\nOriginal File Path: originalFilePath\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, file.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 58
    }
  },
  {
    "path": "src/test/java/seedu/nuke/directory/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.directory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.util.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Module module \u003d new Module(\"CS1231\", \"Discrete Structures\", \"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Category category \u003d new Category(module, \"Lecture\", 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private Task task \u003d new Task(category, \"read chapter 6 notes\", new DateTime(), 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetTag() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(0, task.getTags().size());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"[]\", task.getTag());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.setTag(new ArrayList\u003c\u003e(Arrays.asList(\"urgent\", \"free time\", \"todo\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(3, task.getTags().size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"[urgent, free time, todo]\", task.getTag());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.removeTag(\"urgent\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(2, task.getTags().size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"[free time, todo]\", task.getTag());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.removeAllTags();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(0, task.getTags().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"[]\", task.getTag());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getFiles() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(0, task.getFiles().getFileList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(new ArrayList\u003cTaskFile\u003e(), task.getFiles().getFileList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"read chapter 6 notes\", task.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.setDescription(\"read chapter 7 notes\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"read chapter 7 notes\", task.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetDeadline() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(task.getDeadline().isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.setDeadline(new DateTime(LocalDate.of(2020, 5, 5), LocalTime.of(12, 30)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"05/05/2020 12:30PM\", task.getDeadline().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetPriority() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(1, task.getPriority());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.setPriority(3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(3, task.getPriority());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getAndSetDone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"[N]\", task.getStatusIcon());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"[Y]\", task.getStatusIcon());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getParent() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(category, task.getParent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getLevel() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DirectoryLevel.TASK, task.getLevel());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isSameTask() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(task.isSameTask(\"read chapter 6 notes\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(task.isSameTask(\"read chapter 20 notes\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(task.isSameTask(\"x\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"Task Description: read chapter 6 notes\\nModule Code: CS1231\\nCategory Name: Lecture\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Deadline: -\\nPriority: 1\\nDone Status: Incomplete\\nTags: -\\nNumber of Files: 0\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, task.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        task.setTag(new ArrayList\u003c\u003e(Arrays.asList(\"urgent\", \"free time\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expectedSecond \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"Task Description: read chapter 6 notes\\nModule Code: CS1231\\nCategory Name: Lecture\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Deadline: -\\nPriority: 1\\nDone Status: Incomplete\\nTags: urgent, free time\\nNumber of Files: 0\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expectedSecond, task.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 101
    }
  },
  {
    "path": "src/test/java/seedu/nuke/util/DateTimeFormatTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class DateTimeFormatTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDateTime_emptyString() throws DateTimeFormat.InvalidDateTimeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime emptyDateTime \u003d DateTimeFormat.stringToDateTime(\"  \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(emptyDateTime.isPresent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime emptyDateTimeSecond \u003d DateTimeFormat.stringToDateTime(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(emptyDateTimeSecond.isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDateTime_dateOnly() throws DateTimeFormat.InvalidDateTimeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime dateTime \u003d DateTimeFormat.stringToDateTime(\"1/1/20\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isPresent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"01/01/2020\", dateTime.getDateString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"11:59PM\", dateTime.getTimeString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDateTime_timeOnly() throws DateTimeFormat.InvalidDateTimeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime dateTime \u003d DateTimeFormat.stringToDateTime(\"11am\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now(), dateTime.getDate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"11:00AM\", dateTime.getTimeString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDateTime_bothDateAndTime() throws DateTimeFormat.InvalidDateTimeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime dateTime \u003d DateTimeFormat.stringToDateTime(\"monday 7.00\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.getNextDateOfDay(DayOfWeek.MONDAY), dateTime.getDate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"07:00AM\", dateTime.getTimeString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDateTime_moreThanTwoParameters() throws DateTimeFormat.InvalidDateTimeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTime dateTime \u003d DateTimeFormat.stringToDateTime(\"wed 7.00 fri\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTime dateTime \u003d DateTimeFormat.stringToDateTime(\"1 2 3 4 5\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDateTime_invalidDateTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDateTime(\"x_x 6am\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDateTime(\"tue 123456\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDate_emptyDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now(), DateTimeFormat.stringToDate(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDate() throws DateTimeFormat.InvalidDateTimeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now(), DateTimeFormat.stringToDate(\"today\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now(), DateTimeFormat.stringToDate(\"tdy\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(1), DateTimeFormat.stringToDate(\"tomorrow\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(1), DateTimeFormat.stringToDate(\"tmr\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now().minusDays(1), DateTimeFormat.stringToDate(\"yesTerDay\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now().minusDays(1), DateTimeFormat.stringToDate(\"YST\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.getNextDateOfDay(DayOfWeek.MONDAY), DateTimeFormat.stringToDate(\"Mon\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.getNextDateOfDay(DayOfWeek.TUESDAY), DateTimeFormat.stringToDate(\"TuEsDaY\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.getNextDateOfDay(DayOfWeek.WEDNESDAY), DateTimeFormat.stringToDate(\"wed\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.getNextDateOfDay(DayOfWeek.THURSDAY), DateTimeFormat.stringToDate(\"THU\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.getNextDateOfDay(DayOfWeek.FRIDAY), DateTimeFormat.stringToDate(\"Fri\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.getNextDateOfDay(DayOfWeek.SATURDAY), DateTimeFormat.stringToDate(\"sAT\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.getNextDateOfDay(DayOfWeek.SUNDAY), DateTimeFormat.stringToDate(\"sundaY\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.of(2020, 10, 10), DateTimeFormat.stringToDate(\"101020\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.of(2020, 12, 6), DateTimeFormat.stringToDate(\"6/12\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.of(2006, 4, 3), DateTimeFormat.stringToDate(\"3-4-06\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.of(2020, 4, 9), DateTimeFormat.stringToDate(\"9/04\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToDate_invalidDate() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDate(\"0/1/20\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDate(\"32/1/20\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDate(\"1/0\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDate(\"1/13\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToDate(\"abc\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToTime_emptyTime() throws DateTimeFormat.InvalidTimeException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertNull(DateTimeFormat.stringToTime(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToTime() throws DateTimeFormat.InvalidTimeException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalTime.of(13, 10), DateTimeFormat.stringToTime(\"1:10pM\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalTime.of(3, 0), DateTimeFormat.stringToTime(\"3\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalTime.of(6, 1), DateTimeFormat.stringToTime(\"601\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalTime.of(19, 6), DateTimeFormat.stringToTime(\"7.06pm\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void stringToTime_invalidDate() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToTime(\"1/1/20\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToTime(\"8:60pm\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToTime(\"25:30\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToTime(\"12p\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            DateTimeFormat.stringToTime(\"a\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            fail(\"Should catch a datetime exception here\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        } catch (DateTimeFormat.InvalidDateTimeException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 203
    }
  },
  {
    "path": "src/test/java/seedu/nuke/util/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime dateTime \u003d new DateTime(LocalDate.of(2020, 8, 8), LocalTime.of(16, 38));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime dateTimeSecond \u003d new DateTime(LocalTime.of(18, 0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DateTime emptyDateTime \u003d new DateTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isPresent() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isPresent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(emptyDateTime.isPresent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.stringToDate(\"08/08/2020\"), dateTime.getDate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(LocalDate.now(), dateTimeSecond.getDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getTime() throws DateTimeFormat.InvalidTimeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(DateTimeFormat.stringToTime(\"04:38PM\"), dateTime.getTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void getDateTimeInSortFormat() throws DateTimeFormat.InvalidDateTimeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"202008081638\", dateTime.getDateTimeInSortFormat());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"__\", emptyDateTime.getDateTimeInSortFormat());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_onDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"8/8\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isOn_notOnDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"12-09-20\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isOn(toCompare));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_beforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isBefore_notBeforeDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isBefore(toCompare));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_afterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"3/6/1997\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertTrue(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void isAfter_notAfterDate() throws DateTimeFormat.InvalidDateException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        LocalDate toCompare \u003d DateTimeFormat.stringToDate(\"09/09\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertFalse(dateTime.isAfter(toCompare));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void toShow() throws DateTimeFormat.InvalidTimeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime today \u003d new DateTime(LocalDate.now(), DateTimeFormat.stringToTime(\"2359\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"today \" + today.getTimeString(), today.toShow());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime tomorrow \u003d new DateTime(LocalDate.now().plusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"tomorrow \" + tomorrow.getTimeString(), tomorrow.toShow());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime yesterday \u003d new DateTime(LocalDate.now().minusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(yesterday.getDateString() + \" \" + yesterday.getTimeString() + \" [OVER!]\", yesterday.toShow());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime weekAfter \u003d new DateTime(LocalDate.now().plusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekAfter.getDateString() + \" \" + weekAfter.getTimeString(), weekAfter.toShow());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime weekBefore \u003d new DateTime(LocalDate.now().minusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekBefore.getDateString() + \" \" + weekBefore.getTimeString() + \" [OVER!]\", weekBefore.toShow());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        DateTime today \u003d new DateTime(LocalDate.now(), LocalTime.now());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(today.getDateString() + \" \" + today.getTimeString(), today.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime tomorrow \u003d new DateTime(LocalDate.now().plusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(tomorrow.getDateString() + \" \" + tomorrow.getTimeString(), tomorrow.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime yesterday \u003d new DateTime(LocalDate.now().minusDays(1), LocalTime.now());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(yesterday.getDateString() + \" \" + yesterday.getTimeString(), yesterday.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime weekAfter \u003d new DateTime(LocalDate.now().plusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekAfter.getDateString() + \" \" + weekAfter.getTimeString(), weekAfter.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "        DateTime weekBefore \u003d new DateTime(LocalDate.now().minusWeeks(1), LocalTime.now());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(weekBefore.getDateString() + \" \" + weekBefore.getTimeString(), weekBefore.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 10,
      "iceclementi": 102
    }
  },
  {
    "path": "src/test/java/seedu/nuke/util/DummyModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class DummyModuleTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private DummyModule dummyModule \u003d new DummyModule();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void setModuleCode() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        dummyModule.setModuleCode(\"CS2113T\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"CS2113T\", dummyModule.getModuleCode());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void setTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        dummyModule.setTitle(\"Computer Organisation\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(\"Computer Organisation\", dummyModule.getTitle());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 23
    }
  },
  {
    "path": "src/test/java/seedu/nuke/util/ListCreatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "package seedu.nuke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import seedu.nuke.directory.TaskFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "class ListCreatorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    private final String divider \u003d String.format(\"%s%s%s\\n\", \"+\", \"-\".repeat(98), \"+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void createGeneralListTable() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cString\u003e listToShow \u003d new ArrayList\u003c\u003e(Arrays.asList(\"Test\", \"General\", \"List\", \"Table\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d divider + \"\\nTest\\nGeneral\\nList\\nTable\\n\" + divider;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, ListCreator.createGeneralListTable(listToShow));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void createModuleListTable() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cModule\u003e moduleList \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new Module(\"CS1231\", \"Discrete Structures\", \"\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new Module(\"CS2100\", \"Computer Organisation\", \"\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new Module(\"CS2113T\", \"Software Engineering \u0026 Object-Oriented Programming\", \"\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"+--------------------------------------------------------------------------------------------------+\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" NO |  MODULE CODE   |                                 MODULE TITLE                                 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 1  |     CS1231     |                             Discrete Structures                              \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 2  |     CS2100     |                            Computer Organisation                             \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 3  |    CS2113T     |              Software Engineering \u0026 Object-Oriented Programming              \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Total modules: 3\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, ListCreator.createModuleListTable(moduleList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void createCategoryListTable() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module module \u003d new Module(\"CS1231\", \"Discrete Structures\", \"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cCategory\u003e categoryList \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new Category(module, \"Lab\", 3),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new Category(module, \"Lecture\", 1),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new Category(module, \"Tutorial\", 2)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"+--------------------------------------------------------------------------------------------------+\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" NO |     MODULE     |                                CATEGORY                                | PTY \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 1  |     CS1231     |                                  Lab                                   |  3  \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 2  |     CS1231     |                                Lecture                                 |  1  \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 3  |     CS1231     |                                Tutorial                                |  2  \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Total categories: 3\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, ListCreator.createCategoryListTable(categoryList));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void createTaskListTable() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module module \u003d new Module(\"CS1231\", \"Discrete Structures\", \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Category category \u003d new Category(module, \"Lecture\", 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new Task(category, \"Lecture Quiz 6\", new DateTime(LocalDate.of(2020, 6, 6)), 6),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new Task(category, \"read chapter 6 notes\", new DateTime(), 1)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"+--------------------------------------------------------------------------------------------------+\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" NO |  MODULE  |    CATEGORY    |          TASK           |          DEADLINE          | PTY | DONE \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 1  |  CS1231  |    Lecture     |     Lecture Quiz 6      |     06/06/2020 11:59PM     |  6  | [N]  \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 2  |  CS1231  |    Lecture     |  read chapter 6 notes   |           -NIL-            |  1  | [N]  \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Total tasks: 2\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, ListCreator.createTaskListTable(taskList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    void createFileListTable() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Module module \u003d new Module(\"CS1231\", \"Discrete Structures\", \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Category category \u003d new Category(module, \"Lecture\", 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        Task task \u003d new Task(category, \"read chapter 6 notes\", new DateTime(), 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ArrayList\u003cTaskFile\u003e fileList \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                new TaskFile(task, \"notes_6\", \"filePath\", \"originalFilePath\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        String expected \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                \"+--------------------------------------------------------------------------------------------------+\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" NO |    MODULE     |      CATEGORY      |           TASK            |             FILE             \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \" 1  |    CS1231     |      Lecture       |   read chapter 6 notes    |           notes_6            \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"Total files: 1\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"+--------------------------------------------------------------------------------------------------+\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iceclementi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "        assertEquals(expected, ListCreator.createFileListTable(fileList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iceclementi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iceclementi": 135
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lsm"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm CS3235"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "addm CS1111"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "lst"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "cd CS3235"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "cd Assignment"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "A11riseforme"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "A11riseforme": 1,
      "-": 18
    }
  }
]
