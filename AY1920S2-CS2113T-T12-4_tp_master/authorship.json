[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "version \u00272.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    implementation \u0027org.jetbrains:annotations:15.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    archiveBaseName \u003d \"PAC\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    archiveVersion \u003d \"2.0\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 3,
      "harithadiv": 1,
      "benchan911": 1,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Low Jia Yee | [Github](https://github.com/lowjiayee) | [Portfolio](docs/team/lowjiayee.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Haritha Divakaran | [Github](https://github.com/harithadiv) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Anqi | [Github](https://github.com/anqi-nus) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Benjamin Chan | [Github](https://github.com/benchan911) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 1,
      "lowjiayee": 1,
      "harithadiv": 1,
      "benchan911": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "cover page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Our target audiences are professors who need help organizing their personal work schedule and need more time."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The professors are pressed for time and they require a simple software to organize their monthly events"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "and keep track of their students\u0027 attendance and performance. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Our application will reduce the stress of the professor by allowing them to easily enter and store"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "their work schedule as well as their students\u0027 records. After storing the data, the Professor can have"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "quick access to the information in either a list or a calendar view. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### Audience "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "The design documentation is in general for anyone who wants to understand the system architecture and design of "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "PAC. The following groups are in particular the intended audience of the document."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "- PAC project managers"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "- PAC developers"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "- PAC software testers"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## Architecture"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "This section presents the architecture of PAC. It explains the architecture of main components of PAC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### Overall Architecture"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "*Overall Class diagram*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "{To be added in future revisions}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Command](images/Command.png \"Class diagram of Command component\")         "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "*Class diagram of the Command component*  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Commands are the main classes to be executed in PAC. All of the specific Command classes inherit the "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "base Command abstract class, and utilize its abstract execute() method.  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "A subclass of Command is created and executed when the professor input a corresponding command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### Parser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "*Class diagram of the Parser component*  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "There are total of four Parser classes as shown below. Each Parser class correspond to a feature "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "of PAC. "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "| Parser                    | Created in                                                    |"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|---------------------------|---------------------------------------------------------------|"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "| EventParser               | EventCommandInterpreter                                       | "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "| CalenderParser            | EventCommandInterpreter                                       | "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "| AttendanceParser          | Step-by-step command at Attendance-related command classes    |"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "| PerformanceParser         | Step-by-step command at performance-related command classes   |  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "A Parser class is created when a user input contains data to be stored or used in certain features.    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### UI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Ui](images/Ui.png \"Class diagram of Ui component\")                "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "*Class diagram of the UI component*   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "UI is the main class handles user display, which includes reading user input and printing information "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "back to the user on command-line.  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Besides the normal command line messages, there are two subclasses of UI: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "DisplayList and DisplayTable, to specifically print the list and table interface to professor. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## Feature Design and Implementation "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### Event"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "![event](images/event.png \"Class diagram of Event component\")           "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "*Class diagram of the Event component*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. When a user enters an event-related command, the command is analysed by `EventCommandInterpreter`. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. Once determined, the relevant information (e.g. index, name, time, date, venue) are extracted by "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "`EventParser`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. Then, the relevant class that corresponds to the command is created, with the information extracted "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "from the previous step passed into it. It modifies `Event` or `EventList`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. These commands are then returned to `Duke.run()` to `execute()`. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `datetime` is stored as a single attribute in `Event` class, but it is exposed to user as `date` "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "and `time`, which corresponds to `d/` and `t/` flag respectively."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `editDate` or `editTime` commands are not available. Only `editDateTime` is available to change the "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "`date` and/or `time` of an `Event` object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `delete(Event)` method is currently not in use, but can be used to implement delete by event name, "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "either by complete match, or fuzzy match."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* Any classes (e.g. `Seminar`) that inherit from `Event` class will have similar control flow. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### Attendance"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![attendance](images/Attendance.png \"Class diagram of Attendance component\")        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "*Class diagram of the Attendance component*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. When a user enters an attendance-related command, the command is analysed by `AttendanceCommandInterpreter`. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Once determined, the relevant class that corresponds to the type of command is created."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Then, the class will execute base on its function. It modifies `AttendanceList`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. These commands are then returned to `Duke.run()` to `execute()`. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "###Calendar Implementation"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "*Figure 2: Class diagram of the Calendar component*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. When a user enters a calendar-related command, the command is analysed by `CalendarCommandInterpreter`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Once determined, the relevant information (eg. semester, academic year) are extracted by `CalendarParser`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Then, either AddFirstSemester or AddSecondSemester class that corresponds the semester number is created. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Subsequently, it separates events by the required month and year in `CalendarList`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. These commands are then returned to `Duke.run()` to `execute()`. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* `acadamic year` is parsed into corresponding to only one year according to the semester in `EventParser` class."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Calendar view of the whole year is not available. Only semester 1 or 2 of an academic year can be viewed at a time."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Event name size must be less than 10 characters to be displayed neatly (current implementation), however"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "it can be implement to truncate longer names to fit nicely"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "## Product Scope"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* `attendance add` command requires a line-by-line insertion of the student attendance data. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The user is given an option to either use an existing list stored under StudentListCollection or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "create a new attendance list. `n/` and `p/` flags are used to insert new attendance."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### Performance"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Performance](images/Performance.png \"Class diagram of Performance component\")     "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "*Class diagram of the Performance component*  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "1. When a user enters a performance-related command, the command is analysed by `PerformanceCommandInterpreter`. "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "1. Once determined, the relevant class that corresponds to the command is created (e.g. AddPerformance, "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "DeletePerformance...), and ask for relevant information (e.g. event name, student name, student result) from the user. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "1. Then, with the information extracted from the previous step passed into it. It modifies PerformanceList` under"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "the event class correspond to the input event name."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "1. These commands are then returned to `Duke.run()` to `execute()`. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "* All PerformanceList class should be created under an Event class. A PerformanceList class cannot exist "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "by its own. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "* All Performance commands are line-by-line commands. This aims to assist the user with correct command format and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "prevent time wasted on key in wrong commands. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### Student List Collection"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Student](images/Student.png \"Class diagram of Student component\")     "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Class diagram of the Student component*  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. When a user enters an studentList-related command, the command is analysed by `StudentCommandInterpreter`. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Once determined, the relevant class that corresponds to the type of command is created."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Then, the class will execute base on its function. It modifies `AttendanceList`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. These commands are then returned to `Duke.run()` to `execute()`. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* studentList-related commands can be executed without the existence of events."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|add new events|creating new events|"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|delete existing events|delete unnecessary events|"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|add new attendance list|create new attendance list to be added to events|"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|delete existing attendance list|delete unnecessary attendance list|"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|add new performance list|create new performance list to be added to events|"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|delete existing performance list|delete unnecessary performance list|"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|add date and time to my events|organize my events|"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "|v1.0|professor|add venue to my events|locate events|"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|edit my events|update my existing events|"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v2.0|professor|create a student list|link existing student list to performance list or attendance list|"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v2.0|professor|Create repeatable events without having the need to manually add in|easily create occurring events|"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v2.0|professor|find an event by name|locate an event without having to go through the entire list|"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "|v2.0|professor|view calendar of all my events|to see a overview of them|"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benchan911"
        },
        "content": "{To be added in future revisions}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* *flag* - anything that takes the form of  `?/`, e.g. `n/`, `i/`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for Manual Testing"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Download the jar file and copy it into an empty folder."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. View the populated events by typing `event list`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. View the populated seminars by typing `seminar list`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Delete an event by typing `delete i/INDEX`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Edit an existing event\u0027s name by typing `event editname i/INDEX n/NAME`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Edit an existing event\u0027s date and time by typing  "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "`event editdatetime i/INDEX d/DATE t/TIME`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Edit an existing event\u0027s venue by typing   "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "`event editvenue i/INDEX v/VENUE`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Display calendar by entering  "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "`calendar s/SEMESTER ay/YEAR_ONE-YEAR_TWO`"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 57,
      "benchan911": 42,
      "lowjiayee": 19,
      "harithadiv": 28,
      "-": 33
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "# Personal Assistance Console (PAC)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "PAC helps you keep track of your upcoming events."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "PAC also allows you to add in attendance to keep track of your students and their grades. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Being a simple Command Line Interface (CLI) application, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "PAC ensures its usability and suitability regardless of your expertise level."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 6,
      "-": 5
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## Professor Assistant Console (PAC)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![alt text](images/PAC.png \"PAC ver1\")  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## Content Page  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "1. [Introduction](#1-introduction)  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    1.1. [What is PAC?](#11-what-is-pac)  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    1.2. [Who are our audience?](#12-who-are-our-audience)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "2. [Setting Up](#2-setting-up)  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    2.1. [Requirements](#21-requirements)   "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    2.2. [Startup using Command Line](#22-startup-using-command-line)  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    2.3. [Startup using JAR](#23-startup-using-jar)   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "3. [Quick Start](#3-quick-start)  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    3.1. [Using PAC](#31-using-pac)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4. [Features](#4-features)  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.1. [Event](#41-event)  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.1.1. [Add New Event](#411-add-new-event)  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.1.2. [View Event List](#412-list-events)  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.1.3. [Delete Existing Event](#413-delete-event)      "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.1.4. [Edit Event -name](#414-edit-event-name)      "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.1.5. [Edit Event -datetime](#415-edit-event-datetime)      "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.1.6. [Edit Event -venue](#416-edit-event-venue)  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.1.7. [Edit Event](#417-edit-event)    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.2. [Attendance](#42-attendance)  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.1. [Add New Attendance](#421-add-students-attendance-to-event-attendance-attendance-add)    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.2. [View Attendance List](#422-view-attendance-list-attendance-list)   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.3. [Clear Attendance](#423-clear-attendance-list-attendance-clear)  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.4. [Sort Attendance by name](#424-sort-attendance-list-by-name-attendance-sortbyname)  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.5. [Sort Attendance by status](#425-sort-attendance-list-by-status-attendance-sortbystatus)  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.3. [Performance](#43-performance)     "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.3.1. [Add New Performance](#431-add-performance)  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.3.2. [Delete Current Performance](#432-delete-performance)   "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.3.3. [View Performance List](#433-view-performance-list)      "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.4. [Student List](#44-student)        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "4.4.1. [Add New Student List](#441-add-new-student-list)        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.2. [View Student List](#442-view-all-existing-student-lists-from-the-student-list-collection-student-list)  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.3. [Clear Student List](#443-clear-all-existing-student-lists-from-the-student-list-collection-student-clear)   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.4. [Delete Student List](#444-clear-all-existing-student-lists-from-the-student-list-collection-student-delete)  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.5. [Find Student List](#445-find-existing-student-lists-from-the-student-list-collection-student-find)  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.6. [Sort Student List by Name](#446-sort-all-names-within-the-existing-student-lists-from-the-student-list-collection-student-sortbyname)  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.7. [Sort Student List by List](#447-sort-all-existing-student-lists-from-the-student-list-collection-by-name-student-sortbylist)  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "4.5 [Calendar](#45-calendar)  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "4.5.1 [View Events under desired time](#451-view-events-under-a-particular-time--calendar-s2-ay19-20)  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "5. [Possible Console Messages and Reasons](#5-possible-console-messages-and-reasons)           "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "6. [FAQ](#6-faq)  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "7. [Command Summary](#7-command-summary)  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### 1.1. What is PAC?"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "PAC is a professor assistant console which helps you keep track of your "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "upcoming events. PAC also allows you to add in attendance to keep track "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "of your students and their grades. Being a simple Command Line Interface "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "(CLI) application, PAC ensures its usability and suitability regardless "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "of your expertise level."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### 1.2. Who are our audience?"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Professors, teachers, etc."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "As long as you need to keep track of upcoming events or class, you are our audience."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### 2.1. Requirements "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Ensure you have [Java 11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "or above installed in your Computer."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Download the latest PAC.jar from [here](https://github.com/AY1920S2-CS2113T-T12-4/tp/releases)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Copy the file to the folder you want to use as the home folder for this application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Type `java -jar PAC.jar` to start the application."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003cINSERT SCREENSHOT\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  You should see this screen if everything is successful."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 2.2 Startup using Command Line"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Open your terminal."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Navigate to the home folder containing PAC."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  cd followed by the file path into the terminal as shown below"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003cINSERT IMAGE\u003e "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Type `java -jar` followed by the name of the jar file and press **Enter**."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 2.3 Startup using JAR"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Open home folder containing PAC."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Run the packaged JAR file by double clicking it "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    and a window should appear in a few seconds."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003cINSERT IMAGE\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Once opened, type in the command when prompted and press **Enter**."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "##"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## 3. Quick Start"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### 3.1. Using PAC"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": "You can type any command, then press **Enter** to execute it."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "\t"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "e.g. typing help then pressing **Enter** will open the help window."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Some example commands to try:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* `event list`\t\t\tList all events"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* `event add n/CS1010` \tAdd an event named “CS1010”"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* `student add`         Create a new student list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* `bye`\t\t\t\t    Exits the app"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Refer to [“Features”](#Features) for details of each command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## 4. Features "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### 4.1. Event"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.1.1. Add New Event"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Add a new event to the event list. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Format: `event add n/NAME [t/TIME d/DATE] [v/VENUE]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* Name and venue accepts input with spaces."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* Date and Time must either be provided together, or not provided at all. "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* Flags can be arranged in any order."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": " "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event add n/dinner with collegue"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event add n/World Cup d/2022-11-21 t/0000"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event add n/soccer match v/Kallang d/2020-01-23 t/1900"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    New Event: dinner with collegue was added successfully to your Event list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    New Event: World Cup was added successfully to your Event list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    New Event: soccer match was added successfully to your Event list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.1.2. List Events"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "List all events."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Format: `event list`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Here are all the events in your list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    1. Event: dinner with collegue"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    2. Event: World Cup, time: Nov 21 2022 0000"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    3. Event: soccer match, time: Jan 23 2020 1900, venue: Kallang"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.1.3. Delete Event"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Delete an existing event from the event list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Format: `event delete i/INDEX`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event delete i/3"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event delete i/4"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Event: soccer match was deleted successfully from your Event list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Index not found"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.1.4. Edit Event Name"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Change the name of an existing event."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Format: `event editname i/INDEX n/NEW_NAME`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* alphabet cases for the command is not important"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event editname i/1 n/lunch with colleague"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Your Event name was changed from |dinner with collegue| to |lunch with colleague|."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.1.5. Edit Event Datetime"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Change the date and time of an existing event."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Format: `event editdatetime i/INDEX d/NEW_DATE t/NEW_TIME`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* alphabet cases for the command is not important"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event editdatetime i/1 d/2020-03-23 t/1200"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Your Event date and time was changed from |yyyy-MM-dd HHmm| to |2020-03-23 1200|."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Event: lunch with colleague, time: Mar 23 2020 1200"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.1.6. Edit Event Venue"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Change the venue of an existing event."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Format: `event editvenue i/INDEX v/NEW_VENUE`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* alphabet cases for the command is not important"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event editvenue i/1 v/Marina Bay Sands"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Your Event venue was changed from || to |Marina Bay Sands|."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Event: lunch with colleague, time: Mar 23 2020 1200, venue: Marina Bay Sands"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.1.7. Edit Event"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Change an existing event."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Format: `event editevent i/INDEX n/NEW_NAME [t/NEW_TIME d/NEW_DATE] [v/NEW_VENUE]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* alphabet cases for the command is not important"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    event editevent i/1 n/lunch by myself v/home"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Your Event was edited from |Event: lunch with colleague, time: Mar 23 2020 1800, venue: Marina Bay Sands| to |Event: lunch by myself, venue: home|."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 4.2 Attendance"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This section for attendance related commands is done in chronological order. Please follow the numbering to get"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benchan911"
        },
        "content": "a clearer understanding on how you can use the commands."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.1 Add students’ attendance to event: attendance `attendance add`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Add a student’s attendance to the attendance list.  "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benchan911"
        },
        "content": "You may wish to use an existing list found in StudentListCollection."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Please note that if there are existing students in the attendance list of the chosen event, it will add to the existing"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "benchan911"
        },
        "content": "students list. If you wish to start a new attendance list of the chosen event, please use `attendance clear` to clear "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the attendance list first."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance add`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance add"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If the event is found, you can choose to add the student\u0027s attendance by manually key in each student, or you may choose"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the alternative provided by PAC: record using an existing name list located under StudentListCollection. "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Do note that you need to have an existing name list before you are using this shortcut.  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will show a success example of *using an existing name list to add attendance*. "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Would you like to import an existing student list? If yes, input \u0027yes\u0027. Else, input anything."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e yes"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please choose the name list you wish to use by its index."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e 1    "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the attendance status for student Jodi Doe [Y/N]."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e  N"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of Jodi Doe (Absent) has been taken successfully under event Event1"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will show a success example of *creating a new attendance list*."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Would you like to import an existing student list? If yes, input \u0027yes\u0027. Else, input anything."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e no"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in student name."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e John Doe"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the student\u0027s attendance status [Y/N]."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Y"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of John Doe (Present) has been taken successfully under event Event1"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.2 View attendance list: `attendance list`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "benchan911"
        },
        "content": "View the attendance list under a certain event.  "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance list`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance list"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                    |  Attendance Status                          |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John Doe                           |  Present                                    |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi Doe                           |  Absent                                     |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.3 Clear attendance list: `attendance clear`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Clear the attendance list under a certain event.  Attendance list is cleared regardless whether "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the attendance list under the event is empty."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance clear`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance list"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance List cleared for Event: event1"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.4 Sort attendance list by name: `attendance sort`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Sort the attendance list by name in alphabetical order under a certain event.  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance sort`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance sort"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please Key in either \u0027name\u0027 or \u0027status\u0027."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e name"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance List is sorted by name for Event: event1"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.5 Sort attendance list by status: `attendance sort`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Sort the attendance list by attendance status under a certain event with student that are absent on the top.  "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance sort`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance sort"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please Key in either \u0027name\u0027 or \u0027status\u0027."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e name"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance List is sorted by attendance status for Event: event1"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### 4.3. Performance"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.3.1. Add Performance"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Add a student’s result to the performance list.  "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console. "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Format: `performance add`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Step by step guide: "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e performance add"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance. "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e event"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "If the event is found, you can choose to add the student\u0027s result by manually key in each student, or you may choose"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "the alternative provided by PAC: record using a current name list. Do note that you have to have an existing name list "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "before you are using this short cut.  "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "The following will show a success example of using a current name list to add performance. "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Would you like to import an existing student list? If yes, input \u0027yes\u0027. Else, input anything."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e yes"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please choose the name list you wish to use. (shows a list of list names)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e 1"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the result for student (student1 name)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e A"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    The result of student (student name) has been added successfully under event (event name)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the result for student (student2 name)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.3.2. Delete Performance"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Delete a student’s result to the performance list.  "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console.  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Format: `performance delete`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Step by step guide: "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e performance delete"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance. "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003eevent"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of student that you wish to delete his/her performance "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003ename"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    The result of student (name) has been deleted successfully under event name."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.3.3. View Performance List"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "View the list of students\u0027 result under a certain event.  "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console. "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Format: `performance list`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "Step by step guide: "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e performance delete"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e event"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    (example of Table format list is shown below)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    | index     |  Name of Student                    |  Result                                     |"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    | 1         |  XX                                 |  A                                          |"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "### 4.4. Student"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This section for student related commands is done in chronological order. Please follow the numbering to get"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "benchan911"
        },
        "content": "a clearer understanding on how you can use the commands."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "#### 4.4.1. Add New Student List"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Creates a student list and adds it to the collection of student list that can be used for adding attendance and "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "benchan911"
        },
        "content": "performance. Please note that you are allowed to add in duplicated names and that all names are CASE-SENSITIVE. "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student add"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    What is the name of your list?"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS2113T Tut"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please enter a student Name. If you are finished, enter done"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e John"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please enter a student Name. If you are finished, enter done"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Jodi"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please enter a student Name. If you are finished, enter done"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e done"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Student List created, named : CS2113T Tut"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.4.2 View all existing student lists from the student list collection `student list`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "benchan911"
        },
        "content": "View all existing students lists from student list collection."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student list"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student list"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.4.3 Clear all existing student lists from the student list collection `student clear`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Clear all existing student lists from the student list collection. This is a clear all command. If you wish to delete "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "benchan911"
        },
        "content": "a specific student list, please use the `student delete` instead."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student clear"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student clear"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    The Student List Collection is cleared"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.4.4 Clear all existing student lists from the student list collection `student delete`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Delete a specific student list from the student list collection base on its index. If you wish to delete all student "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "benchan911"
        },
        "content": "lists in the student list collection, please use `student clear` instead."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student delete"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student delete"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the index of the list you want to delete"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e 1"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Here is the updated Student List Collection"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.4.5 Find existing student list(s) from the student list collection `student find`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Find existing student list(s) from student list collection base on keyword."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student find"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student find"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the list name you are searching for"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    You have 2 matched:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Here\u0027s the Search Result(s)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    [1]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List      |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    [2]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List      |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student find"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the list name you are searching for"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CG"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    You have 1 matched:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Here\u0027s the Search Result(s)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    [1]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List      |  CG2028                                                                            |"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student find"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the list name you are searching for"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e EG"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Nothing match you description : EG"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.4.6 Sort all names within the existing student lists from the student list collection `student sort`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Sort all existing student lists from the student list collection by name. Regardless whether the lists are "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "benchan911"
        },
        "content": "in order, this command will force all existing lists to be sorted by their list name within the student list collection."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student sort"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:     "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student list"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student sort"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please Key in either \u0027name\u0027 or \u0027list\u0027."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e name"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Student List is sorted by name within the Student List Collection"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student list"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.4.7 Sort all existing student lists from the student list collection by name `student sort`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Sort all existing student lists from the student list collection by name. Regardless whether the lists are "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "benchan911"
        },
        "content": "in order, this command will force all existing lists to be sorted by their name."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student sort"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student sort"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please Key in either \u0027name\u0027 or \u0027list\u0027."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e list"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    StudentList sorted by name within the lists"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e student list"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Robert                                                                            |"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Sam                                                                               |"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Carl                                                                              |"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  John                                                                              |"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### 4.5 Calendar "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### 4.5.1 View events under a particular time : `calendar s/2 ay/19-20`  "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "View existing events under a particular semester and academic year."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Semester refers to a numerical number, 1 or 2 while academic year refers "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "to any 2 consecutive years with a hyphen separating them. "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Format: `calendar s/SEMESTER ay/YEAR_ONE-YEAR_TWO `"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    calendar s/2 ay/19-20"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     _______________________________________________________________________ "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                          SEMESTER 2 AY 19/20 "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     _______________________________________________________________________ "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    | JUL       | AUG       | SEP       | OCT       | NOV       | DEC       |"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |___________|___________|___________|___________|___________|___________|"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |           | talk      | slideshow |           |           |           |"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |___________|___________|___________|___________|___________|___________|"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |           | interview |           |           |           |           |"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |___________|___________|___________|___________|___________|___________| "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## 5. Possible Console Messages and Reasons:  "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "If event list is empty    "
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    The event list is empty"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "If event is not found in the list"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "           "
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Event is not found in the list."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "If students\u0027 name list is empty"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        "
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    There is no existing student list."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**A**: It is not possible to save data locally and transfer another computer at this version. "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Future patches will allow users to save their data and use it on another computer."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## 7. Command Summary"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Add event `event add n/NAME d/DATE t/TIME v/VENUE`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* list events `event list`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Edit name of existing event `event editname i/INDEX n/NAME`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Edit date and time of existing event `event editdatetime i/INDEX d/DATE t/TIME`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Edit venue of existing event `event editvenue i/INDEX v/VENUE`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Delete event `event delete i/INDEX`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* View calendar `calendar s/SEMESTER ay/YEAR_ONE-YEAR_TWO`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "## 8. Contact Us"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "If you have further queries or feedback on PAC, please contact us at [contact_us@pac.com](contact_us@PAC.com)"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 90,
      "benchan911": 509,
      "harithadiv": 34,
      "lowjiayee": 90,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/attendance/Attendance.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing attendance of a student."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String studentName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String isPresent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public Attendance(String studentName, String isPresent) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.isPresent \u003d \"Absent\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (isPresent.toUpperCase().equals(\"Y\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            this.isPresent \u003d \"Present\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Retrieves the name of the student."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return studentName the name of the student."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getStudentName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return studentName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Retrieves the attendance status of the student."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return isPresent the attendance status of the student."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getAttendanceStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return studentName + \": \" + isPresent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static Comparator\u003cAttendance\u003e attendanceStatusComparator \u003d new Comparator\u003cAttendance\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        public int compare(Attendance s1, Attendance s2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName1 \u003d s1.getAttendanceStatus().toUpperCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName2 \u003d s2.getAttendanceStatus().toUpperCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static Comparator\u003cAttendance\u003e attendanceListNameComparator \u003d new Comparator\u003cAttendance\u003e() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        public int compare(Attendance s1, Attendance s2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName1 \u003d s1.getStudentName().toUpperCase();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName2 \u003d s2.getStudentName().toUpperCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 3,
      "benchan911": 53,
      "lowjiayee": 1
    }
  },
  {
    "path": "src/main/java/seedu/attendance/AttendanceList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.attendance.Attendance.attendanceListNameComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.attendance.Attendance.attendanceStatusComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing attendance list of student\u0027s attendance status."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected ArrayList\u003cAttendance\u003e attendanceList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private DisplayTable displayTable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public AttendanceList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public ArrayList\u003cAttendance\u003e getAttendanceList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void addToList(Attendance attendance, String eventName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.add(attendance);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.addAttendanceMessage(attendance.studentName, attendance.getAttendanceStatus(), eventName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printList() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"No attendance list under this event\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        displayTable.printHeaderOfThree(\"index\", \"Name of Student\", \"Status\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (Attendance attendance : attendanceList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            displayTable.printBodyOfThree(i, attendance.getStudentName(), attendance.getAttendanceStatus());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Check whether the attendanceList is empty."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return the status of attendanceList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return attendanceList.isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Clear the attendanceList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Collections.sort(attendanceList,attendanceListNameComparator);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortByStatus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Collections.sort(attendanceList,attendanceStatusComparator);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 5,
      "benchan911": 63,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/command/Bye.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class Bye extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        //TODO: replace with an appropriate method from UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        System.out.println(\"Bye, see you again!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 9
    }
  },
  {
    "path": "src/main/java/seedu/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public abstract void execute() throws DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 3,
      "harithadiv": 3,
      "benchan911": 1
    }
  },
  {
    "path": "src/main/java/seedu/command/Help.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class Help extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    seedu.ui.Help help;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public Help() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.help \u003d new seedu.ui.Help();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This method allows the user to select the help message to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * be displayed by type of command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException Throws DukeException when the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                       selects any command out of the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void selectHelpMessage() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        help.printGetHelp();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String typeOfHelp \u003d help.getStringInput();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        switch (typeOfHelp) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            help.printEventHelp();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            help.printAttendanceHelp();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            help.printPerformanceHelp();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"4\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            help.printStudentListHelp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        default: throw new DukeException(\"Invalid help function selected.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        selectHelpMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 43
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/AddAttendanceList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.Attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to add an attendanceList for a specific event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * attendanceList by default will create a new list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * However, attendanceList can be added using an existing studentList in the studentListCollection."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * If there is an existing attendanceList, this command will append to the end of the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AddAttendanceList extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendances;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public AddAttendanceList(AttendanceList attendances, String eventName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendances \u003d attendances;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to decide whether user wants to create a new list or use an existing student list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException If studentNameList is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void addToList() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"Would you like to import an existing student list? \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"If yes, input \u0027yes\u0027. Else, input anything.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (isByNameList()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                ui.displayMessage(\"There is no existing student list to import\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.printStudentListCollection();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ArrayList\u003cString\u003e studentNameList \u003d fetchAttendanceList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                appendWithExistingList(studentNameList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            createNewList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Create new attendanceList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException If parameter provided is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void createNewList() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        int studentNumber \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String status \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        while (!status.equals(\"done\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            System.out.println(\"Please key in student name.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.readUserInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            name \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (name.equals(\"done\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            System.out.println(\"Please key in the student\u0027s attendance status [Y/N].\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.readUserInput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            status \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendances.addToList(new Attendance(name,status), eventName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentNumber++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"You have successfully added \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + studentNumber + \" to the attendance list.\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Append attendanceList with an existing student list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param studentNameList the existing student list selected."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void appendWithExistingList(ArrayList\u003cString\u003e studentNameList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String studentName: studentNameList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendances.addToList(new Attendance(studentName,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    ui.getAttendanceStatusOfStudent(studentName)), eventName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"AttendanceList added\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Check the user input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return true if the user wants to import an existing list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return false if the user wants to create a new list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private boolean isByNameList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String reply \u003d ui.getStringInput();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (reply.contains(\"yes\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to fetch studentList from studentListCollection."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * User can select base on the index given."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return A studentList selected from the studentListCollection."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException If a string is given instead of an integer."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private ArrayList\u003cString\u003e fetchAttendanceList() throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui.displayMessage(\"Please state the index of the studentList that you wish to import\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            int index \u003d Integer.parseInt(ui.getUserInput());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return studentListCollection.get(index - 1).getStudentList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Invalid Format\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            addToList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Attendance List fail to add. If you wish to add attendance again,\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    + \"please type the command \u0027attendance add\u0027 again\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 2,
      "benchan911": 127
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/ClearAttendanceList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to clear an existing attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class ClearAttendanceList extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendances;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public ClearAttendanceList(AttendanceList attendances, String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendances \u003d attendances;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to clear an existing attendanceList in a specific event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException If attendanceList fail to clear."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void clear() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendances.clearList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.clearAttendanceMessage(eventName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Attendance List fail to clear\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 40
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/SortAttendanceListByName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to sort the attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Sorts the attendanceList in alphabetical order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class SortAttendanceListByName extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendances;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public SortAttendanceListByName(AttendanceList attendances, String eventName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendances \u003d attendances;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to sort an attendance list according to name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (attendances.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.displayMessage(\"An empty list cannot be sorted\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendances.sort();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.sortAttendanceByName(eventName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 1,
      "benchan911": 39
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/SortAttendanceListByStatus.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to sort the attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Sorts the attendanceList according to Status of the student, \u0027N\u0027 will be found before \u0027Y\u0027."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class SortAttendanceListByStatus extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendances;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public SortAttendanceListByStatus(AttendanceList attendances, String eventName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendances \u003d attendances;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to sort an attendance list according to status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (attendances.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.displayMessage(\"An empty list cannot be sorted\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendances.sortByStatus();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.sortAttendanceByStatus(eventName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 1,
      "benchan911": 39
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/ViewAttendanceList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to List an attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class ViewAttendanceList extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendances;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public ViewAttendanceList(AttendanceList attendances) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendances \u003d attendances;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void view() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (attendances.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                ui.displayMessage(\"Attendance List is empty\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                attendances.printList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Attendance List fail to view.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        view();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 1,
      "benchan911": 36
    }
  },
  {
    "path": "src/main/java/seedu/command/calendar/AddSemester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class AddSemester extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private CalendarList calendarList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public AddSemester(EventList eventList, Integer year, int semester) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        calendarList.showEvents(eventList, year, semester);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 24
    }
  },
  {
    "path": "src/main/java/seedu/command/calendar/CalendarList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Seminar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class CalendarList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final int NO_OF_MONTHS \u003d 6;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public CalendarList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Separates events from eventList into diff lists corresponding to its semester, year and month,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * displaying the events in a calendar form."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventList List of all the events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param year Year which the user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param semester Semester which the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If list is empty."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void showEvents(EventList eventList, int year, int semester) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e semesterList \u003d getSemesterEvents(eventList, semester);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e yearList \u003d getAcademicYearEvents(semesterList, year);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e monthList \u003d getMonthEvents(yearList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        displayCalendar(monthList, year, semester);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets events that fall under the correct semester. ie. s/1 would mean events from semester 1."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventList List of all the events."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param semester Semester that user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Events under the required semester."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If no events can be found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cEvent\u003e getSemesterEvents(EventList eventList, int semester) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e list;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        switch (semester) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list \u003d getSemesterOneEvents(eventList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list \u003d getSemesterTwoEvents(eventList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Could not find any events\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets semester one events only."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventList List of all the events."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return list of events that fall under semester 1, ie. jul - dec"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If unable to find the index of the event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cEvent\u003e getSemesterOneEvents(EventList eventList) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.list.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            Event event \u003d eventList.find(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (event.getMonth() \u003e 6) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                list.add(event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets semester two events only."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventList List of all the events."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return list of events that fall under semester 2, ie. jan - jun."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If unable to find the index of the event."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cEvent\u003e getSemesterTwoEvents(EventList eventList) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.list.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            Event event \u003d eventList.find(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (event.getMonth() \u003e 0 \u0026\u0026 event.getMonth() \u003c 7) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                list.add(event);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets events that fall under the correct year. i.e sem 1 of ay/18-19 is in 2018."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param semesterList List of events that fall under the correct semester."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param year Year that the user wants to see the events under."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return List with events that fall under the correct year."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cEvent\u003e getAcademicYearEvents(ArrayList\u003cEvent\u003e semesterList, int year) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e yearList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (Event event : semesterList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (event.getYear().equals(year)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                yearList.add(event);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (yearList.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Unable to find any events for this time period.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return yearList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets events and sorts them into their correct months using a 2d ArrayList."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param yearList list events that falls under the correct year."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return 2d ArrayList monthList that has all the events sorted into the correct month."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If the month cannot be found."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e getMonthEvents(ArrayList\u003cEvent\u003e yearList)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e monthList \u003d initializeMonthList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (Event event : yearList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            int month \u003d event.getMonth();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            String description \u003d getEventDescription(event);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            switch (month) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(0).add(description);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(1).add(description);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(2).add(description);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(3).add(description);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 11:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(4).add(description);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 12:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(5).add(description);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new DukeException(\"Month not found\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return monthList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets event description with the day, eventType and the eventName, also makes sure the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * length of the string is less than 19 characters."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param event event from the eventList"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return description of the event"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String getEventDescription(Event event) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String day \u003d getDayDescription(event);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String typeOfEvent \u003d getEventType(event);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String description \u003d day + \" \" + typeOfEvent + event.getName();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (description.length() \u003e 18) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return description.substring(0, 16) + \"...\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets description of the day as a String."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param event event of the day to be found."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return The day\u0027s description as a String."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String getDayDescription(Event event) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int day \u003d event.getDay();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String dayDescription \u003d Integer.toString(event.getDay());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 21:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 31:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            dayDescription +\u003d \"st\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 22:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            dayDescription +\u003d \"nd\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 23:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            dayDescription +\u003d \"rd\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            dayDescription +\u003d \"th\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return dayDescription;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets type of the event as a String."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param event An event from the eventList."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return String containing type of event."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String getEventType(Event event) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return \"[S]: \";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return \"[E]: \";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e initializeMonthList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e list \u003d new ArrayList\u003c\u003e(NO_OF_MONTHS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int k \u003d 0; k \u003c NO_OF_MONTHS; k++) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private void displayCalendar(ArrayList\u003cArrayList\u003cString\u003e\u003e monthList, int year, int semester) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (semester \u003d\u003d 1) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.printCalendarHeader(year, year + 1, semester);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.printCalendarHeader(year - 1, year, semester);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printMonths(monthList);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Prints monthList after making it a complete 2d ArrayList, ie, equal number of rows and columns."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param monthList 2d ArrayList that does not have a equal number of rows and columns."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private void printMonths(ArrayList\u003cArrayList\u003cString\u003e\u003e monthList) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cString\u003e eventDescriptionList \u003d initializeDescriptionList();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int maxNumberOfEvents \u003d getMaxNumberOfEvents(monthList);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        monthList \u003d make2DArray(monthList, maxNumberOfEvents);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        displayEvents(eventDescriptionList, monthList, maxNumberOfEvents);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Takes events from the 2d ArrayList and puts it in a 1d ArrayList for as many times as the max number of events"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * in a particular month to be printed."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventDescriptionList Empty 1d ArrayList for it to be filled with events corresponding to the 6 months"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param monthList 2d ArrayList, containing all the events corresponding to each month."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param maxNumberOfEvents Max number of events in a particular month which determines the loop count."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private void displayEvents(ArrayList\u003cString\u003e eventDescriptionList,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                             ArrayList\u003cArrayList\u003cString\u003e\u003e monthList, int maxNumberOfEvents) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int k \u003d 0; k \u003c maxNumberOfEvents; k++) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            for (int j \u003d 0; j \u003c monthList.size(); j++) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (!monthList.get(j).get(k).equals(\"\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    eventDescriptionList.add(j, monthList.get(j).get(k));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            DisplayTable.printBodyOfSix(eventDescriptionList);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            eventDescriptionList \u003d removePreviousElements(eventDescriptionList);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets the maximum number of events in any particular month."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param list 2d ArrayList of all the events corresponding to its month."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Integer of maximum number of events."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private int getMaxNumberOfEvents(ArrayList\u003cArrayList\u003cString\u003e\u003e list) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int maxNumberOfEvents \u003d 0;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (ArrayList\u003cString\u003e events : list) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (events.size() \u003e maxNumberOfEvents) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                maxNumberOfEvents \u003d events.size();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return maxNumberOfEvents;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cString\u003e initializeDescriptionList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e(6);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int h \u003d 0; h \u003c NO_OF_MONTHS; h++) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list.add(\"\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cString\u003e removePreviousElements(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int h \u003d 0; h \u003c NO_OF_MONTHS; h++) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list.replaceAll(s -\u003e \"\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e make2DArray(ArrayList\u003cArrayList\u003cString\u003e\u003e list, int maxNumberOfEvents) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (ArrayList\u003cString\u003e strings : list) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (strings.size() \u003c maxNumberOfEvents) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                int size \u003d strings.size();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                for (int j \u003d 0; j \u003c maxNumberOfEvents - size; j++) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    strings.add(\"\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 316
    }
  },
  {
    "path": "src/main/java/seedu/command/event/AddEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class AddEvent extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Event newEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public AddEvent(Event newEvent, EventList eventList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.newEvent \u003d newEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventList.add(newEvent);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 20,
      "harithadiv": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/event/DeleteEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class DeleteEvent extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public DeleteEvent(Integer index, EventList eventList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (eventList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"List is empty, unable to delete any items.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else if (index \u003e eventList.getSize()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Index not found\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventList.delete(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 17,
      "harithadiv": 8
    }
  },
  {
    "path": "src/main/java/seedu/command/event/EditDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EditDateTime extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String datetime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EditDateTime(Integer index, String datetime, EventList eventList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.editDatetime(index, datetime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.println(eventList.list.get(index));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 24
    }
  },
  {
    "path": "src/main/java/seedu/command/event/EditEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EditEvent extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Event newEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EditEvent(Integer index, Event newEvent, EventList eventList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.newEvent \u003d newEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.editEvent(index, newEvent);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 23
    }
  },
  {
    "path": "src/main/java/seedu/command/event/EditName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EditName extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EditName(Integer index, String name, EventList eventList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.editName(index, name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 21,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/event/EditVenue.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EditVenue extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EditVenue(Integer index, String venue, EventList eventList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.editVenue(index, venue);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.println(eventList.list.get(index));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 23
    }
  },
  {
    "path": "src/main/java/seedu/command/event/ListEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class ListEvent extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public ListEvent(EventList eventList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.listEvent();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 18
    }
  },
  {
    "path": "src/main/java/seedu/command/event/ListSeminar.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "/** Only list out seminar. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class ListSeminar extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public ListSeminar(EventList eventList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.listSeminar();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 19
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/AttendanceCommandInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.AddAttendanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.ClearAttendanceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.SortAttendanceListByName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.ViewAttendanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.SortAttendanceListByStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    AttendanceList attendances;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    String eventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(AttendanceCommandInterpreter.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public AttendanceCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static void setupLogger() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"myLogger.log\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            fh.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Execute the command from userInput."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param commandDescription The userInput from the Ui."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException If the command is undefined."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public Command decideCommand(String commandDescription) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assert commandType.isBlank() : \"Attendance: Unknown command\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        AttendanceCommandInterpreter.setupLogger();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.info(\"My First Log\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.fine(\"My Second Log\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            eventName \u003d ui.getEventNameForAttendance();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendances \u003d getAttendance(eventName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new AddAttendanceList(attendances, eventName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            eventName \u003d ui.getEventNameForAttendance();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendances \u003d getAttendance(eventName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new ViewAttendanceList(attendances);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            eventName \u003d ui.getEventNameForAttendance();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendances \u003d getAttendance(eventName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new ClearAttendanceList(attendances, eventName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                ui.displayMessage(\"Please Key in either \u0027name\u0027 or \u0027status\u0027.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.readUserInput();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                String sortType \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                switch (sortType) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                case \"name\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        eventName \u003d ui.getEventNameForAttendance();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        attendances \u003d getAttendance(eventName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        return new SortAttendanceListByName(attendances, eventName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        ui.displayMessage(\"Attendance Command Sory By Name failed.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        throw new DukeException(\"Attendance Command Sort By Name failed.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                case \"status\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        eventName \u003d ui.getEventNameForAttendance();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        attendances \u003d getAttendance(eventName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        return new SortAttendanceListByStatus(attendances, eventName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        ui.displayMessage(\"Attendance Command Sort By Status failed.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        throw new DukeException(\"Attendance Command Sort By Status failed.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    ui.displayMessage(\"Unknown Attendance Sort Command\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    throw new DukeException(\"Unknown Attendance Sort Command\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.displayMessage(\"Attendance Command Sort failed.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new DukeException(\"Attendance Command Sort failed.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Attendance: Unknown command.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Attendance: Unknown command.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private AttendanceList getAttendance(String eventName) throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return eventList.getEvent(eventName).getAttendanceList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 3,
      "benchan911": 120
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/CalendarCommandInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.calendar.AddSemester;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.parser.CalendarParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class CalendarCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public CalendarCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Command decideCommand(String commandDescription) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int semester \u003d CalendarParser.getSemester(commandDescription);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int year \u003d CalendarParser.getYear(commandDescription, semester);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        switch (semester) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new AddSemester(eventList, year, semester);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Please give a valid semester number: s/1, s/2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 2,
      "harithadiv": 30
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/CommandInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Bye;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Help;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class CommandInterpreter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui \u003d new UI();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected EventList eventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static final String[] COMMANDS_THAT_NEED_ARGUMENT \u003d {\"event\", \"seminar\", "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        \"attendance\", \"performance\", \"student\", \"calendar\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public CommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the first word in lower cases."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the first word in lower cases"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected String getFirstWord(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandType \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        commandType \u003d commandType.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        commandType \u003d commandType.toLowerCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the 2nd to last words."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the 2nd to last words"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if there is only 1 word from the input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected String getSubsequentWords(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        int startIndexOfSpace \u003d userInput.indexOf(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (startIndexOfSpace \u003d\u003d -1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"Argument is required for command \u0027\" + userInput + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        int startIndexOfParameter \u003d startIndexOfSpace + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return userInput.substring(startIndexOfParameter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Check if the input is a command that requires any argument. It checks "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * from COMMANDS_THAT_NEED_ARGUMENT, so that array must be set up properly first."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param commandCategory the command to be checked"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return (@code true} if command category requires an argument"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected boolean needArgument(String commandCategory) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String command : COMMANDS_THAT_NEED_ARGUMENT) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (commandCategory.equals(command)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Check if a string contains the specified flags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param string the string to check for flags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param flags any flags to be checked inside string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return {@code true} if at least one flag is not found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected boolean flagDoesNotExist(String string, String... flags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        boolean output \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String flag : flags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output \u003d output \u0026\u0026 string.contains(flag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return !output;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Decide the command from userInput."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param userInput The userInput from the Ui."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException If the command is undefined."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandCategory \u003d getFirstWord(userInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandDescription \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // only look for 2nd to last words if commandCategory requires."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (needArgument(commandCategory)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            commandDescription \u003d getSubsequentWords(userInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        switch (commandCategory) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            command \u003d new Bye();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            EventCommandInterpreter eci \u003d new EventCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            command \u003d eci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"seminar\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            SeminarCommandInterpreter sci \u003d new SeminarCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d sci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"attendance\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            AttendanceCommandInterpreter aci \u003d new AttendanceCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            command \u003d aci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"performance\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            PerformanceCommandInterpreter pci \u003d new PerformanceCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            command \u003d pci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"student\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            StudentCommandInterpreter ssci \u003d new StudentCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            command \u003d ssci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return new Help();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            CalendarCommandInterpreter cci \u003d new CalendarCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d cci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            assert (!commandCategory.equals(\"bye\") \u0026\u0026 !commandCategory.equals(\"event\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    \u0026\u0026 !commandCategory.equals(\"seminar\") \u0026\u0026 !commandCategory.equals(\"attendance\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    \u0026\u0026 !commandCategory.equals(\"performance\") \u0026\u0026 !commandCategory.equals(\"calendar\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    \u0026\u0026 !commandCategory.equals(\"help\") \u0026\u0026 !commandCategory.equals(\"student\"))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    : \"accepted command category is not further interpreted!\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.display(\"Unknown command category is provided.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"Unknown command category is provided\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Duke is null.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"Duke is null.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 10,
      "benchan911": 27,
      "lowjiayee": 97,
      "harithadiv": 8
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/EventCommandInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.AddEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditVenue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.DeleteEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.ListEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.parser.EventParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class EventCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected EventParser eventParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static final String[] COMMANDS_THAT_NEED_ARGUMENT \u003d {\"add\", "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        \"editname\", \"editdatetime\", \"editvenue\", \"editevent\", \"delete\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.eventParser \u003d new EventParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Check if the input is a command that requires any argument. It checks "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * from COMMANDS_THAT_NEED_ARGUMENT, so that array must be set up properly first."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param commandType the command to be checked"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return (@code true} if command type requires an argument"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected boolean needArgument(String commandType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String command : COMMANDS_THAT_NEED_ARGUMENT) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (commandType.equals(command)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String commandDescription) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String datetime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String venue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandParameters \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // only look for 2nd to last words if commandCategory requires."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (needArgument(commandType)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            commandParameters \u003d getSubsequentWords(commandDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            event \u003d eventParser.parseEvent(commandParameters);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            command \u003d new AddEvent(event, this.eventList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editname\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            name \u003d eventParser.getName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditName(index, name, this.eventList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editdatetime\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            datetime \u003d eventParser.getDate() + \" \" + eventParser.getTime();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditDateTime(index, datetime, this.eventList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editvenue\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            venue \u003d eventParser.getVenue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditVenue(index, venue, this.eventList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editevent\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            event \u003d eventParser.parseEvent(commandParameters);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditEvent(index, event, this.eventList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            command \u003d new DeleteEvent(index, this.eventList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new ListEvent(this.eventList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"Event: Unknown command\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 3,
      "lowjiayee": 90,
      "harithadiv": 22
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/PerformanceCommandInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.performance.AddPerformance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.performance.DeletePerformance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.performance.ListStudentPerformance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.performance.SortPerformanceListByName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.performance.SortPerformanceListByGrade;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class PerformanceCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    PerformanceList performances;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    String eventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public PerformanceCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Execute the command from userInput."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param commandDescription The userInput from the Ui."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException If the command is undefined."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public Command decideCommand(String commandDescription) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        eventName \u003d ui.getEventName(); // to know under which event the user want to edit the performance"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        performances \u003d getPerformances(eventName); //performance list to be edited"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return new AddPerformance(performances, eventName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return new DeletePerformance(performances, eventName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return new ListStudentPerformance(performances);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return getSortCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Performance: Unknown command\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"Performance: Unknown command.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This method determines the type of Sorting command the user want, by"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * getting a String input and parse it to return respective sorting Command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @return A Command with respect to the type of sorting command the user intend to execute."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException Throws DukeException when the user input a not recognizable sorting"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                       command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private Command getSortCommand() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String type \u003d ui.getSortType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (type.equals(\"name\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return new SortPerformanceListByName(performances, eventName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        } else if (type.equals(\"grade\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return new SortPerformanceListByGrade(performances, eventName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.displayMessage(\"Performance sort: Unknown command. Enter \u0027name\u0027 or \u0027student\u0027.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        throw new DukeException(\"Performance sort: Unknown command. Enter \u0027name\u0027 or \u0027student\u0027.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This get the performance list under the event input by user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @return The PerformanceList under specific event."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException Throws DukeException when the event is"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                       not found in the EventList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private PerformanceList getPerformances(String eventName) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return eventList.getEvent(eventName).getPerformanceList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 76,
      "benchan911": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/SeminarCommandInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.ListSeminar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.AddEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditVenue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.DeleteEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Seminar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.parser.EventParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class SeminarCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected EventParser eventParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static final String[] COMMANDS_THAT_NEED_ARGUMENT \u003d {\"add\", "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        \"editname\", \"editdatetime\", \"editvenue\", \"editevent\", \"delete\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public SeminarCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventParser \u003d new EventParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Check if the input is a command that requires any argument. It checks "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * from COMMANDS_THAT_NEED_ARGUMENT, so that array must be set up properly first."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param commandType the command to be checked"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return (@code true} if command type requires an argument"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected boolean needArgument(String commandType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String command : COMMANDS_THAT_NEED_ARGUMENT) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (commandType.equals(command)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Command decideCommand(String commandDescription) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Seminar seminar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String datetime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String venue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandParameters \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // only look for 2nd to last words if commandCategory requires."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (needArgument(commandType)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            commandParameters \u003d getSubsequentWords(commandDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            seminar \u003d eventParser.parseSeminar(commandParameters);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new AddEvent(seminar, this.eventList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editname\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            name \u003d eventParser.getName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditName(index, name, this.eventList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editdatetime\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            datetime \u003d eventParser.getDate() + \" \" + eventParser.getTime();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditDateTime(index, datetime, this.eventList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editvenue\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            venue \u003d eventParser.getVenue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditVenue(index, venue, this.eventList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editevent\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            seminar \u003d eventParser.parseSeminar(commandParameters);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditEvent(index, seminar, this.eventList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"EventCommandInterpreter: i/ flag is necessary\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new DeleteEvent(index, this.eventList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new ListSeminar(this.eventList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"Seminar: Unknown command\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 2,
      "harithadiv": 60,
      "lowjiayee": 52
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/StudentCommandInterpreter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.SortStudentListByList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.SortStudentListByName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.ClearStudentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.FindStudentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.AddStudentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.DeleteStudentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.ViewStudentList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class StudentCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public StudentCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to decide the type of command to execute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param commandDescription the following parameter used."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *                           Currently only used for delete command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return The student related command that the user calls."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException If an invalid command Description is provided."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public Command decideCommand(String commandDescription) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                return new AddStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.displayMessage(\"Student Command Add failed.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new DukeException(\"Student Command Add failed.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                return new ViewStudentList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.displayMessage(\"Student Command List failed.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new DukeException(\"Student Command List failed.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                return new DeleteStudentList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.displayMessage(\"Student Command Delete failed.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new DukeException(\"Student Command Delete failed.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                ui.displayMessage(\"Please Key in either \u0027name\u0027 or \u0027list\u0027.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.readUserInput();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                String sortType \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                switch (sortType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                case \"name\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        return new SortStudentListByName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        ui.displayMessage(\"Student Command Sort By Name failed.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        throw new DukeException(\"Student Command Sort By Name failed.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        return new SortStudentListByList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        ui.displayMessage(\"Student Command Sort By List failed.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        throw new DukeException(\"Student Command Sort By List failed.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    ui.displayMessage(\"Unknown Student Sort Command\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    throw new DukeException(\"Unknown Student Sort Command\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.displayMessage(\"Student Command Sort failed.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new DukeException(\"Student Command Sort failed.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                return new FindStudentList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.displayMessage(\"Student Command Find failed.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new DukeException(\"Student Command Find failed.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                return new ClearStudentList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.displayMessage(\"Student Command Clear failed.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new DukeException(\"Student Command Clear failed.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Unknown Student Command.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Unknown Student Command.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 3,
      "benchan911": 101
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/AddPerformance.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.parser.PerformanceParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class AddPerformance extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private DisplayList displayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    PerformanceList performances;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    String eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Constructor for AddPerformanceCommand. Takes PerformanceList, performances of the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * event to be modified, and String eventName, name of the event that owns the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * performance list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public AddPerformance(PerformanceList performances, String eventName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.performances \u003d performances;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Add the performance to performance list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * The user is to choose whether to add the performance by importing a list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * or adding manually."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void addToList() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        boolean isByNameList \u003d ui.isImportList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (isByNameList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            addByList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (!isByNameList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            addManually();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This method gets the user to manually add a performance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * The user has to input name of student and grade for each"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * performance to be added. This method tells the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * whether the performance is added successfully with a"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * reply message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException A DukeException is thrown when the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                       performance format input is incorrect"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                       and cannot be added successfully."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private void addManually() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        int studentNumber \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String parameter \u003d ui.getPerformanceParameter();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        while (!parameter.equals(\"done\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            performances.addToList(getPerformance(parameter), eventName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            studentNumber++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            parameter \u003d ui.getStringInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"You have successfully added \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + studentNumber + \" result(s) to the performance list.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This method get the user to select the index of student list to import"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * and return the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @return The student list selected by user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException Throws DukeException when there is no student list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                       exist in the student list collection."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private StudentList getList() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"There is no existing student list.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            int listIndex \u003d displayList.getStudentListIndex();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return studentListCollection.get(listIndex - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Fail to get list.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Fail to get list\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This method get the user to input student\u0027s performance one by one"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * with the student list imported."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException Throws DukeException when there is no student list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *      *                       exist in the student list collection."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private void addByList() throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        StudentList studentList \u003d getList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        for (String studentName : studentList.getStudentList()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            performances.addToList(new Performance(studentName,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                    ui.getResultOfStudent(studentName)), eventName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * It process the data input by student and returns"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * a Performance base on the input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @return A Performance of student"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException throws DukeException when the user input"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                       is insufficient or incorrect."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private Performance getPerformance(String parameter) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return new PerformanceParser().parsePerformance(parameter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        addToList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 111,
      "lowjiayee": 1,
      "benchan911": 7
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/DeletePerformance.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class DeletePerformance extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    PerformanceList performances;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    Performance performance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    String eventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Constructor for DeletePerformanceCommand. Takes in performance list and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * the name of event that the list is under."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param performances A PerformanceList of students."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public DeletePerformance(PerformanceList performances, String eventName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.performances \u003d performances;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private Performance getPerformance() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String studentName \u003d ui.getStudentName(\"delete his/her performance\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Performance performance \u003d performances.getPerformance(studentName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return performance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private void deleteFromList() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        performance \u003d getPerformance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        performances.deletePerformance(performance, eventName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        deleteFromList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 37,
      "lowjiayee": 1,
      "benchan911": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/ListStudentPerformance.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class ListStudentPerformance extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private PerformanceList performances;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Constructor for ViewAssignmentResultCommand. Takes in the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * performance list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public ListStudentPerformance(PerformanceList performances) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.performances \u003d performances;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        performances.printList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 25
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/SortPerformanceListByGrade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": " * Class representing an performance related command to sort the performanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": " * Sorts the performanceList in alphabetical order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class SortPerformanceListByGrade extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected PerformanceList performances;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public SortPerformanceListByGrade(PerformanceList performances, String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.performances \u003d performances;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Method to sort an performance list according to name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (performances.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.displayMessage(\"An empty list cannot be sorted\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            performances.sortByGrade();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.sortPerformanceByName(eventName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 39
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/SortPerformanceListByName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": " * Class representing an performance related command to sort the performanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": " * Sorts the performanceList in alphabetical order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class SortPerformanceListByName extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected PerformanceList performances;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public SortPerformanceListByName(PerformanceList performances, String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.performances \u003d performances;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Method to sort an performance list according to name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (performances.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.displayMessage(\"An empty list cannot be sorted\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            performances.sortByName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.sortPerformanceByName(eventName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 39
    }
  },
  {
    "path": "src/main/java/seedu/command/student/AddStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to add a new studentList to studentListCollection."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AddStudentList extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected DisplayList displayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public AddStudentList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to add student names to a new list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Once studentList is created, it will be appended to studentListCollection."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void addToList() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String listName \u003d ui.getListName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (listName.toLowerCase().equals(\"done\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Student Add cancelled.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Student Add cancelled\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        StudentList studentList \u003d new StudentList(listName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.addStudent(studentList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentList.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"You cannot create an empty Student List.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"You cannot create an empty Student List\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        displayList.printStudentList(studentList, listName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentListCollection.add(studentList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        addToList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 7,
      "benchan911": 42
    }
  },
  {
    "path": "src/main/java/seedu/command/student/ClearStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to clear all existing studentList in studentListCollection."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class ClearStudentList extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private UI ui \u003d new UI();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to clear the entire studentListCollection."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentListCollection.clear();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui.displayMessage(\"The Student List Collection is cleared\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 1,
      "benchan911": 27
    }
  },
  {
    "path": "src/main/java/seedu/command/student/DeleteStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to delete an existing studentList from studentListCollection."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class DeleteStudentList extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String line;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected DisplayList displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to delete an existing student list from studentListCollection by its index."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException    DukeException is thrown when there is an out of bound index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void deleteFromExisting() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.displayMessage(\"Please state the index of the student list you wish to delete.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        line \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            index \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection.remove(index - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (NullPointerException e1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Deletion Failed, out of bound\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Out of bound.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Deletion Failed.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Deletion Failed, out of bound.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        displayList.printStudentListCollection();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        deleteFromExisting();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 45
    }
  },
  {
    "path": "src/main/java/seedu/command/student/FindStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to find an existing studentList by list name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class FindStudentList extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected ArrayList\u003cStudentList\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected DisplayList displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to find an existing student list from studentListCollection by list name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws DukeException    DukeException is thrown when there is an out of bound index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected void find() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui.displayMessage(\"Please state the list name you are searching for\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        name \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c studentListCollection.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (studentListCollection.get(i).getListName().contains(name)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                searchResults.add(studentListCollection.get(i));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (searchResults.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.displayMessage(\"Nothing match you description : \" + name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.displayMessage(\"You have \" + searchResults.size() + \" matches:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayList.printSearchResults(searchResults);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        find();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 4,
      "benchan911": 46
    }
  },
  {
    "path": "src/main/java/seedu/command/student/SortStudentListByList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to sort all studentList by alphabetical order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class SortStudentListByList extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected StudentList studentList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private UI ui \u003d new UI();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to sort all student list in studentListCollection alphabetically."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c studentListCollection.size(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection.get(i).sortAscending();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui.displayMessage(\"StudentList sorted by name within the lists\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 2,
      "benchan911": 30
    }
  },
  {
    "path": "src/main/java/seedu/command/student/SortStudentListByName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import static seedu.student.StudentList.listNameComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to sort all studentLists"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * within studentListCollection by alphabetical order."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class SortStudentListByName extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected StudentList studentList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private UI ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to sort all student list in studentListCollection alphabetically."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Collections.sort(Duke.studentListCollection, listNameComparator);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui.displayMessage(\"Student List is sorted by name within the Student List Collection\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 3,
      "benchan911": 31
    }
  },
  {
    "path": "src/main/java/seedu/command/student/ViewStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to view all existing studentList in studentListCollection."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class ViewStudentList extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui \u003d new UI();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to display all existing student list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void displayStudentList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.printStudentListCollection();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        displayStudentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentListCollection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Bye;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.command.interpreter.CommandInterpreter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static final Logger logger \u003d Logger.getLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected CommandInterpreter interpreter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected EventList eventList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static StudentListCollection studentListCollection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected Storage eventStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected Storage studentListCollectionStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Duke() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventStorage \u003d new Storage(\"./data/eventlist.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventList \u003d eventStorage.loadEventList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (eventList \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventList \u003d new EventList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        studentListCollectionStorage \u003d new Storage(\"./data/studentlist.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        studentListCollection \u003d studentListCollectionStorage.loadStudentListCollection();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (studentListCollection \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection \u003d new StudentListCollection();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        interpreter \u003d new CommandInterpreter(eventList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void setupLogger() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        logger.setLevel(Level.ALL); // print ALL log"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        ch.setLevel(Level.SEVERE);  // only print SEVERE log to console"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"Duke.log\", true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            fh.setLevel(Level.FINE);    // print FINE log and more severe log to log file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (IOException m) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            logger.severe(\"File logger not working\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            System.out.println(m.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void run() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui.setUserName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.readUserInput();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                String input \u003d ui.getUserInput().trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (input.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    throw new DukeException(\"Please provide a valid command.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                command \u003d interpreter.decideCommand(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (DukeException m) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                logger.log(Level.WARNING, \"DukeException at Duke.run()\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } while (isNotBye(command));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventStorage.saveEventList(eventList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventStorage.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        studentListCollectionStorage.saveStudentListCollection(studentListCollection);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        studentListCollectionStorage.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    boolean isNotBye(Command command) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return !(command instanceof Bye);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            Duke pac \u003d new Duke();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            pac.run();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (DukeException m) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(m.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 8,
      "lowjiayee": 80,
      "benchan911": 2,
      "harithadiv": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/event/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String dateTimeFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private boolean isAutoSet \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public DateTime(String arguments) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.dateTime \u003d arguments;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.dateTimeFormat \u003d getDateTimeFormat();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Formats datetime to the correct output for the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return The parsed string of date and time of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String getDateTimeFormat() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return getDateTime().format(DateTimeFormatter.ofPattern(\"E, MMM dd yyyy HHmm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Parses datetime of pattern input by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * If no input by the user, it takes the current datetime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Parsed datetime object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (!isAutoSet) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                UI.display(\"Unknown DateTime format provided. DateTime is set to local time in the format: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                        + \"yyyy-MM-dd HHmm.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            isAutoSet \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return LocalDateTime.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets the numerical value of the month of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return The value of the month"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        LocalDateTime localDateTime \u003d getDateTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return localDateTime.getMonthValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets the year of the event as a single or double digit number, referring to the current century."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Year of the event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        LocalDateTime localDateTime \u003d getDateTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //only current century format in double digit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return localDateTime.getYear() - 2000;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        LocalDateTime localDateTime \u003d getDateTime();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return localDateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return this.dateTimeFormat;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String toStorable() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return getDateTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static DateTime parseStorable(String representation) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return new DateTime(representation);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 72,
      "lowjiayee": 9
    }
  },
  {
    "path": "src/main/java/seedu/event/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.attendance.Attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected DateTime datetime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected String venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected PerformanceList performanceList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Constructor with name, datetime, venue provided."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param name name of event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param datetime datetime of event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param venue venue of event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Event(String name, String datetime, String venue) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        setDatetime(datetime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        setVenue(venue);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.attendanceList \u003d new AttendanceList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.performanceList \u003d new PerformanceList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the name of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the name of the event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the name of the event. If the specified name is empty or {@code null},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * and the original name is also empty or {@code null},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * the name will take the form: event_(secondsSinceEpoch)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param name the new name for the event"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException when trying to overwrite a non-empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     *      and non-null name with an empty or null name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setName(String name) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (this.name \u003d\u003d null || this.name.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            // if original name is empty or null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (name \u003d\u003d null || name.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                // if new name is empty or null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                this.name \u003d \"event_\" + Instant.now().getEpochSecond();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            // if original name is not empty and null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (name \u003d\u003d null || name.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is empty or null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"Empty name\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is not empty and not null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the datetime of the event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the datetime of the event"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String getDatetime() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Returns month of the event as an integer value, from 1 to 12."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Numerical value of month of the event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Integer getMonth() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.getMonth();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Returns year of the event as an integer value."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Numerical value of the year of the event."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Integer getYear() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.getYear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.getDate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the datetime of the event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param datetime the new datetime for the event"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void setDatetime(String datetime) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.datetime \u003d new DateTime(datetime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the venue of the event."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the venue of the event"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return this.venue;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the venue of the event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param venue the new venue for the event"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setVenue(String venue) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public AttendanceList getAttendanceList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setAttendanceList(AttendanceList attendanceList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.attendanceList \u003d attendanceList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public PerformanceList getPerformanceList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return performanceList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setPerformanceList(PerformanceList performanceList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.performanceList \u003d performanceList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String output \u003d \"Event: \" + getName();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!getDatetime().equals(\"yyyy-MM-dd HHmm\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d (\", time: \" + getDatetime());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!getVenue().equals(\"\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d (\", venue: \" + getVenue());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns a storage-compatible String representation of the event."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a storage-compatible String representation of the event"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String toStorable() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String type \u003d this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(type + \u0027|\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                + name + \u0027|\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                + datetime.toStorable() + \u0027|\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                + venue"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                + \",\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (Attendance attendance : attendanceList.getAttendanceList()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output.append(attendance.toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output.append(\u0027|\u0027);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // add a space to prevent NoSuchElementException, in case no AttendanceList"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        output.append(\",\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (Performance performance : performanceList.getPerformanceList()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output.append(performance.toString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output.append(\u0027|\u0027);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // add a space to prevent NoSuchElementException, in case no PerformanceList"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        output.append(\",\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns an event based on its storage-compatible String representation."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Major components are split by {@code ,}, minor components are split by {@code |}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param representation a storage-compatible String representation of an event"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an Event object"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static Event parseStorable(String representation) throws DukeException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event newEvent;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String[] tokens \u003d representation.split(\",\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // name, datetime, venue"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String[] token1 \u003d tokens[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String type \u003d token1[0];"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String name \u003d token1[1];"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String datetime \u003d token1[2];"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String venue;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            venue \u003d token1[3];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException m) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            venue \u003d \"\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"Seminar\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            newEvent \u003d new Seminar(name, datetime, venue);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            newEvent \u003d new Event(name, datetime, venue);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // add attendance list, populate it"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        AttendanceList attendanceList \u003d new AttendanceList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            String[] token2 \u003d tokens[1].split(\"\\\\|\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            for (String attendance : token2) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String[] attendanceDetail \u003d attendance.split(\": \");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                assert attendanceDetail.length \u003d\u003d 2 : \"Name contains \u0027: \u0027\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String person \u003d attendanceDetail[0];"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String isPresent \u003d attendanceDetail[1];"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                Attendance newAttendance \u003d new Attendance(person, isPresent);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                attendanceList.addToList(newAttendance, name);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException m) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            // Do nothing, as intended"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // add performance list, populate it"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        PerformanceList performanceList \u003d new PerformanceList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            String[] token3 \u003d tokens[2].split(\"\\\\|\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            for (String performance : token3) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String[] performanceDetail \u003d performance.split(\": \");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                assert performanceDetail.length \u003d\u003d 2 : \"Name contains \u0027: \u0027\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String person \u003d performanceDetail[0];"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String result \u003d performanceDetail[1];"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                Performance newPerformance \u003d new Performance(person, result);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                performanceList.addToList(newPerformance, name);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException m) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            // Do nothing, as intended"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 9,
      "lowjiayee": 193,
      "harithadiv": 45,
      "benchan911": 1
    }
  },
  {
    "path": "src/main/java/seedu/event/EventList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public ArrayList\u003cEvent\u003e list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private DisplayList displayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Empty constructor. Creates an empty list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Add the specified event to the end of list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param event the event to be appended"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void add(Event event) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        list.add(event);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.addEventMessage(\"Seminar\", event.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.addEventMessage(\"Event\", event.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Delete the first instance of the specified event in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns {@code true} if the specified event is found (and removed)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * from the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param event the event to be deleted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return {@code true} if the specified event is found (and removed)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     *      from the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public boolean delete(Event event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return list.remove(event);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Removes the event at the specified position in this list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Shifts any subsequent events to the left (subtracts one from their indices)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param index the index of the element to be removed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Invalid index, must start from 1.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"Invalid index, must start from 1.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Index not found.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Index not found.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (list.get(index) instanceof Seminar) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.deleteEventMessage(\"Seminar\", list.get(index).getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.deleteEventMessage(\"Event\", list.get(index).getName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the event at the specified position in this list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param index index of the event to find."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return the event in the specified position."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If list is empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Event find(int index) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Invalid index, must start from 1.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"Invalid index, must start from 1.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Index not found.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Index not found.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Change the name of the event in the specified index."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param index index of the event"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param name new name for the event"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void editName(int index, String name) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event \u003d this.find(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.editEventNameMessage(event.getName(), name, \"Seminar\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.editEventNameMessage(event.getName(), name, \"Event\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        event.setName(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Change the datetime of the event in the specified index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param index index of the event"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param datetime new datetime for the event"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void editDatetime(int index, String datetime) throws DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event \u003d this.find(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String oldDateTime \u003d event.getDatetime();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        event.setDatetime(datetime);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String newDateTime \u003d event.getDatetime();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventDateTimeMessage(oldDateTime, newDateTime, \"Seminar\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventDateTimeMessage(oldDateTime, newDateTime, \"Event\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Change the venue of the event in the specified index."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param index index of the event"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param venue new venue for the event"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void editVenue(int index, String venue) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event \u003d this.find(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.editEventVenueMessage(event.getVenue(), venue, \"Seminar\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.editEventVenueMessage(event.getVenue(), venue, \"Event\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        event.setVenue(venue);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Edits all the fields in the event, ie. name, date and time, venue."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param index Index of the event to be edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param event New event that user inputs."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If list is empty."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void editEvent(int index, Event event) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"Index not found\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Index not found.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.editEventMessage(list.get(index).toString(), event.toString(), \"Seminar\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            ui.editEventMessage(list.get(index).toString(), event.toString(), \"Event\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        list.add(index, event);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public Event getEvent(String eventName) throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"The event list is empty\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"The event list is empty.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        for (Event event : list) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            if (event.getName().equals(eventName)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.displayMessage(\"Event is not found in the list.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        throw new DukeException(\"Event is not found in the list.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Lists all types of events."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If list is empty."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void listEvent() throws DukeException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"The event list is empty\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"The event list is empty.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        displayList.printEventList(list, \"event\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Lists out events that are of seminar type only."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @throws DukeException If list is empty."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void listSeminar() throws DukeException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.displayMessage(\"The event list is empty\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"The event list is empty.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e seminarList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (Event item : list) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (item instanceof Seminar) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                seminarList.add(item);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        displayList.printEventList(seminarList, \"seminar\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 34,
      "lowjiayee": 82,
      "harithadiv": 83,
      "benchan911": 9
    }
  },
  {
    "path": "src/main/java/seedu/event/Seminar.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class Seminar extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Seminar(String name, String datetime, String venue) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        super(name, datetime, venue);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the name of the seminar. If the specified name is empty or {@code null},"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * and the original name is also empty or {@code null},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * the name will take the form: seminar_(secondsSinceEpoch)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param name the new name for the seminar"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException when trying to overwrite a non-empty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     *      and non-null name with an empty or null name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void setName(String name) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (this.name \u003d\u003d null || this.name.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            // if original name is empty or null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (name \u003d\u003d null || name.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is empty or null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                this.name \u003d \"seminar_\" + Instant.now().getEpochSecond();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            // if original name is not empty and null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (name \u003d\u003d null || name.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is empty or null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new DukeException(\"Empty name\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is not empty and not null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String output \u003d \"Seminar: \" + getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!getDatetime().equals(\"yyyy-MM-dd HHmm\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d (\", time: \" + getDatetime());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!getVenue().equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d (\", venue: \" + getVenue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 36,
      "lowjiayee": 20
    }
  },
  {
    "path": "src/main/java/seedu/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 7
    }
  },
  {
    "path": "src/main/java/seedu/exception/PerformanceAssignmentListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class PerformanceAssignmentListException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public PerformanceAssignmentListException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 7
    }
  },
  {
    "path": "src/main/java/seedu/exception/PerformanceStudentListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class PerformanceStudentListException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public PerformanceStudentListException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 7
    }
  },
  {
    "path": "src/main/java/seedu/parser/CalendarParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class CalendarParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public CalendarParser() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public static String[] parseDescription(String parameters) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (tokens.length !\u003d 2 || tokens[0].length() !\u003d 3 || tokens[1].length() !\u003d 8) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Please provide the semester and the academic year in this format: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    + \"s/1 ay/19-20\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return tokens;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public static int parseAcademicYear(String[] academicYear, int year) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int calendarYear;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (String yr : academicYear) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (yr.length() \u003e 2 || yr.length() \u003c 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new DukeException(\"Please provide a valid year in this format: ay/19-20\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (year \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                calendarYear \u003d Integer.parseInt(academicYear[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                calendarYear \u003d Integer.parseInt(academicYear[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Please provide an integer\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return calendarYear;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public static int getSemester(String description) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parseDescription(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int semester;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (tokens[0].substring(0,2).equals(\"s/\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                semester \u003d Integer.parseInt(tokens[0].substring(2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new DukeException(\"Please provide a integer\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"unknown flag\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public static int getYear(String description, int year) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parseDescription(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int calendarYear;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (tokens[1].substring(0,3).equals(\"ay/\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            String[] academicYear \u003d tokens[1].substring(3).split(\"-\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (academicYear.length !\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    throw new DukeException(\"Please provide two numbers for ay, eg. ay/18-19\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                } else if (Integer.parseInt(academicYear[1]) - Integer.parseInt(academicYear[0]) !\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    throw new DukeException(\"Please provide a valid ay, eg. ay/18-19\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new DukeException(\"Please provide two numbers for ay, eg. ay/18-19\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            calendarYear \u003d parseAcademicYear(academicYear, year);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new DukeException(\"Unknown flag\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return calendarYear;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 74
    }
  },
  {
    "path": "src/main/java/seedu/parser/EventParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Seminar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class EventParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventParser() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.date \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.time \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.venue \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.index \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void parse(String parameters) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        splitByEventFlags(tokens);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Parse parameters based on the following format:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * n/EVENTNAME [t/EVENTTIME] [d/EVENTDATE] [v/EVENTVENUE]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param parameters original parameters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an Event object with the relevant information"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Event parseEvent(String parameters) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String[] tokens \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        splitByEventFlags(tokens);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String datetime \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (name.equals(\"\") \u0026\u0026 venue.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"EventParser: Invalid arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return new Event(name, datetime, venue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Seminar parseSeminar(String parameters) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        splitByEventFlags(tokens);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String datetime \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (name.equals(\"\") \u0026\u0026 venue.equals(\"\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"EventParser: Invalid arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return new Seminar(name, datetime, venue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void splitByEventFlags(String[] tokens) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String mostRecent \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (token.length() \u003c 2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (mostRecent \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    throw new DukeException(\"EventParser: Flag is too short\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                } else if (validFlagToAppend(mostRecent)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    append(mostRecent, token);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                switch (token.substring(0, 2).toLowerCase()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                case \"n/\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(name, \"EventParser: Duplicate name flag\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    name +\u003d token.substring(2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"name\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                case \"t/\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(time, \"EventParser: Duplicate time flag\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    time +\u003d token.substring(2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"time\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                case \"d/\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(date, \"EventParser: Duplicate date flag\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    date +\u003d token.substring(2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"date\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                case \"v/\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(venue, \"EventParser: Duplicate venue flag\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    venue +\u003d token.substring(2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"venue\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                case \"i/\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(index, \"EventParser: Duplicate index flag\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                        index \u003d Integer.parseInt(token.substring(2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    } catch (NumberFormatException m) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                        throw new DukeException(\"EventParser: Parameter is not an integer\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"index\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    // assumes that all valid flags have been processed before this line"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    if (isUnknownFlag(token)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                        throw new DukeException(\"EventParser: Unknown flag\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    if (mostRecent \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                        throw new DukeException(\"EventParser: Parameter is provided without flag\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    if (validFlagToAppend(mostRecent)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                        append(mostRecent, token);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private boolean validFlagToAppend(String flag) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return flag.equals(\"name\") || flag.equals(\"venue\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Append a string to the most recently added parameter."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param mostRecent the most recently added parameter"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param token the string to be appended"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void append(String mostRecent, String token) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (token.isEmpty() || token.equals(\" \")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        switch (mostRecent) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            name +\u003d name.isEmpty() ? token : (\" \" + token);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"venue\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            venue +\u003d venue.isEmpty() ? token : (\" \" + token);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"EventParser: Invalid flag to append to\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void ensureNotDuplicateFlag(String name, String message) throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!name.isEmpty()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void ensureNotDuplicateFlag(int name, String message) throws DukeException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (name !\u003d -1) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns {@code true} if the input contains a flag."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * It is assumed that all valid flags have been handled"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * before the execution of this function."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param input the token to be checked"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return {@code true} if the input contains a flag"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private boolean isUnknownFlag(String input) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return input.charAt(1) \u003d\u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 153,
      "harithadiv": 24
    }
  },
  {
    "path": "src/main/java/seedu/parser/PerformanceParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class PerformanceParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public PerformanceParser() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This is the parser for Performance. It gets the parameters from the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * and parse them to studentName and result, and create a new Performance"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * with the two data. It then returns the Performance created."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param commandParameters A String contains information of the Performance, to be parsed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @return                  A Performance containing information parsed from commandParameters."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException    Throws DukeException when the commandParameters contains wrong"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                          tokens or insufficient parameter."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public Performance parsePerformance(String commandParameters) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String[] dataToRead \u003d commandParameters.split(\" \", 5);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String studentName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        for (String s : dataToRead) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            if (s !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                String[] data \u003d s.split(\"/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                if (data.length \u003c 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                    throw new DukeException(\"Insufficient parameter or wrong command.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                switch (data[0]) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                case \"n\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                    studentName \u003d data[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                case \"r\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                    result \u003d data[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                    throw new DukeException(\"Wrong type of Performance data token.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (studentName.equals(\"\") || result.equals(\"\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"Insufficient variables to be saved as performance\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return new Performance(studentName, result);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 47
    }
  },
  {
    "path": "src/main/java/seedu/parser/StudentListStorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentListCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class StudentListStorageParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public StudentListCollection loadCollectionFromStorage(StudentList studentList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        StudentListCollection studentListCollection \u003d new StudentListCollection();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentListCollection.add(studentList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return studentListCollection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public StudentList loadListFromStorage(String line) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String[] token \u003d line.split(\"|\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String listName \u003d token[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        StudentList studentList \u003d new StudentList(listName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        int listSize \u003d token.length;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 1; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentList.addToList(token[i]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return studentList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String toStorage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return studentListCollection.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 2,
      "benchan911": 28
    }
  },
  {
    "path": "src/main/java/seedu/performance/Performance.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class Performance {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String studentName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Constructor for Performance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param studentName A string input by user, the name of student who scored"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *                      the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param result      A string input by user, sets the result of the student."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public Performance(String studentName, String result) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getStudent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return studentName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * A comparator to sort the performance list by student name, in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * alphabetical order."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public static Comparator\u003cPerformance\u003e performanceListNameComparator \u003d new Comparator\u003cPerformance\u003e() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        public int compare(Performance s1, Performance s2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            String listName1 \u003d s1.getStudent().toUpperCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            String listName2 \u003d s2.getStudent().toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * A comparator to sort the performance list by student result, from"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * highest to lowest."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public static Comparator\u003cPerformance\u003e performanceListGradeComparator \u003d new Comparator\u003cPerformance\u003e() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        public int compare(Performance s1, Performance s2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            String listName1 \u003d s1.getResult().toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            String listName2 \u003d s2.getResult().toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return studentName + \": \" + result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 52,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/performance/PerformanceList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import static seedu.performance.Performance.performanceListNameComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import static seedu.performance.Performance.performanceListGradeComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class PerformanceList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    protected ArrayList\u003cPerformance\u003e performanceList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    DisplayTable displayTable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public PerformanceList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        performanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void addToList(Performance performance, String eventName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        performanceList.add(performance);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui.addPerformanceMessage(performance.studentName, eventName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public ArrayList\u003cPerformance\u003e getPerformanceList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return performanceList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Delete the student\u0027s performance from the performance list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * It detects whether the current list is empty, contains the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * input student\u0027s performance, and delete whenever is allowed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param performance The Performance of student to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void deletePerformance(Performance performance, String eventName) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        boolean hasDeleted \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"No performance list under this event\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        for (Performance p : performanceList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            if (p !\u003d null \u0026\u0026 performance.getStudent().equals(p.getStudent())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                performanceList.remove(p);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                hasDeleted \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        ui.deletePerformanceMessage(performance, eventName, hasDeleted);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printList() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"No performance list under this event\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        displayTable.printHeaderOfThree(\"index\", \"Name of Student\", \"Result\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        for (Performance performance : performanceList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            displayTable.printBodyOfThree(i, performance.studentName, performance.getResult());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This method compares the input String student name with Performance.studentName"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * and returns the Performance when the two Strings are equal."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param studentName A String input to be compared."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @return The Performance with studentName matches input String."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @throws DukeException Throws"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public Performance getPerformance(String studentName) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"No performance list under this event\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        for (Performance performance: performanceList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            if (performance.studentName.equals(studentName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                return performance;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        throw new DukeException(\"There is no record for \" + studentName + \"\u0027s performance.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return performanceList.isEmpty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        performanceList.sort(performanceListNameComparator);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void sortByGrade() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        performanceList.sort(performanceListGradeComparator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 96
    }
  },
  {
    "path": "src/main/java/seedu/storage/FileIO.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class FileIO {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private FileReader fileToReadFrom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private FileWriter fileToWriteTo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Open files to be modified, and scanner to read from file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param directory the file to be opened"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if cannot initialise file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public FileIO(String directory) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.file \u003d open(directory);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            this.fileToReadFrom \u003d new FileReader(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"FileIO: cannot initialise file\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.scanner \u003d new Scanner(fileToReadFrom);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Opens a file, creating its relevant directory if necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param directory the abstract pathname of the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a File object pointing to the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if directory already exists while creating it"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected File open(String directory) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        File f \u003d new File(directory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        ensurePathExist(f);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return f;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Checks if the file denoted by this abstract pathname exists."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * If it does not exist, create directories until that path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param f the abstract pathname"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if directory already exists while creating it"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void ensurePathExist(File f) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"Storage file not found.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                new File(f.getParent()).mkdir();    // mkdir"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                UI.display(\"A storage file is created.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (IOException m) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new DukeException(\"FileIO: creating file that already exists\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    //  * Read in information that is required to reconstruct one Event"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    //  * (which is three lines)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    //  * @return a String that consists of three lines"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    //  * @throws DukeException if EOF is encountered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    // public String readOneEvent() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    //     return this.read() + this.read() + this.read();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Read a line from current file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the next line"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if EOF is encountered"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String read() throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"FileIO: nothing to read anymore\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Write a string from start of file, replacing the content of file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param input the string to be written"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if {@code IOException} occurs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void write(String input) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (this.fileToWriteTo \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                this.fileToWriteTo \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            fileToWriteTo.write(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (IOException m) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"FileIO.write: \" + m.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Close everything in FileIO."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if IOException occurs"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void close() throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            this.fileToWriteTo.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            this.fileToReadFrom.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            this.scanner.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (IOException m) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new DukeException(\"FileIO.close: \" + m.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 118
    }
  },
  {
    "path": "src/main/java/seedu/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentListCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected FileIO fileIO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Creates a Storage object that saves to the specified directory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Note that an EventList object has to be passed for each relevant Storage function."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param directory the filepath to save to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if cannot initialise filepath"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Storage(String directory) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.fileIO \u003d new FileIO(directory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Load all events to EventList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an EventList object with all events loaded"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if EOF is encountered"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventList loadEventList() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String input \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                input \u003d fileIO.read();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                Event newEvent \u003d Event.parseStorable(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                eventList.add(newEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (DukeException m) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                if (m.getMessage().equals(\"FileIO: nothing to read anymore\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } while (!input.isBlank());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Save all events to Storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param eventList the list of events to be stored"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if IOException occurs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void saveEventList(EventList eventList) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (Event event : eventList.list) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            fileIO.write(event.toStorable() + System.lineSeparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Load all studentLists to a StudentListCollection object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a StudentListCollection object with all studentLists loaded"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public StudentListCollection loadStudentListCollection() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StudentListCollection studentListCollection \u003d new StudentListCollection();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String input \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                input \u003d fileIO.read();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                StudentList newStudentList \u003d StudentList.parseString(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                studentListCollection.add(newStudentList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (DukeException m) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                if (m.getMessage().equals(\"FileIO: nothing to read anymore\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } while (!input.isBlank());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return studentListCollection;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Save all studentLists to Storage."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param studentListCollection the list of studentlLsts to be stored"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if IOException occurs"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void saveStudentListCollection(StudentListCollection studentListCollection) "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        fileIO.write(studentListCollection.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Close every opened objects."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws DukeException if IOException occurs"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void close() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        fileIO.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 2,
      "lowjiayee": 93
    }
  },
  {
    "path": "src/main/java/seedu/student/StudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a studentList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class StudentList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public ArrayList\u003cString\u003e studentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String listName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public StudentList(String listName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        this.listName \u003d listName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Adds a new student name to studentList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param studentName The name of the student."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void addToList(String studentName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        studentList.add(studentName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Retrieves the existing studentList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return studentList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public ArrayList\u003cString\u003e getStudentList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return studentList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Retrieves the listName."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return listName"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getListName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return listName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void sortAscending() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Collections.sort(studentList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Display the existing student names in the studentList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void showList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        DisplayTable displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        displayTable.printHeaderOfTwo(\"List\", listName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String name: studentList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayTable.printBodyOfTwo(index, name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static Comparator\u003cStudentList\u003e listNameComparator \u003d new Comparator\u003cStudentList\u003e() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        public int compare(StudentList s1, StudentList s2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName1 \u003d s1.getListName().toUpperCase();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName2 \u003d s2.getListName().toUpperCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String data \u003d listName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String studentName : studentList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            data \u003d data.concat(\"|\" + studentName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns a studentList based on its String representation."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param representation a String representation of a studentList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a studentList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static StudentList parseString(String representation) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String[] tokens \u003d representation.split(\"\\\\|\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assert tokens.length \u003e 0 : \"Not a studentList\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String listName \u003d tokens[0];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StudentList newStudentList \u003d new StudentList(listName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (int i \u003d 1; i \u003c tokens.length; ++i) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            newStudentList.addToList(tokens[i]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return newStudentList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return studentList.isEmpty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 27,
      "benchan911": 58,
      "lowjiayee": 16
    }
  },
  {
    "path": "src/main/java/seedu/student/StudentListCollection.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class StudentListCollection extends ArrayList\u003cStudentList\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StringBuilder data \u003d new StringBuilder();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); ++i) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            data.append(this.get(i).toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return data.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 1,
      "benchan911": 10,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/ui/DisplayList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class DisplayList extends UI {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printEventList(ArrayList\u003cEvent\u003e list, String type) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Here are all the \" + type + \"s in your list.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            System.out.println(i + 1 + \". \" + list.get(i));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printStudentList(StudentList studentList, String listName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Student List created, named : \" + listName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        studentList.showList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public int getStudentListIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        assert !studentListCollection.isEmpty() : \"studentListCollection should be empty.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        display(\"Please choose one of the following list.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        for (StudentList studentList: studentListCollection) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            System.out.println(index + \". \" + studentList.getListName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return Integer.parseInt(getStringInput());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printSearchResults(ArrayList\u003cStudentList\u003e searchResults) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"Here\u0027s the Search Results\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            for (StudentList studentList : searchResults) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                System.out.println(\"\\n[\" + index + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentList.showList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new DukeException(\"Search Failed\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 33,
      "benchan911": 14
    }
  },
  {
    "path": "src/main/java/seedu/ui/DisplayTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class DisplayTable extends UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printHeaderOfTwo(String index, String header) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String columnOfTwo \u003d (\"| %-10s|  %-82s|%n\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        printSplit();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.printf(columnOfTwo, index, header);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        printSplitOfTwo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printBodyOfTwo(int index, String body) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String columnOfTwo \u003d (\"| %-10d|  %-82s|%n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String modifiedBody1 \u003d extractLength(body, 50);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.printf(columnOfTwo, index, modifiedBody1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        printSplitOfTwo();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printHeaderOfThree(String index, String header1, String header2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String columnOfThree \u003d (\"| %-10s|  %-50s|  %-28s|%n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        printSplit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(columnOfThree, index, header1, header2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        printSplitOfThree();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printBodyOfThree(int index, String body1, String body2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String columnOfThree \u003d (\"| %-10d|  %-50s|  %-28s|%n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String modifiedBody1 \u003d extractLength(body1, 50);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String modifiedBody2 \u003d extractLength(body2, 25);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(columnOfThree, index, modifiedBody1, modifiedBody2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        printSplitOfThree();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public static void printBodyOfSix(ArrayList\u003cString\u003e description) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String columnOfSix \u003d (\"| %-20s| %-20s| %-20s| %-20s| %-20s| %-20s|%n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(columnOfSix, description.get(0), description.get(1), description.get(2), description.get(3),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                description.get(4), description.get(5));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printSplitOfSix();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    private String extractLength(String string, int length) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        int lengthString \u003d string.length();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (lengthString \u003c length) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return string.substring(0, length - 4) + \"...\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This prints the horizontal split for a 4 columns table."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printSplitOfFour() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(11).forEach(System.out::print);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(32).forEach(System.out::print);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(37).forEach(System.out::print);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(12).forEach(System.out::print);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printSplitOfThree() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(11).forEach(System.out::print);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(52).forEach(System.out::print);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(30).forEach(System.out::print);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"|\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printSplitOfTwo() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(11).forEach(System.out::print);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(84).forEach(System.out::print);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.print(\"|\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public static void printSplitOfSix() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printSplit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(97).forEach(System.out::print);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This prints the headers, index, header1, header2, and header 3"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * in order respectively."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param index   A String printed at row 1 column 1."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param header1 A String printed at row 1 column 2."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param header2 A String printed at row 1 column 3."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param header3 A String printed at row 1 column 4."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printHeaderOfFour(int index, String header1,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                                         String header2, String header3) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String headerFormat \u003d (\"| %-10s|  %-30s|  %-35s|  %-10s|%n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        printSplit();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(headerFormat, index, header1, header2, header3);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        printSplitOfFour();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This prints the headers, index, body1, body2, and body3"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * in order respectively."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param index A String printed at column 1."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param body1 A String printed at column 2."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param body2 A String printed at column 3."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param body3 A String printed at column 4."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printBodyOfFour(int index, String body1,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                                String body2, String body3) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String columnOfFour \u003d (\"| %-10d|  %-30s|  %-35s|  %-10s|%n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(columnOfFour, index, body1, body2, body3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        printSplitOfFour();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 92,
      "harithadiv": 24,
      "benchan911": 23
    }
  },
  {
    "path": "src/main/java/seedu/ui/Help.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class Help extends UI {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printGetHelp() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Hello, please select the type of \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"command that you wish to get the format for.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"1. Event\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"2. Attendance\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"3. Performance\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"4. Student List\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"To track any list, input: type_of_list list\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Note: All command are NOT case sensitive.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printEventHelp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To add an event, use the following format:\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event add n/Event_name v/Venue_name d/yyyy-MM-dd. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"You may also replace \u0027Event\u0027 with one of the following type:\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"\\n\\t- Seminar\\n\\t- Exam\\n\\t- Tutorial\\n\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To edit an event, use the following format:\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event editDateTime i/index_of_Event, or\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event editName i/index_of_Event, or\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event editVenue i/index_of_Event, or\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event editEvent (please edit these lines)\\n\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To edit an event, use the following format:\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event editDateTime i/index_of_Event, or\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event editName i/index_of_Event, or\\n\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event editVenue i/index_of_Event, or\\n\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Event editEvent (please edit these lines)\\n\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printPerformanceHelp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"All performance list should exist under an existing event.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Follow step-by-step commands after the following commands are input.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"To add students\u0027 performance, input:\\n\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"performance add\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"To delete a student\u0027s performance under an event, input:\\n\\t\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Performance delete\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"To sort a student\u0027s performance list under an event, input:\\n\\t\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Performance sort\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printAttendanceHelp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"All attendance list should exist under an existing event.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Follow step-by-step commands after the following commands are input.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"To add students\u0027 attendance, input:\\n\\t\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Attendance add\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"To delete a student\u0027s attendance, input:\\n\\t\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Attendance delete\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"To sort a student\u0027s attendance list, input:\\n\\t\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"Attendance sort\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void printStudentListHelp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To create a new studentList for future events, input:\\n\\t\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"student add\\n\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To delete an existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"student delete (index)\\n\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To clear all existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"student clear\\n\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To find an existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"student find\\n\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To list all existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"student list\\n\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To sort all existing studentList by their names, input:\\n\\t\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"student sort/by/name\\n\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.print(\"To sort all name within the existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"student sort/by/list\\n\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 71
    }
  },
  {
    "path": "src/main/java/seedu/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.duke.Duke.studentListCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private static String userName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static void display(String message) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Advances this scanner past the current line and stores the input that"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * was skipped, excluding any line separator at the end."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * The position is set to the beginning of the next line."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void readUserInput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        System.out.print(\"\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Returns the string that is read from"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * {@code readUserInput()} most recently."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @return the most recent line of user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getStringInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * Close the scanner."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * This prints the welcome message and set username for the application."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void setUserName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String logo \u003d \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \" ______       ____           ______\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|   __  \\\\    /    \\\\      /     ___|\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|  |__| |   /  /\\\\  \\\\     |   /\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|   ____/  /   _    \\\\    |   |\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|  |      /  /    \\\\  \\\\   |   \\\\____\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|__|     /__/      \\\\__\\\\  \\\\________|\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        display(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        display(\"What is your name?\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        userName \u003d getUserInput();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        display(\"Hello \" + userName + \". Welcome to your \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"personal Professor Assistant Console. If you need \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"assistant with command format, input \u0027help\u0027.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void editEventMessage(String oldEvent, String newEvent, String eventType) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\"Your %s was edited from |%s| to |%s|.\\n\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                eventType, oldEvent, newEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void editEventNameMessage(String oldName, String newName, String eventType) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\"Your %s name was changed from |%s| to |%s|.\\n\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                eventType, oldName, newName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void editEventDateTimeMessage(String oldDateTime, String newDateTime, String eventType) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\"Your %s date and time was changed from |%s| to |%s|.\\n\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                eventType, oldDateTime, newDateTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void editEventVenueMessage(String oldVenue, String newVenue, String eventType) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\"Your %s venue was changed from |%s| to |%s|.\\n\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                eventType, oldVenue, newVenue);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void addEventMessage(String eventType, String eventName) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(\"New %s: %s was added successfully to \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"your Event list.\\n\", eventType, eventName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void addAttendanceMessage(String studentName, String attendanceStatus, String eventName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.printf(\"Attendance of %s (%s) has been taken successfully\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \" under event %s.\\n\", studentName, attendanceStatus, eventName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void addPerformanceMessage(String studentName, String taskName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(\"The result of student %s has been added \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"successfully under event %s.\\n\\n\", studentName, taskName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void deleteEventMessage(String eventType, String eventName) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(\"%s: %s was deleted successfully from \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"your Event list.\\n\", eventType, eventName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarHeading(int semesterOneYear, int semesterTwoYear, int semester) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printCalendarHorizontalLine();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String line \u003d \"SEMESTER \" + semester + \" AY \" + semesterOneYear + \"/\" + semesterTwoYear;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\" %75s %n\", line);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printCalendarHorizontalLine();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarHorizontalLine() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \" _\").limit(1).forEach(System.out::print);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(130).forEach(System.out::print);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.println(\" \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarHeader(int semesterOneYear, int semesterTwoYear,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                                     int semester) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printCalendarHeading(semesterOneYear, semesterTwoYear, semester);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printCalendarMonthsHeading(semester);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarMonthsHeading(int semester) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cString\u003e months \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (semester \u003d\u003d 1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(0, \"JUL\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(1, \"AUG\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(2, \"SEP\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(3, \"OCT\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(4, \"NOV\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(5, \"DEC\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(0, \"JAN\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(1, \"FEB\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(2, \"MAR\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(3, \"APR\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(4, \"MAY\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(5, \"JUN\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        DisplayTable.printBodyOfSix(months);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * The message showed to the user after successful deletion of a performance."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     * @param performance The Performance deleted."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void deletePerformanceMessage(Performance performance, String eventName,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                                         boolean hasDeleted) throws DukeException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        if (!hasDeleted) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "            throw new DukeException(\"Performance not found in list\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String studentName \u003d performance.getStudent();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(\"The result of student %s has been deleted \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"successfully under event %s.\\n\", studentName, eventName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getResultOfStudent(String studentName) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Please key in the result for student \" + studentName);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getAttendanceStatusOfStudent(String studentName) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"Please key in the attendance status for student \" + studentName + \"[Y/N]\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getPerformanceParameter() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Please key in student name and result in the following format:\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"n/Student_Name r/result. If you are finished, enter done.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getStudentName(String typeCommand) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.printf(\"Please key in the name of student that you wish to %s \\n\", typeCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getTypeOfAddPerformance() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Would you like to import an existing student list? \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"If yes, input \u0027yes\u0027. Else, input anything.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return getStringInput();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public boolean isImportList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        String userInput \u003d getTypeOfAddPerformance();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return userInput.equals(\"yes\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Please key in the name of event that \""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "                + \"you wish to access to its student\u0027s performance.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getEventNameForAttendance() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"Please key in the name of event.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void clearAttendanceMessage(String eventName) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"Attendance List cleared for Event: \" + eventName);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortAttendanceByStatus(String eventName) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"Attendance List is sorted by name for Event: \" + eventName);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortAttendanceByName(String eventName) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"Attendance List is sorted by attendance status for Event:  \" + eventName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void sortPerformanceByName(String eventName) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Performance List is sorted by Performance name for Event:  \" + eventName);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public String getSortType() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        System.out.println(\"Do you want to sort by students\u0027 name or grade?\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "        return getStringInput().toLowerCase();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void addStudent(StudentList studentList) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String studentName;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            System.out.println(\"Please enter a student Name. If you are finished, enter done\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            readUserInput();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentName \u003d getUserInput();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (studentName.equals(\"done\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentList.addToList(studentName);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } while (!studentName.equals(\"done\"));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getListName() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"What is the name of your list?\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printStudentListCollection() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            System.out.println(\"The student list collection is currently empty\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            DisplayTable displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            for (int i \u003d 0; i \u003c studentListCollection.size(); i++) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                displayTable.printHeaderOfTwo(\"List #\" + (i + 1),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        studentListCollection.get(i).getListName());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                int index \u003d 1;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                for (String name : studentListCollection.get(i).getStudentList()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    displayTable.printBodyOfTwo(index, name);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    public void displayMessage(String message) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 138,
      "benchan911": 94,
      "harithadiv": 51,
      "lowjiayee": 6
    }
  },
  {
    "path": "src/test/java/seedu/attendance/AttendanceListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    ArrayList\u003cAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void isEmpty() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(true, attendanceList.isEmpty());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        attendanceList.add(new Attendance(\"John Doe\", \"Y\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(false, attendanceList.isEmpty());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getAttendanceList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[]\", attendanceList.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        attendanceList.add(new Attendance(\"John Doe\", \"Y\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"[John Doe: Present]\", attendanceList.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 23,
      "lowjiayee": 3
    }
  },
  {
    "path": "src/test/java/seedu/attendance/AttendanceTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance attendanceTestUnit \u003d new Attendance(\"John Doe\", \"Y\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getStudentName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"John Doe\", attendanceTestUnit.getStudentName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getAttendanceStatus() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Present\", attendanceTestUnit.getAttendanceStatus());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getAttendance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"John Doe: Present\", attendanceTestUnit.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 24,
      "lowjiayee": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Bye;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Duke duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public DukeTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (DukeException m) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            System.out.println(m.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void checkBye() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertFalse(duke.isNotBye(new Bye()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 16,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/event/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getName() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event1 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"1\", event1.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setName() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event1 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e event1.setName(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event2 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        event2.setName(\"event2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"event2\", event2.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getDatetime() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //Event event1 \u003d new Event(\"1\", \"4\", \"3\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //assertEquals(\"yyyy-MM-dd HHmm\", event1.getDatetime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Event event2 \u003d new Event(\"1\", \"2020-05-04 0130\", \"3\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"Mon, May 04 2020 0130\", event2.getDatetime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setDatetime() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event1 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        event1.setDatetime(\"2020-05-04 0130\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"Mon, May 04 2020 0130\", event1.getDatetime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getVenue() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event2 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"3\", event2.getVenue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setVenue() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event1 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        event1.setVenue(\"sea\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"sea\", event1.getVenue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 46,
      "harithadiv": 7
    }
  },
  {
    "path": "src/test/java/seedu/event/SeminarTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class SeminarTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void getName() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar1 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"1\", seminar1.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void setName() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar1 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e seminar1.setName(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar2 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        seminar2.setName(\"seminar2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"seminar2\", seminar2.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void getDatetime() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //Seminar seminar1 \u003d new Seminar(\"1\", \"4\", \"3\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //assertEquals(\"yyyy-MM-dd HHmm\", seminar1.getDatetime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Seminar seminar2 \u003d new Seminar(\"1\", \"2020-05-04 0130\", \"3\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"Mon, May 04 2020 0130\", seminar2.getDatetime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void setDatetime() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar1 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        seminar1.setDatetime(\"2020-05-04 0130\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"Mon, May 04 2020 0130\", seminar1.getDatetime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void getVenue() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Seminar seminar2 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"3\", seminar2.getVenue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setVenue() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar1 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        seminar1.setVenue(\"sea\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"sea\", seminar1.getVenue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 39,
      "lowjiayee": 14
    }
  },
  {
    "path": "src/test/java/seedu/interpreter/CommandInterpreterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Bye;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Help;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.interpreter.CommandInterpreter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class CommandInterpreterTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    CommandInterpreter ci;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public CommandInterpreterTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.ci \u003d new CommandInterpreter(new EventList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void byeCommand() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"bye\") instanceof Bye);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"  bye  \") instanceof Bye);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"bYe\") instanceof Bye);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void helpCommand() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"help\") instanceof Help);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"  help  \") instanceof Help);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"heLp\") instanceof Help);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void unknownCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e ci.decideCommand(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e ci.decideCommand(\"hi\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 38
    }
  },
  {
    "path": "src/test/java/seedu/interpreter/EventCommandInterpreterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.AddEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.DeleteEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditVenue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.ListEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.interpreter.EventCommandInterpreter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class EventCommandInterpreterTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    EventCommandInterpreter eci;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventCommandInterpreterTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eci \u003d new EventCommandInterpreter(new EventList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void add() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"add n/hello\") instanceof AddEvent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"add n/1 n/2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editName() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"editname i/1 n/new name\") instanceof EditName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editname n/new name\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editname i/-5\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editname i/0\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editname i/1 i/2\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editname i/10000 2\"));        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editDateTime() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"editdatetime i/1 d/2020-11-11 t/1234\") instanceof EditDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime d/date t/time\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime i/1 d/date\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime i/1 t/time\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime d/date\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime t/time\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime i/-5\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime i/0\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime i/1 i/2\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime i/10000 2\"));        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editVenue() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"editvenue i/1 v/new venue\") instanceof EditVenue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editvenue v/new venue\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editvenue i/-5\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editvenue i/0\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editvenue i/1 i/2\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editvenue i/10000 2\"));        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editEvent() throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"editevent i/1 n/new name v/new venue\") instanceof EditEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void delete() throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"delete i/1\") instanceof DeleteEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"delete i/-5\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"delete i/0\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"delete i/1 i/2\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"delete i/10000 2\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void list() throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"list\") instanceof ListEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void unknown() throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"...\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void missingArgument() throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"add\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editname\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editdatetime\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editvenue\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"editevent\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e eci.decideCommand(\"delete\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 102
    }
  },
  {
    "path": "src/test/java/seedu/interpreter/SeminarCommandInterpreterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.AddEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.DeleteEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditVenue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.ListSeminar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.interpreter.SeminarCommandInterpreter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class SeminarCommandInterpreterTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    SeminarCommandInterpreter sci;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public SeminarCommandInterpreterTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        sci \u003d new SeminarCommandInterpreter(new EventList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void add() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"add n/hello\") instanceof AddEvent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editName() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"editname i/1 n/new name\") instanceof EditName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editname i/-5\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editname i/0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editname i/1 i/2\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editname i/10000 2\"));  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editDateTime() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"editdatetime i/1 d/2020-11-11 t/1234\") instanceof EditDateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime d/date t/time\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime i/1 d/date\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime i/1 t/time\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime d/date\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime t/time\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime i/-5\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime i/0\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime i/1 i/2\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime i/10000 2\")); "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editVenue() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"editvenue i/1 v/new venue\") instanceof EditVenue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editvenue v/new venue\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editvenue i/-5\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editvenue i/0\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editvenue i/1 i/2\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editvenue i/10000 2\")); "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editEvent() throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"editevent i/1 n/new name v/new venue\") instanceof EditEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void delete() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"delete i/1\") instanceof DeleteEvent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void list() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"list\") instanceof ListSeminar);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void unknown() throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"...\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void missingArgument() throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"add\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editname\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editdatetime\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editvenue\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"editevent\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e sci.decideCommand(\"delete\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 96
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "anqi-nus"
        },
        "content": "input"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event add n/dinner with colleague"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event add n/World Cup d/2022-11-21 t/0000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event add n/soccer match v/Kallang d/2020-01-23 t/1900"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event delete i/1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Bye"
      }
    ],
    "authorContributionMap": {
      "anqi-nus": 1,
      "lowjiayee": 6,
      "-": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "del ACTUAL.TXT Duke.log"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "del ..\\build\\libs\\data\\eventlist.txt ..\\build\\libs\\data\\studentlist.txt"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 3,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "rm ACTUAL.TXT "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "rm Duke.log"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "rm -r data/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "rmdir data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 6,
      "-": 21
    }
  }
]
