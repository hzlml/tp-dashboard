[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Project Template for the tP"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a small CLI Java project. It uses Gradle for build automation and GitHub Actions for CI."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. **IMPORTANT: Locate the `build.gradle` file** in the project directory, select it, and click `OK`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. After the set up is complete, you can locate the `src/main/java/seedu/pac/Pac.java` file, right-click it, and choose `Run Pac.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "   \u003e Task :Pac.main()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end. Also note how Intellij is now using Gradle to run your code (you can make Intellij run the code without Gradle [this way](tutorials/assets/RunUsingIntellij.png))."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "## Build Automation using Gradle"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "This project is already configured to use Gradle. Read the following tutorial to learn how to use gradle to do tasks such as running tests, checking code against teh style rules, and generating the JAR file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "To run JUnit tests (after you have added JUnit tests), you can run the `test` Gradle task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The project is already configured to use [GitHub actions](https://github.com/features/actions). When you push a commit to your fork or PR against an upstream repo, GitHub actions will run automatically to build and verify the product."
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 2,
      "-": 47
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "group \u0027seedu.pac\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "version \u00272.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    implementation \u0027org.jetbrains:annotations:15.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    mainClassName \u003d \"seedu.pac.Pac\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    archiveBaseName \u003d \"Pac\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    archiveVersion \u003d \"2.1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 5,
      "harithadiv": 1,
      "benchan911": 1,
      "-": 35
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "![Low Jia Yee](images/LowJiaYee.jpg) | Low Jia Yee | [Github](https://github.com/lowjiayee) | [Portfolio](team/lowjiayee.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "![image](images/Haritha.PNG) | Haritha Divakaran | [Github](https://github.com/harithadiv) | [Portfolio](team/harithadiv.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yang Anqi | [Github](https://github.com/anqi-nus) | [Portfolio](team/anqi-nus.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Benjamin Chan](images/BenjaminChan.png) | Benjamin Chan | [Github](https://github.com/benchan911) | [Portfolio](team/benchan911.md)"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 1,
      "lowjiayee": 1,
      "harithadiv": 1,
      "benchan911": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The design documentation is in general for anyone who wants to understand the system architecture and design of "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Pac. The following groups are in particular the intended audience of the document."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- PAC project managers"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- PAC developers"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- PAC software testers"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. [Setting Up](#1-setting-up)  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    1.1 [Requirements](#11-requirements)  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    1.2 [Startup using Command Line](#12-startup-using-command-line)  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    1.3 [Startup using Jar](#13-startup-using-jar)  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "2. [Design](#2-design)  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    2.1 [Architecture](#21-overall-architecture)  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    2.2 [UI component](#22-ui-component)  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    2.3 [Command component](#23-command-component)  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    2.4 [Parse component](#24-parser-component)  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    2.5 [Storage component](#25-storage-component)  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "3. [Implementation of Features](#3-implementation-of-features)  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    3.1 [Event](#31-event)  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    3.2 [Calendar](#32-calendar)    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    3.3 [Attendance](#33-attendance)   "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    3.4 [Performance](#34-performance)  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    3.5 [Student List Collection](#35-student-list-collection)  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    3.6 [Help](#36-help)  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[Appendix A: Target User Profile](#appendix-a-target-user-profile)   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[Appendix B: Value Proposition](#appendix-b-value-proposition)  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[Appendix C: Non-functional requirements](#appendix-c-non-functional-requirements)  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[Appendix D: User Stories](#appendix-d-user-stories)    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[Appendix E: Instructions for Manual Testing](#appendix-e-instructions-for-manual-testing)  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[Glossary](#glossary)  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## 1. Setting Up"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "### 1.1 Requirements "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Ensure you have [Java 11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "or above installed in your Computer."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Download the latest PAC.jar from [here](https://github.com/AY1920S2-CS2113T-T12-4/tp/releases)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Copy the file to the folder you want to use as the home folder for this application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1.  Type `java -jar PAC-2.1.jar` to start the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  You should see this screen if everything is successful."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 1.2 Startup using Command Line"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Open your terminal."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Navigate to the home folder containing PAC."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  cd followed by the file path into the terminal as shown below"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003cINSERT IMAGE\u003e "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Type `java -jar` followed by the name of the jar file and press **Enter**."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 1.3 Startup using JAR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Open home folder containing PAC."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Run the packaged JAR file by double clicking it "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    and a window should appear in a few seconds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003cINSERT IMAGE\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Once opened, type in the command when prompted and press **Enter**."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 2.1 Overall Architecture"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "This section presents the architecture of PAC. It explains the architecture of main components of PAC."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "![Architecture](images/Architecture.png \"Architecture of Pac\")              "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "*Overall architecture design of Pac*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "The `Pac` component contains all other components in the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- `UI`: reads user input, and prints output in pre-defined format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- `Storage`: loads/stores all events (in EventList) and all student lists (in StudentListCollection)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- `CommandInterpreter`: Determines category and type of command from user input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Various `Parser`: Breaks down user input to obtain command parameters."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Various `Features`: stores their respective objects during runtime."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - `EventList`: stores all events during runtime."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - `StudentListCollection`: stores all student lists during runtime."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - `AttendanceList`: stores all attendances related to an `Event`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - `PerformanceList`: stores all performances related to an `Event`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - `Calendar`: shows all events in calendar form."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 2.2 UI component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Ui](images/Ui.png \"Class diagram of Ui component\")                "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Class diagram of the UI component*   "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "UI is the main class handles user display, which includes reading user input and printing information "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "back to the user on command-line.  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Besides the normal command line messages, there are three subclasses of UI: "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- DisplayList and DisplayTable: to specifically print the list and table interface to user.  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- HelpUI: to print the summary of command format to user.  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 2.3 Command component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Command](images/Command.png \"Class diagram of Command component\")         "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Class diagram of the Command component*  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "The diagram above shows all commands in this program, which are grouped under "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "their own categories (i.e. *StudentList-related*, *Event-related*, "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "*Attendance-related*, *Performance-related*). All these commands inherit the "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "base `Command` abstract class and utilize its abstract `execute()` method. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "They are created and executed when the user inputs a corresponding command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 2.4 Parser component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "There are total of four Parser classes as shown below. Each Parser class correspond to a feature "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "of Pac. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "| Parser                    | Created by                                                    |"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|---------------------------|---------------------------------------------------------------|"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "| EventParser               | EventCommandInterpreter                                       | "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "| CalenderParser            | CalendarCommandInterpreter                                       | "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "| PerformanceParser         | Step-by-step command at performance-related command classes   |  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "| AttendanceParser          | Step-by-step command at attendance-related command classes    |  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "A Parser class is created when a user input contains data to be stored or used in certain features.    "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### 2.5 Storage component"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "![Storage](images/StorageClass.png \"Class diagram of Storage component\")            "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "*Class diagram of the Storage component*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "On startup, `Pac` instantiates two `Storage` objects (`eventStorage` and "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "`studentListStorage`) to load and save `Event` and `StudentList` objects "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "respectively. Each event requires other Attendance-related and Performance-related "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "methods to load and save it, but these methods are not shown in the diagram above. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "All `Event` and `StudentList` objects are saved after receiving `Bye` command. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "If the program crashes (due to unhandled Exception or Interrupt), they *will not* "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "be saved."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "## 3. Implementation of Features  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 3.1 Event"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "![event](images/Event.png \"Class diagram of Event component\")           "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "*Class diagram of the Event component*  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The Event features allow users to update and keep track of their schedules."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### Program flow"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. When a user enters an event-related command, the command is analysed by `EventCommandInterpreter`. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. The first word is extracted by `getFirstWord` to determine the `commandType`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. If this `commandType` requires further arguments, subsequent words are "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "extracted, and parsed by `EventParser` to retrieve the relevant information "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "(e.g. index, name, time, date, venue)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. Alternate paths are chosen based on `commandType`, where a corresponding "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "`Command` class is created, with the information extracted from the previous "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "step passed into it. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - e.g. Command `event delete i/1` will create a `DeleteEvent` object, with "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    `index\u003d1` as its argument."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. This command is returned to `CommandInterpreter#decideCommand()` which returns to `Pac#run()` to call `Command#execute()`. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "The diagram below illustrates the program flow stated above, with the command "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "`event delete i/1`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "![event sequence](images/EventSequence.png \"Sequence diagram of event delete i/1\")  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "In this diagram:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* Other alternative paths are not shown (e.g. [add], [editEvent], [list], etc.)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* The details after `Command#execute()` is not shown."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `datetime` is stored as a single attribute in `Event` class, but it is exposed to user as `date` "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "and `time`, which corresponds to `d/` and `t/` flag respectively."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `editDate` or `editTime` commands are not available. Only `editDateTime` is available to change the "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "`date` and/or `time` of an `Event` object."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `delete(Event)` method is currently not in use, but can be used to implement delete by event name, "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "either by complete match, or fuzzy match."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* Any classes (e.g. `Seminar`) that inherit from `Event` class will have similar program flow. "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### 3.2 Calendar"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "![Calendar](images/Calendar.png \"Class diagram of Calendar component\")  "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "*Class diagram of the Calendar component*  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "The calendar feature allows users to view their schedule by semester and academic year. Since our target"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "user is professor, this feature allows the professor to manage their events in accordance to their work schedule."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harithadiv"
        },
        "content": " "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### Calendar Command Interpreter"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Below shows the sequence diagram of `CalendarCommandInterpreter`:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "![CalendarCommandInterpreter](images/CalendarCommandInterpreter.png \"Command Interpreter\")  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "*Diagram of CalendarCommandInterpreter*  "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. When a user enters a calendar-related command, the command is analysed by `CalendarCommandInterpreter`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Once determined, the relevant information (eg. semester, academic year) are extracted by `CalendarParser`."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Then, only if semester equals 1 or 2 (i.e. valid number), an `EventsSeperator` object which extends `Command` is created.  "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. This command is then returned `CalendarCommandInterpreter#decideCommand` which returns to `Pac#run` to call `Command#execute`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. If the command is invalid, the interpreter throws PacException to inform the user. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### Program flow"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. When the user enters the calendar-related command, the command is analysed by CalendarCommandInterpreter and "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "executed as shows in the section above."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. `command#execute` will execute the command and create a `calendar` object. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. `ui` object and  `displaytable` object is created in the constructor of the Calendar class. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. `separateEvents()` method in `Calendar` executes getSemesterEvents(), getAcademicYearEvents(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "and getMonthEvents() to sieve the events that fall under a specific time-frame mentioned by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. displayCalendar() method in separateEvents(), displays all the components of the calendar by interacting with "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "the UI and DisplayTable classes.  "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "The diagram below illustrates the program flow stated above:  "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "![CalendarProgramFlow](images/EventsSeparator.png \"program flow\")  "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "*Program flow of calendar execution*  "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harithadiv"
        },
        "content": " "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Below is an example usage of how the user can interact with the calendar manager:  "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Step 1: The user wants to `add` an event to their calendar. They do so by inputting `event add n/football d/2020-05-04 t/1700`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Assuming that it is currently semester 2 of the academic year 19-20, this event falls in that timeline and is added to the calendar."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "   "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Step 2: The user realises that the name of the event is wrong and decides to `edit` the name of the event. First, they input"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "`event list` to find the index of the event. Assuming the index of the event is 4, the user then inputs `event editname i/4 n/frisbee`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "to edit the name of the event.  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harithadiv"
        },
        "content": " "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Step 3: The user wants to display the events that fall under semester 2 of academic year 19-20. To do this, the user inputs"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "`calendar s/2 ay/19-20`. A sample view of the calendar is shown below:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "      ___________________________________________________________________________________________________________________________________ "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                                                              SEMESTER 2 AY 19/20 "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "      ___________________________________________________________________________________________________________________________________ "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     | JAN                 | FEB                 | MAR                 | APR                 | MAY                 | JUN                 |"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     |_____________________|_____________________|_____________________|_____________________|_____________________|_____________________|"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     |                     |                     |                     |                     | 4th [E]: frisbee    |                     |"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     |_____________________|_____________________|_____________________|_____________________|_____________________|_____________________|"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harithadiv"
        },
        "content": " "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harithadiv"
        },
        "content": " "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "*Aspect: Data Structure used to implement calendar*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Alternative 1: Save the events using both 1D ArrayList and 2D ArrayList."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  - Pros: Allows flexibility as to what information a calendar can store. For example, the 1D ArrayList is used to store "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  the event descriptions as Strings whereas the 2D ArrayList stores events which corresponds to each month."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  - Cons: Poor performance when retrieving events which fall within a certain time-frame as program needs to iterate through multiple"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  ArrayLists."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Alternative 2: Save the events as a sorted tree map "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  - Pros: Able to utilise existing java interface to implement calendar instead of creating new object. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  - Cons: Poor performance when user makes changes to event list to calendar as tree map needs to perform sorting for "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  every new addition, deletion or editing.  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harithadiv"
        },
        "content": " "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "*Aspect: How addition, deletion and editing of events affects calendar execution*  "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Alternative 1(current choice): Implement a class specifically to interact with the calendar"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  - Pros: Calendar class can support different interactions to modify calendar content"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  - Cons: Many new methods to be implemented, which affects code readability."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Alternative 2: Modify calendar directly using methods belonging to a class where it can be stored in "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  - Pros: Does not require instantiation of new object to modify the calendar contents."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  - Cons: Many new methods to be implemented, which affects code readability."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**Note that**:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Event list should contain existing events with date and time to view the calendar. "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Input of the both academic years should be double digit, e.g ay/07-08, ay/19-20. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* `acadamic year` is parsed in `CalendarParser` and only one year is returned to `CalendarCommandInterpreter` according "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "to the semester input by the user, i.e s/1 ay/19-20 would return year \u003d 19, s/2 ay/19-20 would return year \u003d 20."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Calendar view of the whole year is not available. Only semester 1 or 2 of an academic year can be viewed at a time. This is due to "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "the optimization of calendar view in accordance to the professor\u0027s schedule."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Event name size must be less than 10 characters to be displayed neatly (current implementation), however"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "it can be implemented in the future to truncate longer names to fit nicely in the calendar. "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Addition, deletion and editing of events from the calendar are automatically attempted whenever a user enters a "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "command to modify an event from the event list.  "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "This is illustrated in the flowchart below:  "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "![Flowchart](images/CalendarFlowChart.png \"Calendar flow chart\")  "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "*Calendar management activity diagram*  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### 3.3 Attendance"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![attendance](images/Attendance.png)        "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Class diagram of the Attendance component*   "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The Attendance features allow users to update and keep track of their students\u0027 attendance for a Event."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Attendance Command Interpreter"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Attendance Command Interpreter interprets the user input when it belongs to the attendance category."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benchan911"
        },
        "content": "When user input is passed to Attendance Command Interpreter, it extracts the second word in the user"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "benchan911"
        },
        "content": "input and decides whether the string can be interpreted as a valid Command. If valid, the interpreter"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benchan911"
        },
        "content": "returns its corresponding Command. Else, the interpreter will throw PacException to inform the user "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "benchan911"
        },
        "content": "that the string is interpreted as an invalid Command."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Below shows the flow chart and sequence diagram of Attendance Command Interpreter.  "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Flow chart](images/AttendanceCommandInterpreterFlowChart.png)  "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Flow Chart of Attendance Command Interpreter*  "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Sequence Diagram](images/AttendanceCommandInterpreterSequenceDiagram.png)  "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of Attendance Command Interpreter*  "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Program flow"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. When a user enters an attendance-related command, the command is analysed by `AttendanceCommandInterpreter`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Once determined, the relevant class that corresponds to the type of command is created."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Then, the class will execute base on its function. It modifies `AttendanceList`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. These commands are then returned to `Pac.run()` to `execute()`. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* `attendance add` command provides to use an existing list stored under `StudentListCollection` or to create "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "benchan911"
        },
        "content": "a new list. If you choose to use an existing list, you need to ensure that there are existing `StudentList` in"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the `StudentListCollection`. If you choose to create a new list, you will be given an option of a multi-line or "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "benchan911"
        },
        "content": "single line interaction. If you are a new user, you will be assigned to use the multi-line entering of student"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "benchan911"
        },
        "content": "attendance data. If you are not a new user, you will assigned to use the single line entering of student"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "benchan911"
        },
        "content": "attendance data. `n/` and `p/` flags are used to insert new attendance."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Features under Attendance"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "benchan911"
        },
        "content": "There are 6 features for attendance in total, as shown below. "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The features will be presented in the order of sequence diagram, followed by description.  "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Add attendanceList  "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![AddAttendanceList](images/AddAttendance.png)    "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of AddAttendanceList*"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`AddAttendanceList` is a subclass of Command. It allows the user to add a new existing `attendanceList` under an Event."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The method addToList() accesses the `attendanceList` of a given event, and checks whether the list is empty. If there is"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benchan911"
        },
        "content": "an existing `attendanceList` in the given event, it calls display() in UI and inform the user that the list currently"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "benchan911"
        },
        "content": "exist and needs to be cleared before adding a new attendanceList. Else, it will prompt the user to ask whether the "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "benchan911"
        },
        "content": "user intends to use an existing `studentList` found in `studentListCollection` or create a new list which will be added"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "benchan911"
        },
        "content": "to `studentListCollection` upon creation with the name of the event as the list name. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "benchan911"
        },
        "content": " "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Clear attendanceList    "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![ClearAttendanceList](images/ClearAttendanceList.png)    "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of ClearAttendanceList*  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`ClearAttendanceList` is a subclass of Command. It allows the user to clear an existing `attendanceList` under an Event.  "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The method clear() accesses the desired `attendanceList` of a given event, and checks whether the list is empty."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If empty, it calls display() in UI and inform the user list is empty. Else, it will clear the existing `attendanceList` "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "benchan911"
        },
        "content": "stored under the given event."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### View attendanceList  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![ViewAttendanceList](images/ViewAttendanceList.png)     "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of ViewAttendanceList*    "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`ViewAttendanceList` is a subclass of Command. It allows the user to view a self generated table based on the data "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "benchan911"
        },
        "content": "in a desired `attendanceList`.  "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The method view() accesses the desired `attendanceList` of given event, and checks whether the list is empty.  "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If empty, it calls display() in UI and inform the user list is empty. Else, it will iterate through the `attendanceList` "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "benchan911"
        },
        "content": "and print Attendance data in a table format.  "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Sort attendanceList "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "-"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![SortAttendanceListByName](images/SortAttendanceListByName.png)     "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of SortAttendanceListByName*    "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![SortAttendanceListByStatus](images/SortAttendanceListByStatus.png)      "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of SortAttendanceListByStatus*  "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`SortAttendanceListByName` and `SortAttendanceListByStatus` are subclasses of Command. "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "benchan911"
        },
        "content": "They both allow the user to sort a attendance list by either the student\u0027s name or status."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The two Commands will be discussed together in this section as they have similar behaviour.  "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The methods `SortAttendanceListByName` and `SortAttendanceListByStatus` access a desired `attendanceList` and check "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "benchan911"
        },
        "content": "whether it is empty. If empty, it calls display() in UI and inform the user list is empty.  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Else, it will sort the `attendanceList` by the type mentioned in its method name.  "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Edit attendance  "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![EditAttendance](images/EditAttendance.png)    "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of EditAttendance*  "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`EditAttendance` is a subclass of Command. It allows the user to edit an `attendance`,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "benchan911"
        },
        "content": "either the student\u0027s name or status, from a desired `attendanceList` under an Event.  "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The method edit() accesses the desired `attendanceList` of given event, and checks whether the list is empty."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If empty, it calls display() in UI and inform the user list is empty. Else, it will call decideEdit() from itself."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The method decideEdit() will call getUserInput() in UI to get the user input and decide whether to call editName() or "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "benchan911"
        },
        "content": "editStatus() base on the user input."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Find attendance  "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![FindAttendance](images/FindAttendanceList.png)  "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of FindAttendance*  "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`FindAttendance` is a subclass of Command. It allows the user to find an `attendance`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The method find() accesses the desired `attendanceList` of given event, and checks whether the list is empty."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If empty, it calls display() in UI and inform the user list is empty. Else, it will call findAttendance() from "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`attendanceList`. findAttendance() will search for attendance with the same name entered and display for the user."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Design consideration for Attendance  "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "benchan911"
        },
        "content": "##### AddAttendance"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Alternative 1 : Use single line for adding of attendance to an event"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * **Pros:** Prompts the user what to type"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * **Cons:** Slow for experience users"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Alternative 2 : Use multi-line for adding of attendance to an event"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Using single line or multi-line for adding of attendance to an event"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * **Pros:** Fast for experience users"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * **Cons:** New users will have difficulty in adding new attendance"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Final Decision : Using both single line and multi-line by giving the user the option    "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "benchan911"
        },
        "content": "##### ClearAttendance VS DeleteAttendance"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Alternative 1 : Allow the deletion of a single attendance in an attendance list in an event"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * **Pros** User can specifically remove a single student"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * **Cons** Complicated feature to use as user will need to search for the attendance in the list before deletion"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Alternative 2 : Only allow the attendance list to be cleared"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * **Pros** User can easily remove the attendance list and add a new attendance list"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * **Cons** A single mistake in the attendance list will mean that user has to clear and add again."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Final Decision: Introduce a feature to `editAttendance` to amend mistake and have `clearAttendance` instead of "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`deleteAttendance`. `deleteAttendance` can be inserted in future releases."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 3.4 Performance"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![Performance](images/Performance.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Class diagram of the Performance component*  "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The Performance features allow users to update and keep track of their students\u0027 "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "result for a Event.  "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Performance Command Interpreter"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Performance Command Interpreter interprets the user input when it belongs to the"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "performance category.  "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "When user input is passed to Performance Command Interpreter, it extracts the "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "second word in the user input and decides whether that string can be interpreted to a"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "valid Command.  "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If valid, the interpreter returns its corresponding Command.  "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If invalid, the interpreter throws PacException to inform the user.  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Below shows the flow chart and sequence diagram of Performance Command Interpreter.  "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![Flow chart](images/PerformanceCommandInterpreterFlowChart.png)  "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Flow Chart of Performance Command Interpreter*  "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![Sequence diagram](images/PerformanceCommandInterpreterSequenceDiagram.png) "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Sequence diagram of Performance Command Interpreter*  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Program flow"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. When a user enters a performance-related command, the command is analysed by "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "[PerformanceCommandInterpreter](#performance-command-interpreter).  "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Once determined, the relevant class that corresponds to the command is created (e.g. AddPerformance, "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "DeletePerformance...), and ask for relevant information (e.g. event name, student name, student result) from the user. "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Then, with the information extracted from the previous step passed into it. It modifies PerformanceList` under"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "the event class correspond to the input event name."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. These commands are then returned to `Pac.run()` to `execute()`. "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* All PerformanceList class are created under an Event. A PerformanceList cannot exist "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "by its own. "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* All Performance commands are step-by-step commands. This aims to provide convenience to the user by "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "prompting instructions and correct command format.  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* All Performance discussed in Pac are constructed with student\u0027s name and result."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Features under Performance"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "There are 5 features for Performance in total, as shown below. "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The features will be presented in the order of sequence diagram, followed by description.  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Add performanceList"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![AddPerformance](images/AddPerformance.png)  "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Sequence diagram of AddPerformanceList*  "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "AddPerformanceList is a subclass of Command. It allows the user to add performances"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "by importing a student list, or add manually, to a desired performance list under an Event.  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method execute() calls addToList() from the same class, which then calls "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "isImportList() from UI to get a user input. This user input decides whether "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "the user will add performances by list or manually.  "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method addByList() or addManually() will then get user input for Performance parameters, "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "which will be parsed by the PerformanceParser and return a Performance.  "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The Performance attained from the parser will be added to a desired performanceList. "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Delete performanceList"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![DeletePerformance](images/DeletePerformance.png)  "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Sequence diagram of AddPerformance*  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "DeletePerformanceList is a subclass of Command. It allows the user to delete a performance"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "from a desired performance list under an Event.  "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method execute() calls deletePerformance() from the same class, which then calls "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "getPerformance() from itself to get the user input, Performance parameters "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "of the Performance to be deleted, and return a Performance.  "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The Performance attained from getPerformance() will be deleted from a desired performanceList. "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Edit performanceList"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![EditPerformance](images/EditPerformance.png)  "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Sequence diagram of EditPerformance*  "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "EditPerformanceList is a subclass of Command. It allows the user to edit a performance,"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "either the student\u0027s name or result, from a desired performance list under an Event.  "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method execute() calls editPerformanceList() from the same class, which then calls "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "getPerformance() from itself, to get the user input, student\u0027s name of the "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Performance to be edited, and return a Performance.  "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method editPerformanceList() then calls getPerformanceParameter() from UI "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "to get a user input. This user input decides whether the user will edit the "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "student\u0027s name or result.  "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The new parameter will be attained from the user in method editPerformance(performance, editType) "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "in PerformanceList.  "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Sort performanceList  "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![SortPerformanceByName](images/SortPerformanceList.png)    "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Sequence diagram of SortPerformanceListByName*  "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![SortPerformanceByResult](images/SortPerformanceListByResult.png)    "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Sequence diagram of SortPerformanceListByResult*  "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "SortPerformanceListByName and SortPerformanceListByResult are subclasses of Command. "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "They both allow the user to sort a performance list, by student\u0027s name or result as their"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "name suggest. "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The two Commands are discussed together in this section as they have similar behaviour.  "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method execute() calls sortPerformanceByName() or sortPerformanceByResult, "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "according to its class name.   "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The methods sortPerformanceBy...() access a desired performanceList and check whether "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "the list is empty. "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If empty, it calls display() in UI and inform the user.  "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Else, it will sort the performanceList by the type mentioned in its method name.  "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### View performanceList  "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![ViewPerformance](images/ViewPerformanceList.png)  "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Sequence diagram of ViewPerformanceList*  "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "ViewPerformanceList is a subclass of Command. It allows the user to view a self"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "generated table based on the data in a desired performance list.  "
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method execute() calls viewList() from the same class, which accesses a "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "desired performanceList of given event and checks whether that list is empty.  "
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If empty, viewList() calls display() in UI and inform the user.  "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Else, it will iterate through the performanceList and print Performance "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "data in a table format.  "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 3.5 Student List Collection"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![StudentListCollection](images/StudentList.png)     "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Class diagram of the Student component* "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The Student list features allow users to store a list of student names, which could be used"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "when updating students\u0027 attendance and performance data conveniently.  "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Program Flow   "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. When a user enters an studentList-related command, the command is analysed by `StudentCommandInterpreter`. "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Once determined, the relevant class that corresponds to the type of command is created."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Then, the class will execute base on its function. It modifies `StudentList`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. These commands are then returned to `Pac.run()` to `execute()`. "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Note that:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* studentList-related commands can be executed without the existence of events."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Student Command Interpreter"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Student Command Interpreter interprets the user input when it belongs to the"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "benchan911"
        },
        "content": "student category.  "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "benchan911"
        },
        "content": "When user input is passed to Student Command Interpreter, it extracts the second word in the user input "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "and decides whether that string can be interpreted to a valid Command.  "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If valid, the interpreter returns its corresponding Command.  "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If invalid, the interpreter throws PacException to inform the user.  "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Below shows the flow chart and sequence diagram of Student Command Interpreter.    "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Flow chart](images/StudentCommandInterpreterFlowChart.png)   "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Flow Chart of Student Command Interpreter*    "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![Sequence diagram](images/StudentCommandInterpreterSequenceDiagram.png)   "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of Student Command Interpreter*    "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Features under Student List Collection"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "benchan911"
        },
        "content": "There are 6 features for Student in total, as shown below. "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The features will be presented in the order of sequence diagram, followed by description.  "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Add student list"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![AddStudentList](images/addStudentList.png)  "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " *Sequence diagram of AddStudentList*   "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`AddStudentList` is a subclass of Command. It allows the user to add a student list"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "benchan911"
        },
        "content": "to the `studentListCollection`.    "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method execute() calls addToList() from the same class, which then calls "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "getListName() from UI to get a user input for listName.  "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The list name of student list is restricted to one word only, hence the parameter listName "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "is trimmed.  "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "StudentList, a new student list is created with list name listName.  "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method addToList() calls addStudent(studentList) from UI to get user input "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "for student names to be added. The names are added to studentList"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "in addStudent(studentList).  "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "benchan911"
        },
        "content": "After user has done input, `studentList` will be printed, and this new list is"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "benchan911"
        },
        "content": "added to `studentListCollection`."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Delete student list  "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![DeleteStudentList](images/DeleteStudentList.png)  "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " *Sequence diagram of DeleteStudentList*  "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`DeleteStudentList` is a subclass of Command. It allows the user to delete a student list"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "from the studentListCollection.    "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If the `studentListCollection` is empty, execute() calls displayStudentListCollectionEmpty()"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "form UI, to inform the user.  "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Else, it calls deleteFromExisting() from the same class and get user input for index, the"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "list number to be deleted.  "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The (index-1)th list in `studentListCollection` is deleted.  "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Clear student list  "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![ClearStudentList](images/ClearStudentList.png)   "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " *Sequence diagram of ClearStudentList*  "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`ClearStudentList` is a subclass of Command. It allows the user to clear the "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`studentListCollection`.  "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method execute() calls clear() from the same class. "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If the `studentListCollection` is empty, clear() calls displayStudentListCollectionEmpty()"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "from UI, to inform the user.  "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Else, it calls clear() from `StudentListCollection` to clear the collection.  "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The user will get informed when a success clear has been performed.  "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### View student list  "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![ViewStudentList](images/ViewStudentList.png)  "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " *Sequence diagram of ViewStudentList*   "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`ViewStudentList` is a subclass of Command. It allows the user to view a self "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "benchan911"
        },
        "content": "generated table based on the data in `studentListCollection`.  "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The method execute() calls displayStudentList() from the same class.  "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If the `studentListCollection` is empty, displayStudentList() calls "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "displayStudentListCollectionEmpty() from UI, to inform the user.  "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Else, it calls printStudentListCollection() from UI to print the table. "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Find student list   "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![FindStudentList](images/FindStudentList.png)   "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "benchan911"
        },
        "content": " *Sequence diagram of FindStudentList*   "
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`FindStudentList` is a subclass of Command. It allows the user to find a certain `studentList`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "benchan911"
        },
        "content": "in `studentListCollection`.  "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The method execute() calls find() from the same class.  "
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If the `studentListCollection` is empty, displayStudentList() calls "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "benchan911"
        },
        "content": "displayStudentListCollectionEmpty() from UI, to inform the user.  "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Else, it calls displayStudentListCollection() from the same class to print the table.  "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Next, it will prompt the user for a keyword. Using the keyword, it will iterate through "
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the `studentListCollection` to find a `studentListCollection` listName that equals to the keyword.  "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Last, it will call printSearchResults from displayList to display the searchResults found.  "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The user will get informed when a success sort has been performed.  "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "benchan911"
        },
        "content": " "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Sort student list   "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "-    "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![SortStudentListByName](images/SortStudentListByName.png)      "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of SortStudentListByName*    "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![SortStudentListByList](images/SortStudentListByList.png)    "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "benchan911"
        },
        "content": "*Sequence diagram of SortStudentListByList*    "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`SortStudentListByName` and `SortStudentListByList` are subclasses of Command. "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "benchan911"
        },
        "content": "They both allow the user to sort a student list by either the student\u0027s name within a list or "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the list name of `studentList` stored within the `studentListCollection`.  "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The two Commands will be discussed together in this section as they have similar behaviour.  "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The methods `SortStudentListByName` and `SortStudentListByList` access a desired `studentListCollection` and "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "benchan911"
        },
        "content": "check whether the collection is empty.  "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If empty, it calls display() in UI and inform the user list is empty.  "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Else, it will sort the `studentListCollection` or `studentList` by the type mentioned in its method name.    "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "### 3.6 Help"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "![Help](images/Help.png)  "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Sequence diagram for Help*  "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Help function provides a summary of command format for the user.  "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "When help command is executed, a menu page is shown at the console.  "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "It then calls getStringInput() from UI, to get user input, typeOfHelp, and prints"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "corresponding help information to user.  "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## Appendix"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### Appendix A: Target user profile"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Our target audiences are professors who need help organizing their personal work schedule and need more time."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The professors are pressed for time and they require a simple software to organize their monthly events"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "benchan911"
        },
        "content": "and keep track of their students\u0027 attendance and performance. "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### Appendix B: Value proposition"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Our application will reduce the stress of the professor by allowing them to easily enter and store"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "benchan911"
        },
        "content": "their work schedule as well as their students\u0027 records. After storing the data, the Professor can have"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "benchan911"
        },
        "content": "quick access to the information in either a list or a calendar view. "
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Should work on any mainstream OS as long as it has "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[Java 11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) or above installed."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. Should be able to hold up to 1000 events without a noticeable sluggishness in performance for "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "benchan911"
        },
        "content": "typical usage."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "benchan911"
        },
        "content": "system admin commands) should be able to accomplish most of the tasks faster using commands "
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "benchan911"
        },
        "content": "than using the mouse."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "benchan911"
        },
        "content": "{More to be added in future revisions}"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### Appendix D: User Stories"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|add new events|creating new events|"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|delete existing events|delete unnecessary events|"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|add new attendance list|create new attendance list to be added to events|"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|delete existing attendance list|delete unnecessary attendance list|"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|add new performance list|create new performance list to be added to events|"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|delete existing performance list|delete unnecessary performance list|"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|add date and time to my events|organize my events|"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "|v1.0|professor|add venue to my events|locate events|"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v1.0|professor|edit my events|update my existing events|"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v2.0|professor|create a student list|link existing student list to performance list or attendance list|"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v2.0|professor|Create repeatable events without having the need to manually add in|easily create occurring events|"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v2.0|professor|find an event by name|locate an event without having to go through the entire list|"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "|v2.0|professor|view calendar of all my events|to see a overview of them|"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v2.1|professor|edit my student\u0027s attendance|update my existing student\u0027s attendance|"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "benchan911"
        },
        "content": "|v2.1|professor|find my student\u0027s attendance|locate an existing student\u0027s attendance|"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Set up"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Download the jar file and copy it into an empty folder."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Run the jar file by typing java -jar Pac-2.1.jar after going into the file\u0027s home directory "
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "folder in command terminal.  "
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### Adding an event"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Prerequisite: None"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event add n/1 v/2 d/2000-01-01 t/0000`    "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: An event is added with name, venue and datetime."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event add n/1 v/2`    "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: An event is added without datetime. A warning message about unknown "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  datetime is shown."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event add n/1 d/2000-01-01 t/0000`    "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: An event is added without venue."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event add n/1`    "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: An event is added with only name. A warning message about unknown "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  datetime is shown."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event add v/2`    "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: An event is added with default name and no datetime. A warning message "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  about unknown datetime is shown."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event add d/2000-01-01 t/0000` (no name and venue)    "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: No event is added. Error details shown."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event add n/` (only flag, no parameter)     "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: No event is added. Error details shown."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Other incorrect commands to try:  "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - either date or time, but not both, is given"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - adding something before flag"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### Deleting an event"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Prerequisites: At least one event must be added beforehand."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event delete i/1`     "
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: First event is deleted from the list. The name of the deleted "
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  event is shown."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event delete i/0` (or other index that is less than 1)   "
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: No event is deleted. Error details shown."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event delete i/10` (out of bound)     "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: No event is deleted. Error details shown."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event delete i/apple` (not an integer)    "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: No event is deleted. Error details shown."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event delete 1` (too short to look for flag)  "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "  Expected: No event is deleted. Error details shown."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- Test case: `event delete apple` (no flag)  "
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Expected: No event is deleted. Error details shown."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### Saving and loading corrupted data"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. Make sure you have some events and/or student lists to load.  "
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - You can use `event add`, and `studentlist add` to add some."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. Close the application using `bye` command.   "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - `All events are saved.` is shown if there are events to save."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - `All student lists are saved.` is shown if there are student lists to save."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    - They are saved under `data/`."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. Delete all commas and pipes under `eventlist.txt` to simulate data corruption.   "
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. Run the application again."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. You will see `...Corrupted event found. Only previous events are loaded.`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1. If you have unmodifed events before the corrupted event, they will be loaded "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "and saved."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Follow **all-in-one** command for following commands:  "
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Event**"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Add an event by typing  "
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`event add n/NAME`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. View the populated events by typing  "
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`event list`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. View the populated seminars by typing  "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`seminar list`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Delete an event by typing  "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`delete i/INDEX`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Edit an existing event\u0027s name by typing  "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`event editname i/INDEX n/NAME`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Edit an existing event\u0027s date and time by typing  "
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`event editdatetime i/INDEX d/DATE t/TIME`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Edit an existing event\u0027s venue by typing   "
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`event editvenue i/INDEX v/VENUE`  "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Calender**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. Add an event with date and time "
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "`event add n/work d/2020-04-05 t/1230`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Display calendar by entering  "
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "`calendar s/2 ay/19-20`  "
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Follow **step-by-step** command in console for following commands:  "
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Attendance**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Add attendance to attendance list by typing  "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`attendance add`"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Clear attendance list by typing  "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`attendance clear`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. View generated table for attendance list by typing  "
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`attendance view`  "
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Sort attendance list by typing  "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`attendance sort`  "
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Find attendance by typing  "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`attendance find`  "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Edit attendance by typing  "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`attendance edit`  "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Performance**"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Add performance to performance list by typing  "
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`performance add`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Delete a performance from performance list by typing  "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`performance delete`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. View generated table for performance list by typing  "
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`performance view` "
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Edit performance list by typing  "
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`performance edit`"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Sort performance list by typing  "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`performance sort`  "
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Student name list**"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Add name to student name list by typing  "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`studentlist add`"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Delete name from student name list by typing  "
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`studentlist delete`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. View generated table for student name list by typing  "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`studentlist view` "
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Find a student name in student name list by typing  "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`studentlist find`"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. Sort student list by typing  "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "benchan911"
        },
        "content": "`studentlist sort`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* *mainstream OS* - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* *flag* - anything that takes the form of  `?/`, e.g. `n/`, `i/`"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* *student list* - a list of students\u0027 name"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* *student list collection* - a collection of list of students\u0027 name"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* *attendance* - a combination of student\u0027s name and attendance status"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* *attendance list* - a list of students\u0027 name and attendance status"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* *performance* - a combination of students\u0027 name and result"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* *performance list* - a list of students\u0027 name and result"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* *Calendar* - Display columns of event in a chosen semester, each column represents a month "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "in the chosen semester "
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 287,
      "lowjiayee": 133,
      "benchan911": 282,
      "harithadiv": 94,
      "-": 22
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "# Personal Assistance Console (Pac)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Pac helps you keep track of your upcoming events."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Pac also allows you to add in attendance to keep track of your students and their grades. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Being a simple Command Line Interface (CLI) application, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Pac ensures its usability and suitability regardless of your expertise level."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 6,
      "-": 5
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "## Professor Assistant Console (Pac)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "![PAC](images/logo.png \"PAC\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "## Content Page  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. [Introduction](#1-introduction)  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    1.1. [What is Pac?](#11-what-is-pac)  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    1.2. [Who are our audience?](#12-who-is-this-app-for)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "2. [Setting Up](#2-setting-up)  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    2.1. [Requirements](#21-requirements)   "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    2.2. [Startup using Command Line](#22-startup-using-command-line)  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "3. [Quick Start](#3-quick-start)  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    3.1. [Using Pac](#31-using-pac)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "4. [Features](#4-features)  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.1. [Student List](#41-student)  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "4.1.1. [Add New Student List](#411-add-new-student-list)        "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.1.2. [View Student List](#412-view-all-existing-student-lists-from-the-student-list-collection)  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.1.3. [Clear Student List Collection](#413-clear-all-existing-student-lists-from-the-student-list-collections)   "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.1.4. [Delete Student List](#414-clear-all-existing-student-lists-from-the-student-list-collection)  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.1.5. [Find Student List](#415-find-existing-student-lists-from-the-student-list-collection)  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.1.6. [Sort Student List by Name](#416-sort-all-names-within-the-existing-student-lists-from-the-student-list-collection)  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.1.7. [Sort Student List by List](#417-sort-all-existing-student-lists-from-the-student-list-collection-by-name)  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2. [Event](#42-event)  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.1. [Add New Event](#421-add-new-event)  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.2. [View Event List](#422-list-events)  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.3. [Delete Existing Event](#423-delete-event)      "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.4. [Edit Event -name](#424-edit-event-name)      "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.5. [Edit Event -datetime](#425-edit-event-datetime)      "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.6. [Edit Event -venue](#426-edit-event-venue)  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.2.7. [Edit Event](#427-edit-event)    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "4.3. [Calendar](#43-calendar)  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "4.3.1 [View events in calendar format](#431-view-events-under-a-particular-time)   "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "4.4 [Attendance List](#44-attendance)    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "4.4.1. [Add New Attendance](#441-add-students-attendance-to-event)    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.2. [View Attendance List](#442-view-attendance-list)   "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.3. [Clear Attendance List](#443-clear-attendance-list)  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.4. [Sort Attendance by name](#444-sort-attendance-list-by-name)  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "4.4.5. [Sort Attendance by status](#445-sort-attendance-list-by-status)  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "4.4.6. [Find Attendance](#446-find-attendance)  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "4.4.7. [Edit Attendance](#447-edit-attendance)    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "4.5. [Performance List](#45-performance-list)     "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "4.5.1. [Add New Performance List](#451-add-performance-list)  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "4.5.2. [Delete Current Performance List](#452-delete-performance-list)   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "4.5.3. [View Performance List](#453-view-performance-list)   "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "4.5.4. [Edit Performance List](#454-edit-performance-list)   "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "4.5.5. [Sort Performance List](#455-sort-performance-list)    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "5. [Possible Console Messages and Reasons](#5-possible-console-messages-and-reasons)           "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "6. [FAQ](#6-faq)  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "7. [Command Summary](#7-command-summary)  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "8. [Contact Us](#8-contact-us)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### 1.1. What is Pac?"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Pac is a professor assistant console which helps you keep track of your "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "upcoming events. Pac also allows you to add in attendance to keep track "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "of your students and their grades. Being a simple Command Line Interface "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "(CLI) application, Pac ensures its usability and suitability regardless "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "of your expertise level."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### 1.2. Who is this app for?"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Pac is well suited for professors, teachers or anyone in a teaching profession who  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "prefers to use a CLI for managing events and students\u0027 data. If you can type fast,  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Pac can get your event management tasks done faster than traditional GUI apps. Interested?  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Jump to [Section 2](#2-setting-up) to get started. Enjoy! "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "### 2.1. Requirements "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Ensure you have [Java 11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "or above installed in your Computer."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1.  Download the latest Pac-2.1.jar from [here](https://github.com/AY1920S2-CS2113T-T12-4/tp/releases)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Copy the file to the folder you want to use as the home folder for this application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 2.2 Startup using Command Line"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1.  Open your terminal."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "1.  Navigate to the home folder containing Pac."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1.  cd followed by the file path into the terminal as shown below:  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    ![cdImage](images/filepath.png \"filepath\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1.  Type `java -jar Pac-2.1.jar` and press **Enter**."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1.  You should see this screen if everything is successful:    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    ![screen](images/startup.png \"startup screen\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## 3. Quick Start"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### 3.1. Using Pac"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "You can type any command, then press **Enter** to execute it."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": "\t"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benchan911"
        },
        "content": "e.g. typing help then pressing **Enter** will open the help window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Some example commands to try:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* `event list`\t\t\tList all events"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* `event add n/CS1010` \tAdd an event named “CS1010”"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `student add`         Create a new student list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `bye`\t\t\t\t    Exits the application"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Refer to [“Features”](#4-features) for details of each command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "## 4. Features "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 4.1. Student List"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This section for student related commands is done in chronological order. Please follow the numbering to get"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "a clearer understanding on how you can use the commands. Do note that the student list created are stored under"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "a student list collection. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.1.1. Add New Student List"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Creates a student list and adds it to the student list collection, that can be used for adding attendance and "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benchan911"
        },
        "content": "performance. "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Please note the following points when you are using this feature:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. Users are NOT allowed to add in duplicated student names or duplicated student list names. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. student names and student list names are CASE-INSENSITIVE."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    1. For example, you will not be able to add in `cs1010` if there is an existing `CS1010` found in the student"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    list collection"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist add"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following shows a successful case of adding a new student list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist add"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    What is the name of your list?"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS2113T Tut"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please enter a student Name. If you are finished, enter done."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e John"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please enter a student Name. If you are finished, enter done."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Jodi"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please enter a student Name. If you are finished, enter done."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e done"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Student List created, named : CS2113T Tut"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List      |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will occur if there is already an existing student list with the same name. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist add"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    What is the name of your list?"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS2113T Tut"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    There is already an existing list name!"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will occur if there is already an existing student list with the same name. The student list will not be"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benchan911"
        },
        "content": "created and if you wish to create the student list, you will need to retype the command `studentlist add`. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist add"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    What is the name of your list?"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS2040C"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please enter a student Name. If you are finished, enter done."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e John Doe"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please enter a student Name. If you are finished, enter done."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e John Doe"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Duplicated Student Name found."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Student List Add Command Failed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.1.2 View all existing student lists from the student list collection"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benchan911"
        },
        "content": "View all existing students lists from student list collection."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist view"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there is at least one existing student list in the student list collection. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist view"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there are no existing student list in the student list collection."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist view"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    There is no existing student list.              "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.1.3 Clear all existing student lists from the student list collections"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Clear all existing student lists from the student list collection. This is a clear all command. If you wish to delete "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benchan911"
        },
        "content": "a specific student list, please use the `studentlist delete` instead."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist clear"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there is at least one existing student list in the student list collection."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist clear"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    The Student List Collection is cleared"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there are no existing student list in the student list collection."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist clear"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    There is no existing student list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.1.4 Clear all existing student lists from the student list collection"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Delete a specific student list from the student list collection base on its index. If you wish to delete all student "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "benchan911"
        },
        "content": "lists in the student list collection, please use `studentlist clear` instead."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist delete"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there is at least one existing student list in the student list collection. "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist delete"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the index of the list you want to delete."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e 1"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Here is the updated Student List Collection"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there are no existing student list in the student list collection."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist delete"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    There is no existing student list.               "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.1.5 Find existing student list(s) from the student list collection"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Find existing student list(s) from student list collection base on keyword."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist find"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there are existing student list in the student list collection."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist find"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Displaying all student list: "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the list name you are searching for."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    You have 2 matched:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Here\u0027s the Search Result(s)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    [1]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List      |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    [2]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List      |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist find"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the list name you are searching for."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CG"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    You have 1 matches:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Here\u0027s the Search Result(s)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    [1]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List      |  CG2028                                                                            |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist find"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the list name you are searching for."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e EG"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Nothing match your description : EG"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there are no existing student list in the student list collection."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist find"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    There is no existing student list.        "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.1.6 Sort all names within the existing student lists from the student list collection"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Sort all existing student lists from the student list collection by name. Regardless whether the lists are "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "benchan911"
        },
        "content": "in order, this command will force all existing lists to be sorted by their list name within the student list collection."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist sort"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:     "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there is at least one existing student list in the student list collection."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist view"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist sort"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please Key in either \u0027name\u0027 or \u0027list\u0027."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e name"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Student List is sorted by name within the Student List Collection"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist view"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.1.7 Sort all existing student lists from the student list collection by name"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Sort all existing student lists from the student list collection by name. Regardless whether the lists are "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "benchan911"
        },
        "content": "in order, this command will force all existing lists to be sorted by their name."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist sort"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:     "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there is at least one existing student list in the student list collection."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist view"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Robert                                                                            |"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam                                                                               |"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Carl                                                                              |"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John                                                                              |"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist sort"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please Key in either \u0027name\u0027 or \u0027list\u0027."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e list"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    StudentList sorted by name within the lists"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e studentlist view"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CG2028                                                                            |"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Ben                                                                               |"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Fiona                                                                             |"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Robert                                                                            |"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 4         |  Sam                                                                               |"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #2   |  CS2040C                                                                           |"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Alice                                                                             |"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Bobby                                                                             |"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Carl                                                                              |"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #3   |  CS2113T Tut                                                                       |"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Jodi                                                                              |"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  John                                                                              |"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "benchan911"
        },
        "content": "   "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### 4.2. Event"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.1. Add New Event"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Add a new event to the event list. "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Format: `event add n/NAME [d/DATE t/TIME] [v/VENUE]`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `Name` and `Venue` accepts input with spaces."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* `Date` and `Time` must either be provided together, or not provided at all. "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* The Date should be in the format: yyyy-mm-dd.  "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* The Time should be in the 24-hour format: HHmm."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Flags can be arranged in any order."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "* If only `Venue` is provided, `Name` will be set to a default value based on "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "current time (e.g. event_1586607776)."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "benchan911"
        },
        "content": " "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event add n/dinner with collegue"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event add n/World Cup d/2022-11-21 t/0000"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event add n/soccer match v/Kallang d/2020-01-23 t/1900"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    Datetime is not set. If you wish to add datetime, please enter the correct format:yyyy-MM-dd HHmm"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    New Event: dinner with collegue was added successfully to your Event list."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    New Event: World Cup was added successfully to your Event list."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    New Event: soccer match was added successfully to your Event list."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Examples of bad input:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    \u003e\u003e\u003e event add n/NS [d/2020-02-01 t/0000] [v/Tekong]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Expected outcome of bad input:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Datetime is not set. If you wish to add datetime, please enter the correct format:yyyy-MM-dd HHmm"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    New Event: NS [d/2020-02-01 was added successfully to your Event list."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.2. List Events"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "benchan911"
        },
        "content": "List all events."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Format: `event list`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Here are all the events in your list."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    1. Event: dinner with collegue"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    2. Event: World Cup, time: Mon, Nov 21 2022 0000"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    3. Event: soccer match, time: Thu, Jan 23 2020 1900, venue: Kallang"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.3. Delete Event"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Delete an existing event from the event list."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Format: `event delete i/INDEX`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event delete i/3"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event delete i/4"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Event: soccer match was deleted successfully from your Event list."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Index cannot be found. Check your index from the list."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.4. Edit Event Name"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Change the name of an existing event."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Format: `event editname i/INDEX n/NEW_NAME`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* alphabet cases for the command is not important"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event editname i/1 n/lunch with colleague"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Your Event name was changed from |dinner with collegue| to |lunch with colleague|."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.5. Edit Event Datetime"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Change the date and time of an existing event. "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "benchan911"
        },
        "content": "   "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Format: `event editdatetime i/INDEX d/NEW_DATE t/NEW_TIME`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* alphabet cases for the command is not important.    "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* The date should be in the format: yyyy-mm-dd.  "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* The time should be in the 24-hour format: HHmm."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event editdatetime i/1 d/2020-03-23 t/1200"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Your Event date and time was changed from || to |Tue, Mar 03 2020 1200|."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Event: lunch with colleague, time: Mar 23 2020 1200"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.6. Edit Event Venue"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Change the venue of an existing event."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Format: `event editvenue i/INDEX v/NEW_VENUE`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* alphabet cases for the command is not important"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event editvenue i/1 v/Marina Bay Sands"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Your Event venue was changed from || to |Marina Bay Sands|."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Event: lunch with colleague, time: Tue, Mar 23 2020 1200, venue: Marina Bay Sands"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### 4.2.7. Edit Event"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Change an existing event."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Format: `event editevent i/INDEX n/NEW_NAME [t/NEW_TIME d/NEW_DATE] [v/NEW_VENUE]`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* alphabet cases for the command is not important"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event editevent i/1 n/lunch by myself v/home"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Your Event was edited from |Event: lunch with colleague, time: Tue, Mar 03 2020 1200, venue: Marina Bay Sands| to |Event: lunch by myself, venue: home|."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Datetime is not set. If you wish to add datetime, please enter the correct format:yyyy-MM-dd HHmm"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### 4.3 Calendar "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### 4.3.1 View events under a particular time"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "View events under a particular semester and academic year in a calendar format. In the calendar view, it shows the date of the event, type "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "of the event in brackets, and name of the event. "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Format: `calendar s/SEMESTER ay/YY_ONE-YY_TWO `"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Both the semester and academic year should be provided."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Valid semester numbers can only be 1 or 2. "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Valid academic year refers to any 2 *consecutive* years with a hyphen separating them. Each year should be entered in a 2 digit format,"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "  i.e. ay/07-08, ay/19-20.  "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Order of the flags *matters*."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Note that your event list **should** contain existing events to view calendar. The following *steps* will guide you to achieve this:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Step 1: Add events with date and time that corresponds to semester 2 of academic year 19/20, similar to the event list shown below. "
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "To view the events in a list, type the command below. "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    \u003e\u003e\u003e event list "
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    \u003e\u003e\u003e Here are all the Events in your list."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       1. Event: orientation, time: Mon, Jan 13 2020 0800"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       2. Event: presentation, time: Sat, Feb 01 2020 1230"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       3. Event: midterms, time: Fri, Mar 13 2020 1000"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       4. Seminar: covid19, time: Sat, Apr 04 2020 1500"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       5. Event: birthday, time: Sun, Apr 05 2020 1900"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       6. Event: finals, time: Mon, May 04 2020 0930"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Step 2: To view the events above in a calendar format, type the command below."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Command: "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e calendar s/2 ay/19-20"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     ___________________________________________________________________________________________________________________________________ "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                                                             SEMESTER 2 AY 19/20 "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     ___________________________________________________________________________________________________________________________________ "
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    | JAN                 | FEB                 | MAR                 | APR                 | MAY                 | JUN                 |"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |_____________________|_____________________|_____________________|_____________________|_____________________|_____________________|"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    | 13th [E]: orient... | 1st [E]: present... | 13th [E]: midterms  | 4th [S]: covid19    | 4th [E]: finals     |                     |"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |_____________________|_____________________|_____________________|_____________________|_____________________|_____________________|"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |                     |                     |                     | 5th [E]: birthday   |                     |                     |"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    |_____________________|_____________________|_____________________|_____________________|_____________________|_____________________|"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### 4.4 Attendance"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This section for attendance related commands is done in chronological order. Please follow the numbering to get"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "benchan911"
        },
        "content": "a clearer understanding on how you can use the commands."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### 4.4.1 Add students’ attendance to event"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Add a student’s attendance to the attendance list.  "
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console. "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "benchan911"
        },
        "content": "You may wish to use an existing list found in student list collection."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Please note that if there are existing students in the attendance list of the chosen event, it will add to the existing"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "benchan911"
        },
        "content": "students list. If you wish to start a new attendance list of the chosen event, please use `attendance clear` to clear "
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the attendance list first."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance add`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance add"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If the event is found, you can choose to add the student\u0027s attendance by manually key in each student, or you may choose"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the alternative provided by Pac: record using an existing name list located under student list collection. "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Do note that you need to have an existing name list before you are using this shortcut."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "benchan911"
        },
        "content": "If you choose to create a new attendance list, the new list will be added to the student list collection."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "benchan911"
        },
        "content": "  "
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will show a success example of *using an existing name list to add attendance*. "
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Would you like to import an existing student list? If yes, input \u0027yes\u0027. Else, input anything."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e yes"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | List #1   |  CS1010 Tutorial                                                                   |"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Jodi Doe                                                                          |"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Sam Roe                                                                           |"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________________________________________|"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please choose the name list you wish to use by its index."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e 1"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the attendance status for student Jodi Doe [Y/N]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e N"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of Jodi Doe (Absent) has been taken successfully under event CS1010 Tutorial."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the attendance status for student Sam Roe [Y/N]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Y"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of Sam Roe (Present) has been taken successfully under event CS1010 Tutorial."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    AttendanceList added"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will show a success example of *creating a new attendance list using a multi-line interface*."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Would you like to import an existing student list? If yes, input \u0027yes\u0027. Else, input anything."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e no"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Are you a new user? If so, please type \u0027yes\u0027 "
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e yes"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in student name."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e John Doe"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    To mark the student as present, please use \u0027y\u0027 or \u0027Y\u0027."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    By default the student will be marked as absent, if any other input is given."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Y"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of John Doe (Present) has been taken successfully under event CS1010 Tutorial."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in student name."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Sam Roe"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    To mark the student as present, please use \u0027y\u0027 or \u0027Y\u0027."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    By default the student will be marked as absent, if any other input is given."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e N"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of Sam Roe (Absent) has been taken successfully under event CS1010 Tutorial."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in student name."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e David Chang"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    To mark the student as present, please use \u0027y\u0027 or \u0027Y\u0027."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    By default the student will be marked as absent, if any other input is given."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Z"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of David Chang (Absent) has been taken successfully under event CS1010 Tutorial."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in student name."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e done"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    You have successfully added 3 to the attendance list."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will show a success example of *creating a new attendance list using a single line interface*."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Please note that the name provided must be connected. \"John Doe\" is not accepted. If you wish to add in name"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "benchan911"
        },
        "content": "with spaces, please use the other method. Future releases will allow names like \"John Doe\" to be added. "
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Would you like to import an existing student list? If yes, input \u0027yes\u0027. Else, input anything."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e no"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Are you a new user? If so, please type \u0027yes\u0027 "
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e no"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key following format:"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    n/Name p/Status [Y/N]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Status will be take as absent if the format above is not followed."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e n/JohnDoe p/Y"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of JohnDoe (Present) has been taken successfully under event CS1010 Tutorial."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key following format:"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    n/Name p/Status [Y/N]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Status will be take as absent if the format above is not followed."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e n/SamRoe p/N"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of SamRoe (Absent) has been taken successfully under event CS1010 Tutorial."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key following format:"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    n/Name p/Status [Y/N]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Status will be take as absent if the format above is not followed."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e n/DavidChang p/Z"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance of DavidChang (Absent) has been taken successfully under event CS1010 Tutorial."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key following format:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    n/Name p/Status [Y/N]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Status will be take as absent if the format above is not followed."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e done"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    You have successfully added 3 to the attendance list."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### 4.4.2 View attendance list"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "benchan911"
        },
        "content": "View the attendance list under a certain event.  "
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance view`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs if there is an existing attendance list."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Please key in the name of event."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        | 1         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        | 2         |  Sam Roe                                           |  Present                     |"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        | 3         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "benchan911"
        },
        "content": "               "
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        "
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs if there is no existing attendance list."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Please key in the name of event."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        \u003e\u003e\u003e CS2113T Tutorial"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Attendance List is empty"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### 4.4.3 Clear attendance list"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Clear the attendance list under a certain event.  Attendance list is cleared regardless whether "
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "benchan911"
        },
        "content": "the attendance list under the event is empty."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance clear`"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will show a successful clearing of an existing attendance list."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Sam Roe                                           |  Absent                      |"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance clear"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance List cleared for Event: CS1010 Tutorial"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance List is empty"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will show the message shown when clearing of an empty attendance list."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance clear"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance List is already empty"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            "
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### 4.4.4 Sort attendance list by name"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Sort the attendance list by name in alphabetical order under a certain event.  "
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance sort`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following shows a successful sort the attendance list by name."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      \u003e\u003e\u003e attendance sort"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      Please key in the name of event."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "      "
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      Please Key in either \u0027name\u0027 or \u0027status\u0027."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      "
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs if there is no existing attendance list."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      "
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      \u003e\u003e\u003e name"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      An empty list cannot be sorted"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      "
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### 4.4.5 Sort attendance list by status"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Sort the attendance list by attendance status under a certain event with student that are absent on the top.  "
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command:  `attendance sort`"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following shows the existing attendance list under the event CS1010 Tutorial."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  Sam Roe                                           |  Absent                      |"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following shows a successful sort the attendance list by status."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance sort"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please Key in either \u0027name\u0027 or \u0027status\u0027."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e name"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Attendance List is sorted by attendance name for Event:  CS1010 Tutorial"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  Sam Roe                                           |  Absent                      |"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs if there is no existing attendance list."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      \u003e\u003e\u003e attendance sort"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      Please key in the name of event."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "      "
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      Please Key in either \u0027name\u0027 or \u0027status\u0027."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      "
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      \u003e\u003e\u003e status"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      An empty list cannot be sorted"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      "
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      Please key in the name of event."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      "
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      | 1         |  Sam Roe                                           |  Absent                      |"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      | 2         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      | 3         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      "
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### 4.4.6 Find attendance"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Find a student\u0027s attendance under a certain event."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: `attendance find`"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following shows a successful find."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Mary Poppins                                      |  Present                     |"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance find"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please type the name of the student you are looking for."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Mary"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Search Results"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Mary Poppins                                      |  Present                     |"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there is no names matching the name that the user inputs."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance find"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please type the name of the student you are looking for."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Richard"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Search Results"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    There is no student named: Richard"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when the attendance list is empty."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance find"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    The attendance list is currently empty. Please add attendance instead."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "#### 4.4.7 Edit attendance"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Edit a student\u0027s attendance under a certain event. "
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This allows the user to overwrite the student\u0027s name or status."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Command: `attendance edit`"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance view"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Sam Roe                                           |  Absent                      |"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following shows when you want to mark student `Sam Roe` as `Present`."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance edit"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Sam Roe                                           |  Absent                      |"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the index of the student you wish to edit"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e 1"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Sam Roe                                           |  Absent                      |"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Do you wish to change the `name` or change the `status`"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e status"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    What do you want to change the status to? [Y/N]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Y"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Sam Roe                                           |  Present                     |"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following shows when you want to change student\u0027s name from `Sam Roe` to `Mary Poppins`."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance edit"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Sam Roe                                           |  Present                     |"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please state the index of the student you wish to edit"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e 1"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Sam Roe                                           |  Absent                      |"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Do you wish to change the `name` or change the `status`"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e name"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    What do you want to change the name to?"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e Mary Poppins"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                                   |  Status                      |"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  Mary Poppins                                      |  Absent                      |"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 2         |  David Chang                                       |  Absent                      |"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 3         |  John Doe                                          |  Present                     |"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following occurs when there is no existing attendance list."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e attendance edit"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e CS1010 Tutorial"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    The attendance list is currently empty. Please add attendance instead."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "### 4.5. Performance List"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### 4.5.1. Add Performance List"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Add new students\u0027 result to an empty or existing performance list. Pac offers "
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "you the absolute freedom to add students\u0027 result in any form, i.e. mark or grade.  "
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "You are allowed to add the student\u0027s result by importing a student list or manually key"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "in students\u0027 performance. This section will demonstrate two ways of adding a performance "
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "list.  "
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Do note that you have to have an existing name list before you are using the alternative method.  "
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console. "
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Format: `performance add`"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Step by step guide: "
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e performance add"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance. "
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e Event"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The following will show a success example of using a current name list to add performance. "
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Would you like to import an existing student list? If yes, input \u0027yes\u0027. Else, input anything."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e yes"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please choose the name list you wish to use. "
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    (shows a list of list names)"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e 1"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the result for (student1 name) "
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e A"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    The result of student (student name) has been added successfully under event Event."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    If you are adding student\u0027s result manually, record next student: (format: n/name r/result). When you are finished, input \u0027done\u0027."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the result for (student2 name)"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e A"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e The result of student (student2 name) has been added successfully under event Event."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    If you are adding student\u0027s result manually, record next student: (format: n/name r/result). When you are finished, input \u0027done\u0027. "
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    You have successfully added 2 result(s) to the performance list."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The following will show a success example of adding performance list manually. "
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Would you like to import an existing student list? If yes, input \u0027yes\u0027. Else, input anything."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e nooo"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the performance you want to add in this format: n/name r/result"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    When you are finished, input \u0027done\u0027 "
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e n/Student1 r/A"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    The result of student Student1 has been added successfully under event Event."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    If you are adding student\u0027s result manually, record next student: (format: n/name r/result). When you are finished, input \u0027done\u0027. "
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e n/Student2 r/B"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    The result of student Student2 has been added successfully under event Event."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    If you are adding student\u0027s result manually, record next student: (format: n/name r/result). When you are finished, input \u0027done\u0027. "
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e done"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    You have successfully added 2 result(s) to the performance list."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        "
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Note:*  "
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*1. All commands above are not case sensitive.*  "
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*2. Student name is restricted to one word only for manual add, i.e. `n/Student Name r/A` is an invalid input.*  "
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*3. However, you may import an existing student list for multiple word names.* "
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### 4.5.2. Delete Performance List"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Delete a student’s result to the performance list. You are able to select the performance"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "list under any existing Event and delete a student\u0027s data under that list.  "
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console.  "
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Format: `performance delete`"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Step by step guide: "
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e performance delete"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance. "
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e event"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of student that you wish to delete his/her performance "
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e name"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    The result of student (name) has been deleted successfully under event event."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If you are trying to delete a performance from an empty performance list, an error message"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "will be shown as below:"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e performance delete"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance. "
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        "
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    No performance list under this event."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        "
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Note: All commands above are not case sensitive.*"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### 4.5.3. View Performance List"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "View the list of students\u0027 result under a certain event. Pac will generate a nice "
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "looking table containing the performance data you wish to view automatically.  "
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "benchan911"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console. "
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Format: `performance view`"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Step by step guide: "
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e performance view"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    \u003e\u003e\u003e event"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    (example of Table format list is shown below)"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | index     |  Name of Student                    |  Result                                     |"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    | 1         |  XX                                 |  A                                          |"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If the performance list you wish to view is empty, you will see the following message:"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     No performance list under this event"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    | index     |  Name of Student                                   |  Result                      |"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Note: All commands above are not case sensitive.*"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### 4.5.4. Edit Performance List"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Edit the list of students\u0027 result under a certain event. You are allowed to edit "
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "either student\u0027s name or result.  "
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console. "
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Format: `performance edit`"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Step by step guide to edit name: "
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e performance edit"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the name of student that you wish to edit his/her performance "
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e Alice"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the type of performance parameter you want to edit: name / result"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e name ***"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the student\u0027s new name"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e Carl"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    The student name has been changed to Carl successfully."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Step by step guide to edit result: "
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e performance edit"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the name of student that you wish to edit his/her performance "
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e Alice"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the type of performance parameter you want to edit: name / result"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e result"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the student\u0027s new result"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e A"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    The student result has been changed to student successfully."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "If you have selected a wrong performance parameter, i.e. anything but \u0027name\u0027 or \u0027result\u0027, "
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "an error message will be shown as below:"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the type of performance parameter you want to edit: name / result"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        "
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e type"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Wrong type of parameter chosen."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Note: All commands above are not case sensitive.*"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### 4.5.5. Sort Performance List"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Sort the list of students\u0027 result under a certain event by either student\u0027s name or result.  "
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "This is a step by step command and you may follow the instructions given by the console. "
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Format: `performance sort`"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Step by step guide to sort performance list by name: "
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e performance sort"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the name of event that you wish to access to its student\u0027s performance."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e event"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Please key in the name of student that you wish to edit his/her performance "
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e Alice"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Do you want to sort by students\u0027 name or result?"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    \u003e\u003e\u003e name ***"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Performance List is sorted by Performance name for Event:  event"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    "
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "You should follow the same procedure to sort by result, while changing your input from"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "`name` to `result` at the `***` line.  "
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- Result in grade will be sorted from highest to lowest.  "
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- Result in mark will be sorted from smallest to largest by its most significant digit.  "
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- If the students\u0027 result are of different form in the same list, ie some are in grades,"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "while some are in marks, result will be sorted in the order of mark, followed by grades.   "
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "*Note: All commands above are not case sensitive.*"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "## 5. Possible Console Messages and Reasons:  "
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. If you entered a wrong command type, ie. not specifying "
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "which category your command belongs to"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "       Please provide a valid command category. Refer to \u0027help\u0027 for more info."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. If you entered two flags, i.e. n/work n/presentation:"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "       Please provide only 1 name flag."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       "
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. If you entered two similar flag for a Performance command, e.g. adding performance list to event"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "named Event.  "
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "When prompted to input student\u0027s name and result, given input: `n/Name1 n/Name2 r/A`, data after the latest "
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "detected flag will be used:"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        The result of student name2 has been added successfully under event Event."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. If you did not enter any flag, ie. event add: "
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       Argument is required for command \u0027add\u0027"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. If event cannot be found in the list:"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "           "
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "benchan911"
        },
        "content": "       Event is not found in the list."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       "
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. If you added an event with no date and time:"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       Datetime is not set. If you wish to add datetime, please enter the correct format:yyyy-MM-dd HHmm"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       "
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "1. If there are no events in your event list under a particular semester and academic year:"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "       Unable to find any events for this time period."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. If event list is empty:    "
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        "
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "benchan911"
        },
        "content": "       The event list is empty."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "       "
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. If student list is empty:"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "       "
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "       There is no existing student list."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "       "
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "benchan911"
        },
        "content": "1. If attendance list under an event is empty: *Message may be different*"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "benchan911"
        },
        "content": "      "
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "benchan911"
        },
        "content": "       No attendance list under this event."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "benchan911"
        },
        "content": "       "
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "1. If performance list under an event is empty:"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "benchan911"
        },
        "content": "       No performance list under this event."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "       _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "       | index     |  Name of Student                                   |  Result                      |"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "       |___________|____________________________________________________|______________________________|"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "           "
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "**A**: You can look for your data at the folder \"data\", containing `eventlist.txt` "
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "and `studentlist.txt`. Running this application in the folder containing \"data\" "
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "folder will automatically load your previously saved data."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "---"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**Q**: How do i get a calendar view of the whole year? "
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**A**: It is not possible to view all the 12 months as this application is geared towards a professors schedule. Therefore,"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "you can only view events under a particular semester and academic year. "
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "---"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "**Q**: Why is there a general event, and a specific event ie. seminar in this "
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "application? "
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**A**: We wanted to only distinguish between seminar and events in this version. Future patches will "
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "allow users to add more types of events in this application. "
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "---"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Q**: Why does pac use different types of command for different features, i.e."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "step-by-step command for performance and all-in-one command for event?"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**A**: We want to enhance user experience when using pac, and believe that "
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " implementing step-by-step command will do so by reducing the number of flags"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " and command format a user has to remember, making it easier for using pac.  "
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " Currently, features in performance, attendance and student list are using"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " step-by-step command, and we will synchronise the command type according to "
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " future feedback to fit user needs.    "
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "---"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "**Q**: Why do I see a bunch of events and/or student lists added when I launch "
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "the application?"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "**A**: The events and student lists that you entered during your previous usage "
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "were saved in your computer. Now, when you relaunch the application, those events and "
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "student lists are loaded up automatically."
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "---"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "## 7. Command Summary"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Student**"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Add student list `studentlist add`"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* View student list `studentlist view`"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Clear student list collection `studentlist clear`"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Delete student list `studentlist delete`"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Find student list `studentlist find`"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Sort student list `studentlist sort`  "
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Event**"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Add event `event add n/NAME d/DATE t/TIME v/VENUE`"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* View event list `event list`"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Edit name of existing event `event editname i/INDEX n/NAME`"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Edit date and time of existing event `event editdatetime i/INDEX d/DATE t/TIME`"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Edit venue of existing event `event editvenue i/INDEX v/VENUE`"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Delete event `event delete i/INDEX`  "
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Calender**"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* View calendar `calendar s/SEMESTER ay/YEAR_ONE-YEAR_TWO`"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Attendance**  "
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Add attendance `attendance add`"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* View attendance list `attendance view`"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Clear attendance list `attendance clear`"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Sort attendance list `attendance sort`"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Edit attendance `attendance edit`"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "benchan911"
        },
        "content": "* Find attendance `attendance find`"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Performance**"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Add performance `performance add`"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* View performance list `performance view`"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "* Delete performance of a student `performance delete`"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* Edit performance of a student `performance edit`"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "* Sort performance list `performance sort`"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "## 8. Contact Us"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "If you have further queries or feedback on Pac, please contact us at [contact_us@pac.com](contact_us@Pac.com)"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 277,
      "lowjiayee": 88,
      "benchan911": 1021,
      "harithadiv": 121,
      "-": 24
    }
  },
  {
    "path": "docs/team/anqi-nus.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "## Yang Anqi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "### PROJECT: Professor Assistant Console (PAC) "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Pac is a event scheduler used by professors which helps to keep track of events. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Attendance and performance of students can be tracked under each event. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The user interacts with it using a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Major enhancement 1: added all features of performanceList to events"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**What it does**: "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "A performanceList can only exist under a Event, ie. Event consist of performanceList.  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "A performanceList consist of a list of performance, ie. student\u0027s name and result.  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "There are 5 main features under performanceList, with similar command `performance feature`, "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "with `feature` being one of the following.  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " 1. `Add`: add a student\u0027s performance to the performance list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " 1. `Delete`: delete a student\u0027s performance from the performance list by his/her name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " 1. `Edit`: edit student\u0027s name or result in his/her performance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " 1. `Sort`: sort performance list by name or result"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " 1. `View`: view generated table of students\u0027 performance under a event  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Justification**: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Users will be able to use the basic features to attach an performanceList to a specific event. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "In the future, we will increase type of event, e.g. exam, tut. Even in the current version, "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "users are allowed to add these type of events under the general category Event. Thus, we "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "attach performance list under a Event to allow professors to manage their students\u0027 performance.  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Highlights**: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "All five features are adopting step-by-step command to provide clear instructions to users. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "All the various commands are handled by the `PerformanceCommandInterpreter`  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Major enhancement 2: added table view of lists"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**What it does**: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Allows user to view the different list clearly in a self generated table form."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Below shows an example of viewing an attendance list.  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    _________________________________________________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    | index     |  Name of Student                    |  Attendance Status                          |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    | 1         |  John Doe                           |  Present                                    |"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    | 2         |  Jodi Doe                           |  Absent                                     |"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    |___________|_____________________________________|_____________________________________________|"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Each box in the table has fixed width, they are not allowed to shorten or lengthen according"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "to element size. Any string longer than the width of the box containing it, will be cut"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "to a shorter string. The characters hidden are shown by \u0027...\u0027 at the end of the string.  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Justification**:  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- A table shows the data clearer than a list, as heading, column and rows provide a "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "quick analysis of which category does the data belong to.   "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "- Fixed width: This is because in a Command Line Interface, we do expect a maximum size"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "of table, i.e. the size of screen. To prevent possible distortion of table, we decided to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "make the width fixed.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Highlights**: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "The table can be reused to represent different type of information, by changing its headings. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "#### Major enhancement 3: added help feature"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**What it does**: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "A help function to the users, that consist of a summary of commands for different features"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "of Pac.  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Justification**: "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Users will be able to get immediate help from the app itself when he/she is unclear of "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "certain command format.  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Highlights**: "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "It is a levelled help command, ie. user can choose which type of command he/she needs at"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "the first level. The user will only see a short and sweet help message introduction "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "when he/she enters `help`.  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "##### Minor enhancement 1: tested studentList feature feasibility before actual implementation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "##### Minor enhancement 2: added performanceCommandInterpreter and performanceParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "##### Code contributed: [here](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003danqi-nus)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "##### Other contributions:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Testing**: "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "I have written tests for `PerformanceListTest` and `PerformanceTest`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Necessary general code enhancements**: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Improved synchronisation of code by checking method and variable"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " names with similar use, to make sure they have similar name and"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " abide by naming rules.  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Improved readability of code by SLAP hard during and after coding.  "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Refactored code structure at initial stage of tp, to ensure"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " pac has common structure in all interpreters"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Update document that are not specifc to a feature**: "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Added target user profile in user guide. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Added to FAQ in the user guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Added content page to user guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Added command summary in the user guide"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Added possible console messages and reasons in user guide "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Maintaining issue tracker**: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Set up issue tracker"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Added issues pertaining to bugs, feature flaws or features related to features mentioned above. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "Linked these issues to my PRs promptly. "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Documentation**: "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "I have written in the User Guide and Developer Guide for all the features/enhancements I have mentioned above, as well "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " as Add, Delete, Clear and View functions for Student feature.  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "I have drawn all class diagram and sequence diagram for all the features/enhancements I have mentioned above, as well"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "as Add, Delete, Clear and View functions for Student feature.  I have drawn class diagram for Student feature.  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "**Community**: "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "PRs reviewed (with non-trivial comments):  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "[#161](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/161)  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "[#36](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/36)   "
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 106
    }
  },
  {
    "path": "docs/team/benchan911.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "## Chan Ee Zheng, Benjamin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": "### Project: Professor Assistant Console (PAC)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "Pac is a event scheduler used by professors which helps to keep track of events. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "The user interacts with it using a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Code contributed: [here](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dbenchan911)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Major enhancement 1: added the ability to add to studentListCollection"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**What it does**: "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Allows user to create a `studentList` without a need to tag it to a specific `attendanceList` "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    and/or `performanceList`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Justification**: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    To speed up the process when a specific name list is used multiple situation for instance in a repeated event with "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    different attendanceList and performanceList. User will be provided an option to import existing events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Highlights**:  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    The benefit of having this enhancement is that users will save time especially when adding the same `studentList` "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    to multiple different events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Major enhancement 2: added basic features of attendanceList to events"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**What it does**: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Allows user to `add` an `attendanceList` to a specific event, `clear` an existing attendanceList and/or "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    `view` an existing attendanceList in a specific event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Justification**: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Users will be able to use the basic features to attach an attendanceList to a specific event and be able to view "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    or clear the attendanceList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Highlights**: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    All the various commands are handled by the `AttendanceListCommandInterpreter`. The `add` feature "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    for `attendanceList` gives user the opinion to enter using a single line or multi line interaction when creating "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    a new list. This is suitable for the target audience as they have varying expertise level. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Future enhancement**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    would be providing user the option to add to existing attendanceList or delete a specific attendance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Major enhancement 3: added the ability to `modify` attendanceList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**What it does**: "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Allows user to modify the contents of the `attendanceList` in a specific event such as `find` `attendance` in a "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    specific event or `sort` `attendanceList` either by the students name or status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Justification**: "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Users will be able to use advance features such as sorting by name, sorting by status or find to quickly process"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    the information. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Highlights**: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    This enhancement is to allow user to do some data processing of the `attendanceList` so that the data recorded is"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    more meaningful to their work. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Future enhancement** would be providing a full report on each student so that the "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    professor can quickly take appropriate actions such as emailing a particular student to attendance class.    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Minor enhancement 1: added the ability to create new studentList via attendanceList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**What it does**:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    User will automatically create a new studentList when they create a new attendanceList instead of using an "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    existing list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Justification**:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    Users need not retype the list when creating multi events with the same attendance list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "**Highlights**:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    This enhancement will automatically create a new studentList with the name of the event. If there is an existing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    list with the same name, it will append a number to the list name to ensure no duplicate studentList in "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    studentListCollection."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Contributions to Documentation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- For the User Guide, I have written features related to Attendance and StudentList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- For the Developer Guide, I have written features related to Attendance and advance feature for "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "  StudentList such as `findStudentList`, `SortStudentListByList`, `SortStudentListByName`. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "##### Contributions to team-based tasks:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- Added issues pertaining to bugs, feature flaws or features related to features mentioned above. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- Linked these issues to my PRs promptly with their respective labels."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- Contributed to Release management"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "#### Contributions beyond the project team"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- Added target user profile and user stories"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- Added onto the FAQ in the user guide"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- Added onto command summary in the user guide"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "##### Review Contributions "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "- PRs reviewed (with non-trivial comments)  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[#116](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/116), "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[#164](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/164), "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "[#166](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/166) "
      }
    ],
    "authorContributionMap": {
      "benchan911": 91
    }
  },
  {
    "path": "docs/team/harithadiv.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "# Haritha Divakaran - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "## PROJECT: Professor Assistant Console (PAC)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Pac is a event scheduler used by professors which helps to keep track of events."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "The user interacts with it using a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "It is written in Java, and has about 4.5k LOC."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Major enhancement 1: added the ability to view events in a `calendar` "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- **What it does**: Allows the user to view events in a calendar format. The user has to input only the "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "semester and the academic year, and the app will show the events that fall only in that particular time frame."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- **Justification**: This feature improves the product significantly as it gives the user a clear, convenient view of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "all the events that he/she is concerned with only in a calendar format. Moreover, it gives an option for the user to "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "view the events in another way besides a list format, which might be too cluttered. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- **Highlights**: This enhancement required an in-depth analysis of design alternatives. The implementation too was "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "challenging as it required displaying all the events in the correct corresponding months without compromising the "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "structural display of the calendar. Moreover, it required identifying the events that only fall under a particular timeline "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "and storing them in a data structure which would lead to easier display of the events in an orderly fashion as a calendar view. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Major enhancement 2: added the ability to add date and time to events"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**What it does**: Allows the user to add date and time to an event in the format: yyyy-mm-dd HHmm, and displays it to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "user in this format: E, MMM dd yyyy HHmm (displays the day of the week, and the name of the month) for easier viewing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**Justification**: This feature allows the user to add date and time in a pure numerical format and display it in a format "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "which is easier, by displaying the day of the week, ie. Mon-Sun and the month name, ie. Jan-Dec. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**Highlights**: This enhancement was challenging as adding date and time to an event is an *optional* feature. Therefore, "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "an empty string cannot be considered as a DateTimeParseException to be thrown. Thus, it required "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "analysis of design alternatives to make sure that a wrong datetime format is indeed an exception to be thrown whereas an empty string is not. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "Moreover, it affected calendar implementation as not all events can be extracted for calendar view. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Major enhancement 3: added the ability to `edit` event particulars"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**What it does**: Allows the user to edit event particular such as its `name`, `datetime`, `venue` and the `event` "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "itself. "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**Justification**: This feature improves the product significantly as it provides a convenient way to rectify the user\u0027s"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "mistake when typing the particulars of an event. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "**Highlights**: This enhancement required changes to the existing EventParser. It also required more commands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "to be added to EventCommandInterpreter and the UI class. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Minor enhancement 1: implemented `CalendarParser`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Minor enhancement 2: added the ability to add Seminar"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Minor enhancement 3: added the ability to list event and seminar "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Code contributed: [here](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dharithadiv\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Other contributions:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### Testing :"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- I have written unit tests for `CalendarCommandInterpreter` and `seminar`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### Necessary general code enhancements"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Improved readability of code by implementing private static final Strings and integers "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "in most of the classes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### Update document that are not specific to a feature "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Added target user profile and starting up instructions in user guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Added to FAQ in the user guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Added instructions for manual testing in the developer guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Added command summary in the user guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Added possible console messages and reasons in user guide "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "#### Maintaining issue tracker"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Added issues pertaining to bugs, feature flaws or features related to features mentioned above. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- Linked these issues to my PRs promptly. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Documentation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- I have written in the User Guide and Developer Guide features related to calendar and datetime features. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "### Community "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "- PRs reviewed (with non-trivial comments)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "[#29](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/29)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "[#160](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/160)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "[#178](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/178)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "harithadiv": 83
    }
  },
  {
    "path": "docs/team/lowjiayee.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "# PROJECT: Professor Assistant Console (PAC)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "# Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Pac is a event scheduler which helps to keep track of events. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Attendance and performance of students can be tracked under each event. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "The user interacts with it using a Command Line Interface (CLI). "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "It is written in Java, and has about 8k lines of code (LOC)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "# Summary of Contribution"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "## Major Enhancement 1: added the ability to create an `Event`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- **What it does**: It allows the user to add, edit and delete an event, which "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "records its name, date, time and venue. A user can also link a list of students "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "to any event to keep track of their attendance and performance in that event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- **Justification**: `name`, `date`, `time`, `venue` are important details of "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "an event. Recording attendance and performance is essential to the relevance "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "of this application for a professor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- **Highlight**: This is the backbone of the scheduler. All other features "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "of this app, in one way or another, are linked to an `Event`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "## Major Enhancement 2: implemented `EventParser`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- **What it does**: It breaks down a `Event`-related command to return the "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "appropriate `Command` object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- **Justification**: This allows invalid user inputs to be identified, hence "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "properly handled and shown to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- **Highlight**: `EventParser` is essential for all `Event`-related commands to "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "work. Other developers can add/modify existing `Event`-related command without "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "worrying about parsing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "## Major Enhancement 3: implemented the control flow of the application"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- **What it does**: It decides how the application starts up, and shuts down. "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "This involves `Interpreter`, which decides the command category and its type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "from a user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- **Highlight**: All developers need to understand how an user input leads to "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "its response."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "## Minor Enhancement: added the ability to load/save existing data"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "## Code contributed: [here](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dlowjiayee)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "## Other contributions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### Testing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "I have written unit tests for `Event`, `EventParser` and `Interpreter`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "I have also written text-based UI test to test `Event`-related operations, such "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "as `add`, `delete`, `edit` and `list`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "I have also written manual testing instructions for `Event` and `Storage`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### Documentation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "I have written in the User Guide and Developer Guide all the features/enhancements I have mentioned above."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Besides that, I have also written descriptions and drawn diagrams for Architecture, "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Command, Storage, Event (class) and Event (sequence)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "### Community"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "- PRs reviewed (with non-trivial review comments): "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#31](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/31), "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#33](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/33), "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#36](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/36), "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#59](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/59), "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#94](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/94), "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#98](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/98),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#113](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/113),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#114](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/114),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#116](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/116), "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "[#161](https://github.com/AY1920S2-CS2113T-T12-4/tp/pull/161), and more."
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 80
    }
  },
  {
    "path": "src/main/java/seedu/attendance/Attendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing attendance of a student."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String studentName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String isPresent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Constructor for Attendance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param studentName A string input by user, the name of student whose attendance is to be set."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param isPresent  A string input by user, sets the attendance status of the student."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public Attendance(String studentName, String isPresent) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        setName(studentName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        setStatus(isPresent);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Set the name of the student base on the input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param input input provided by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void setName(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.studentName \u003d input.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Set the status of the student base on the input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * If the input equals to \u0027Y\u0027 pr \"Y\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * the status will be set to Present."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Else it is set to Absent by default."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param input input provided by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void setStatus(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (input.toLowerCase().trim().equals(\"y\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            this.isPresent \u003d \"Present\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            this.isPresent \u003d \"Absent\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Retrieves the name of the student."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return studentName the name of the student."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getStudentName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return studentName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Retrieves the attendance status of the student."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return isPresent the attendance status of the student."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return isPresent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return studentName + \": \" + isPresent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * A comparator to sort the attendance list by student attendance status."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * The attendance status will be either \u0027Absent\u0027 or \u0027Present\u0027."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Students who are \u0027Absent\u0027 will be push to the top of the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Students who are \u0027Present\u0027 will be push to the bottom of the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * This is to allow the Professor to quickly determine who is Absent in class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static Comparator\u003cAttendance\u003e attendanceStatusComparator \u003d new Comparator\u003cAttendance\u003e() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        public int compare(Attendance s1, Attendance s2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName1 \u003d s1.getStatus().toUpperCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName2 \u003d s2.getStatus().toUpperCase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * A comparator to sort the attendance list by student name, in"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * alphabetical order."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static Comparator\u003cAttendance\u003e attendanceListNameComparator \u003d new Comparator\u003cAttendance\u003e() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        public int compare(Attendance s1, Attendance s2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName1 \u003d s1.getStudentName().toUpperCase();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName2 \u003d s2.getStudentName().toUpperCase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    };"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Converts \"Present\" or \"Absent\" to \"Y\" and \"N\" respectively."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return \"Y\" if Present, \"N\" if absent or otherwise"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static String getSimpleAttendanceStatus(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (input.equals(\"Present\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            return \"Y\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } else if (input.equals(\"Absent\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 3,
      "benchan911": 89,
      "lowjiayee": 15
    }
  },
  {
    "path": "src/main/java/seedu/attendance/AttendanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.attendance.Attendance.attendanceListNameComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.attendance.Attendance.attendanceStatusComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing attendance list of student\u0027s attendance status."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected ArrayList\u003cAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private DisplayTable displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * To fetch the existing attendanceList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    * @return attendanceList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public ArrayList\u003cAttendance\u003e getAttendanceList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * To check if there is an existing name in the attendanceList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param name the name of the student to be added into the attendanceList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return  If there is an existing name in the attendanceList, return true."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *          ELse, return false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public boolean isDuplicate(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String existingStudentName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String newStudentName \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c attendanceList.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            existingStudentName \u003d attendanceList.get(i).getStudentName().toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (existingStudentName.equals(newStudentName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * To add to the existing attendanceList in the selected event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param attendance the existing attendanceList in the event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param eventName the name of the event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void addToList(Attendance attendance, String eventName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.add(attendance);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.addAttendanceMessage(attendance.studentName, attendance.getStatus(), eventName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Add attendance to attendanceList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param attendance the attendance to be added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void add(Attendance attendance) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.add(attendance);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void displayAttendanceList(ArrayList\u003cAttendance\u003e attendanceList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        displayTable.printHeaderOfThree(\"index\", \"Name of Student\", \"Status\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (Attendance attendance : attendanceList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayTable.printBodyOfThree(index, attendance.getStudentName(), attendance.getStatus());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * To display the attendanceList in table form."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void displayList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (attendanceList.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"Attendance List is empty\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayAttendanceList(attendanceList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Check whether the attendanceList is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return the status of attendanceList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return attendanceList.isEmpty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Clear the attendanceList."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * To sort the attendanceList by the name of the student alphabetically."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Collections.sort(attendanceList,attendanceListNameComparator);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * To sort the attendanceList by the status of the student."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortByStatus() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Collections.sort(attendanceList,attendanceStatusComparator);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void findAttendance() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"Please type the name of the student you are looking for.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String keyword \u003d ui.getUserInput().trim().toLowerCase();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (isMatch(keyword).isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"There is no student named: \" + keyword);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"Search Result(s): \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayAttendanceList(isMatch(keyword));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public ArrayList\u003cAttendance\u003e isMatch(String keyword) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ArrayList\u003cAttendance\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (Attendance attendance: this.attendanceList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (attendance.getStudentName().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                searchResults.add(attendance);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 3,
      "benchan911": 126,
      "lowjiayee": 8
    }
  },
  {
    "path": "src/main/java/seedu/command/Bye.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class Bye extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\"Bye, see you again!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 10
    }
  },
  {
    "path": "src/main/java/seedu/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public abstract void execute() throws PacException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 3,
      "lowjiayee": 2,
      "harithadiv": 1,
      "benchan911": 1
    }
  },
  {
    "path": "src/main/java/seedu/command/Help.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.HelpUI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class Help extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    HelpUI helpUI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public Help() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.helpUI \u003d new HelpUI();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This method allows the user to select the help message to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * be displayed by type of command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void selectHelpMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        helpUI.printGetHelp();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String typeOfHelp \u003d helpUI.getStringInput();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        while (!typeOfHelp.equals(\"back\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            switch (typeOfHelp) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                helpUI.printStudentListHelp();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                helpUI.printEventHelp();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            case \"3\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                helpUI.printCalendarHelp();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            case \"4\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                helpUI.printAttendanceHelp();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case \"5\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                helpUI.printPerformanceHelp();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                helpUI.printGetHelp();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            typeOfHelp \u003d helpUI.getStringInput();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        selectHelpMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 43,
      "lowjiayee": 2,
      "harithadiv": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/AddAttendanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.Attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.parser.AttendanceParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to add an attendanceList for a specific event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * attendanceList by default will create a new list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * However, attendanceList can be added using an existing studentList in the studentListCollection."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * If there is an existing attendanceList, this command will append to the end of the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AddAttendanceList extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceParser attendanceParser \u003d new AttendanceParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected StudentList newStudentList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private UI ui \u003d new UI();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String studentName \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String status \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String input \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected int studentNumber \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public AddAttendanceList(AttendanceList attendances, String eventName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendanceList \u003d attendances;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.newStudentList \u003d new StudentList(eventName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to decide whether user wants to create a new list or use an existing student list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If studentNameList is empty."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void addToList() throws PacException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (!attendanceList.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"You cannot add to an existing list. Please clear first. \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else if (isByNameList()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            createWithExistingList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            createNewList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Check the user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return true if the user wants to import an existing list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return false if the user wants to create a new list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private boolean isByNameList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"Would you like to import an existing student list? \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"If yes, input \u0027yes\u0027. Else, input anything.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String reply \u003d ui.getStringInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (reply.toLowerCase().contains(\"yes\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to create with existing student list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void createWithExistingList() throws PacException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"There is no existing student list to import\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.printStudentListCollection();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            appendWithExistingList(fetchStudentList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to fetch studentList from studentListCollection."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * User can select base on the index given."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return A studentList selected from the studentListCollection."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private ArrayList\u003cString\u003e fetchStudentList() throws PacException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"Please state the index of the studentList that you wish to import\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            int index \u003d Integer.parseInt(ui.getUserInput());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return studentListCollection.get(index - 1).getStudentList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Wrong format\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Append attendanceList with an existing student list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param studentNameList the existing student list selected."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void appendWithExistingList(ArrayList\u003cString\u003e studentNameList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String studentName: studentNameList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendanceList.addToList(new Attendance(studentName,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    ui.getAttendanceStatusOfStudent(studentName)), eventName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"AttendanceList added\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to create new attendanceList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If parameter provided is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void createNewList() throws PacException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (isNewUser()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            addManually();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            addByLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Check the user input."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return true if the user is a new user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return false if the user is an experience user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private boolean isNewUser() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"Are you a new user? If so, please type \u0027yes\u0027 \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String reply \u003d ui.getStringInput();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (reply.toLowerCase().contains(\"yes\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to create new attendanceList using flags within the user input."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws PacException If parameter provided is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void addByLine() throws PacException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        while (!input.toLowerCase().equals(\"done\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"Please key following format:\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    + \"n/Name p/Status [Y/N]\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    + \"Status will be take as absent if the format above is not followed.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.readUserInput();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (input.equals(\"done\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (!attendanceList.isDuplicate(attendanceParser.getName(input))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                attendanceList.addToList(attendanceParser.parseAttendance(input), eventName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentName \u003d attendanceParser.parseAttendance(input).getStudentName();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                newStudentList.addToList(studentName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentNumber++;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                UI.display(\"There is an entry with the same name.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        appendNewStudentList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"You have successfully added \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + studentNumber + \" to the attendance list.\\n\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to create new attendanceList using a line-by-line input from the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void addManually() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        while (!studentName.equals(\"done\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"Please key in student name.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.readUserInput();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentName \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (studentName.equals(\"done\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (attendanceList.isDuplicate(studentName)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                UI.display(\"Duplicated name found, student name : [ \" + studentName + \" ] not added\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                UI.display(\"To mark the student as present, please use \u0027y\u0027 or \u0027Y\u0027.\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        + \"By default the student will be marked as absent,\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        + \" if any other input is given.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                ui.readUserInput();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                status \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                attendanceList.addToList(new Attendance(studentName, status), eventName);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                newStudentList.addToList(studentName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentNumber++;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        appendNewStudentList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\"You have successfully added \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + studentNumber + \" to the attendance list.\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void appendNewStudentList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (!newStudentList.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection.push(newStudentList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            addToList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (PacException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Attendance List fail to add.\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    + \"If you wish to add attendance again,\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    + \"please type the command \u0027attendance add\u0027 again\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 202,
      "lowjiayee": 9
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/ClearAttendanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to clear an existing attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class ClearAttendanceList extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public ClearAttendanceList(AttendanceList attendances, String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendanceList \u003d attendances;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to clear an existing attendanceList in a specific event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void clear() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (!attendanceList.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendanceList.clearList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.clearAttendanceMessage(eventName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"Attendance List is already empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 37,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/EditAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class EditAttendance extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected DisplayTable displayTable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public EditAttendance(AttendanceList attendances) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendanceList \u003d attendances;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * To determine the index of the attendance the user wishes to edit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void getIndex() throws PacException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"Please state the index of the student you wish to edit\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.readUserInput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            this.index \u003d Integer.parseInt(ui.getUserInput()) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Wrong format entered.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * To display the selected attendance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void displayAttendance() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        displayTable.printHeaderOfThree(\"index\", \"Name of Student\", \"Status\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        displayTable.printBodyOfThree(1, attendanceList.getAttendanceList().get(index).getStudentName(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                attendanceList.getAttendanceList().get(index).getStatus());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to set new Name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void editName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"What do you want to change the name to?\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String studentName \u003d ui.getUserInput().trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (attendanceList.isDuplicate(studentName) || studentName.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"Duplicate name found. Please try again.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            editName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendanceList.getAttendanceList().get(index).setName(studentName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to set new Status."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void editStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"What do you want to change the status to? [Y/N]\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String studentStatus \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.getAttendanceList().get(index).setStatus(studentStatus);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to edit the existing attendance."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void edit() throws PacException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (attendanceList.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"The attendance list is currently empty. Please add attendance instead.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendanceList.displayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            getIndex();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (this.index \u003e\u003d attendanceList.getAttendanceList().size() || this.index \u003c 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new PacException(\"The index you have chosen is out of bound.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                displayAttendance();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                decideEdit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                attendanceList.displayList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * To determine if the user want to set new name or status."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void decideEdit() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"Do you wish to change the `name` or change the `status`\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String input \u003d ui.getStringInput();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        switch (input.toLowerCase().trim()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            editName();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"status\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            editStatus();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"I do not understand your message. Please try again\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        edit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 113
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/FindAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to List an attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Find the matches base on the keyword given by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class FindAttendance extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public FindAttendance(AttendanceList attendances) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendanceList \u003d attendances;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method To find matches."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * If the attendanceList is empty, it will display a message to inform that the attendanceList is empty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * and will not attempt to find."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (!attendanceList.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendanceList.findAttendance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"The attendance list is currently empty. Please add attendance instead.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        find();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "benchan911": 40
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/SortAttendanceListByName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to sort the attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Sorts the attendanceList in alphabetical order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class SortAttendanceListByName extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public SortAttendanceListByName(AttendanceList attendances, String eventName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendanceList \u003d attendances;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to sort an attendance list according to name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (attendanceList.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"An empty list cannot be sorted\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendanceList.sortByName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.sortAttendanceByName(eventName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 37,
      "lowjiayee": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/SortAttendanceListByStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to sort the attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Sorts the attendanceList according to Status of the student, \u0027N\u0027 will be found before \u0027Y\u0027."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class SortAttendanceListByStatus extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public SortAttendanceListByStatus(AttendanceList attendances, String eventName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendanceList \u003d attendances;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to sort an attendance list according to status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (attendanceList.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"An empty list cannot be sorted\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            attendanceList.sortByStatus();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.sortAttendanceByStatus(eventName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 37,
      "lowjiayee": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/attendance/ViewAttendanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing an attendance related command to List an attendanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class ViewAttendanceList extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public ViewAttendanceList(AttendanceList attendances) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.attendanceList \u003d attendances;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method To view the existing attendanceList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void view() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.displayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        view();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 30,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/calendar/Calendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Seminar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class Calendar {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final int NO_OF_MONTHS \u003d 6;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String EMPTY_EVENT_LIST_ERROR_MESSAGE \u003d \"Could not find any events\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String EMPTY_YEAR_LIST_ERROR_MESSAGE \u003d \"Unable to find any events for this time period.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String MONTH_NOT_FOUND_ERROR_MESSAGE \u003d \"Month not found.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private DisplayTable displayTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Calendar() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Separates events from eventList into diff lists corresponding to its semester, year and month,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * displaying the events in a calendar form."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventList List of all the events."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param year Year which the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param semester Semester which the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If list is empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void separateEvents(EventList eventList, int year, int semester) throws PacException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e semesterList \u003d getSemesterEvents(eventList, semester);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e yearList \u003d getAcademicYearEvents(semesterList, year);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e monthList \u003d getMonthEvents(yearList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        displayCalendar(monthList, year, semester);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets events that fall under the correct semester. ie. s/1 would mean events from semester 1."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventList List of all the events."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param semester Semester that user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Events under the required semester."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If no events can be found."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private ArrayList\u003cEvent\u003e getSemesterEvents(EventList eventList, int semester) throws PacException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e list;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        switch (semester) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list \u003d getSemesterOneEvents(eventList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list \u003d getSemesterTwoEvents(eventList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(EMPTY_EVENT_LIST_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets semester one events only."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventList List of all the events."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return list of events that fall under semester 1, ie. jul - dec"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If unable to find the index of the event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private ArrayList\u003cEvent\u003e getSemesterOneEvents(EventList eventList) throws PacException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.list.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            Event event \u003d eventList.find(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (event.dateTimeIsParsed()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (event.getMonth() \u003e 6) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    list.add(event);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets semester two events only."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventList List of all the events."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return list of events that fall under semester 2, ie. jan - jun."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If unable to find the index of the event."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private ArrayList\u003cEvent\u003e getSemesterTwoEvents(EventList eventList) throws PacException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.list.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            Event event \u003d eventList.find(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (event.dateTimeIsParsed()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (event.getMonth() \u003e 0 \u0026\u0026 event.getMonth() \u003c 7) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    list.add(event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets events that fall under the correct year. i.e sem 1 of ay/18-19 is in 2018."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param semesterList List of events that fall under the correct semester."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param year Year that the user wants to see the events under."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return List with events that fall under the correct year."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private ArrayList\u003cEvent\u003e getAcademicYearEvents(ArrayList\u003cEvent\u003e semesterList, int year) throws PacException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e yearList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (Event event : semesterList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (event.getYear().equals(year)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                yearList.add(event);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (yearList.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(EMPTY_YEAR_LIST_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return yearList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets events and sorts them into their correct months using a 2d ArrayList."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param yearList list events that falls under the correct year."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return 2d ArrayList monthList that has all the events sorted into the correct month."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If the month cannot be found."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e getMonthEvents(ArrayList\u003cEvent\u003e yearList)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throws PacException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e monthList \u003d initializeMonthList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (Event event : yearList) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            int month \u003d event.getMonth();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            String description \u003d getEventDescription(event);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            switch (month) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(0).add(description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(1).add(description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(2).add(description);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(3).add(description);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 11:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(4).add(description);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            case 12:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                monthList.get(5).add(description);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(MONTH_NOT_FOUND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return monthList;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets event description with the day, eventType and the eventName, also makes sure the"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * length of the string is less than 19 characters."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param event event from the eventList"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return description of the event"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String getEventDescription(Event event) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String day \u003d getDayDescription(event);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String typeOfEvent \u003d getEventType(event);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String description \u003d day + \" \" + typeOfEvent + event.getName();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (description.length() \u003e 18) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return description.substring(0, 16) + \"...\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets description of the day as a String."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param event event of the day to be found."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return The day\u0027s description as a String."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String getDayDescription(Event event) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int day \u003d event.getDay();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String dayDescription \u003d Integer.toString(event.getDay());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assert day \u003c 32;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assert day \u003e 0;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 21:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 31:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            dayDescription +\u003d \"st\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 22:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            dayDescription +\u003d \"nd\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 23:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            dayDescription +\u003d \"rd\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            dayDescription +\u003d \"th\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return dayDescription;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets type of the event as a String."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param event An event from the eventList."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return String containing type of event."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String getEventType(Event event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return \"[S]: \";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return \"[E]: \";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private void displayCalendar(ArrayList\u003cArrayList\u003cString\u003e\u003e monthList, int year, int semester) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (semester \u003d\u003d 1) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.printCalendarHeader(year, year + 1, semester);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.printCalendarHeader(year - 1, year, semester);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        displayMonths(monthList);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Prints monthList after making it a complete 2d ArrayList, ie, equal number of rows and columns."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param monthList 2d ArrayList that does not have a equal number of rows and columns."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private void displayMonths(ArrayList\u003cArrayList\u003cString\u003e\u003e monthList) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cString\u003e eventDescriptionList \u003d initializeDescriptionList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int maxNumberOfEvents \u003d getMaxNumberOfEvents(monthList);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        monthList \u003d make2DArray(monthList, maxNumberOfEvents);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        displayEvents(eventDescriptionList, monthList, maxNumberOfEvents);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Takes events from the 2d ArrayList and puts it in a 1d ArrayList for as many times as the max number of events"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * in a particular month to be printed."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param eventDescriptionList Empty 1d ArrayList for it to be filled with events corresponding to the 6 months"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param monthList 2d ArrayList, containing all the events corresponding to each month."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param maxNumberOfEvents Max number of events in a particular month which determines the loop count."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private void displayEvents(ArrayList\u003cString\u003e eventDescriptionList,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                             ArrayList\u003cArrayList\u003cString\u003e\u003e monthList, int maxNumberOfEvents) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int k \u003d 0; k \u003c maxNumberOfEvents; k++) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            for (int j \u003d 0; j \u003c monthList.size(); j++) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (!monthList.get(j).get(k).equals(\"\")) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    eventDescriptionList.add(j, monthList.get(j).get(k));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            displayTable.printBodyOfSix(eventDescriptionList);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            eventDescriptionList \u003d removePreviousElements(eventDescriptionList);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets the maximum number of events in any particular month."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param list 2d ArrayList of all the events corresponding to its month."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Integer of maximum number of events."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private int getMaxNumberOfEvents(ArrayList\u003cArrayList\u003cString\u003e\u003e list) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int maxNumberOfEvents \u003d 0;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (ArrayList\u003cString\u003e events : list) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (events.size() \u003e maxNumberOfEvents) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                maxNumberOfEvents \u003d events.size();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return maxNumberOfEvents;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e initializeMonthList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e list \u003d new ArrayList\u003c\u003e(NO_OF_MONTHS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int k \u003d 0; k \u003c NO_OF_MONTHS; k++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list.add(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cString\u003e initializeDescriptionList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e(NO_OF_MONTHS);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int h \u003d 0; h \u003c NO_OF_MONTHS; h++) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list.add(\"\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cString\u003e removePreviousElements(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (int h \u003d 0; h \u003c NO_OF_MONTHS; h++) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            list.replaceAll(s -\u003e \"\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private ArrayList\u003cArrayList\u003cString\u003e\u003e make2DArray(ArrayList\u003cArrayList\u003cString\u003e\u003e list, int maxNumberOfEvents) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (ArrayList\u003cString\u003e strings : list) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (strings.size() \u003c maxNumberOfEvents) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                int size \u003d strings.size();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                for (int j \u003d 0; j \u003c maxNumberOfEvents - size; j++) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    strings.add(\"\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 316,
      "lowjiayee": 11
    }
  },
  {
    "path": "src/main/java/seedu/command/calendar/EventsSeparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EventsSeparator extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private int semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EventsSeparator(EventList eventList, Integer year, int semester) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        calendar.separateEvents(eventList, year, semester);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 22,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/event/AddEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class AddEvent extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Event newEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public AddEvent(Event newEvent, EventList eventList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.newEvent \u003d newEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventList.add(newEvent);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 19,
      "harithadiv": 4
    }
  },
  {
    "path": "src/main/java/seedu/command/event/DeleteEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class DeleteEvent extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public DeleteEvent(Integer index, EventList eventList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (eventList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"List is empty, unable to delete any items.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } else if (index \u003e\u003d eventList.getSize()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Index cannot be found. Check your index from the list.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventList.delete(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 22,
      "harithadiv": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/event/EditDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EditDateTime extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String datetime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EditDateTime(Integer index, String datetime, EventList eventList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.datetime \u003d datetime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.editDatetime(index, datetime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(eventList.list.get(index).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 21,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/command/event/EditEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EditEvent extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Event newEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EditEvent(Integer index, Event newEvent, EventList eventList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.newEvent \u003d newEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.editEvent(index, newEvent);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 21,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/event/EditName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EditName extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EditName(Integer index, String name, EventList eventList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.editName(index, name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 21,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/event/EditVenue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class EditVenue extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private Integer index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public EditVenue(Integer index, String venue, EventList eventList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.index \u003d index - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.editVenue(index, venue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(eventList.list.get(index).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 20,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/command/event/ListEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class ListEvent extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public ListEvent(EventList eventList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.listEvent();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 16,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/event/ListSeminar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.command.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "/** Only list out seminar. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class ListSeminar extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public ListSeminar(EventList eventList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventList.listSeminar();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 17,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/AttendanceCommandInterpreter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.AddAttendanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.ClearAttendanceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.SortAttendanceListByName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.ViewAttendanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.SortAttendanceListByStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.FindAttendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.attendance.EditAttendance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * To interpret the attendance command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected AttendanceList attendances;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(AttendanceCommandInterpreter.class.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public AttendanceCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    static void setupLogger() throws PacException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"AttendanceCommandInterpreter.log\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            fh.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Execute the command from userInput."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param commandDescription The userInput from the Ui."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If the command is undefined."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String commandDescription) throws PacException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        eventName \u003d ui.getEventNameForAttendance();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendances \u003d getAttendance(eventName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assert commandType.isBlank() : \"Attendance: Unknown command\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        AttendanceCommandInterpreter.setupLogger();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.info(\"Attendance List Log\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.finest(commandType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        switch (commandType.toLowerCase().trim()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new AddAttendanceList(attendances, eventName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new ViewAttendanceList(attendances);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new ClearAttendanceList(attendances, eventName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return sortAttendanceList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new FindAttendance(attendances);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new EditAttendance(attendances);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Attendance: Unknown command.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private AttendanceList getAttendance(String eventName) throws PacException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return eventList.getEvent(eventName).getAttendanceList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private String getSortType() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"Please Key in either \u0027name\u0027 or \u0027status\u0027.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return ui.getUserInput().toLowerCase().trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private Command sortAttendanceList() throws PacException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        switch (getSortType()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new SortAttendanceListByName(attendances, eventName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"status\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new SortAttendanceListByStatus(attendances, eventName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Unknown Attendance Sort Command\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 2,
      "benchan911": 105,
      "lowjiayee": 5
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/CalendarCommandInterpreter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.calendar.EventsSeparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.parser.CalendarParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class CalendarCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INVALID_SEMESTER_ERROR_MESSAGE \u003d \"Please give a valid semester number: s/1, s/2\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected CalendarParser calendarParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public CalendarCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.calendarParser \u003d new CalendarParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String commandDescription) throws PacException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String description \u003d commandDescription.toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int semester \u003d calendarParser.getSemester(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int year \u003d calendarParser.getYear(description, semester);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        switch (semester) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EventsSeparator(eventList, year, semester);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INVALID_SEMESTER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 2,
      "harithadiv": 32,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/CommandInterpreter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Bye;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Help;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class CommandInterpreter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected EventList eventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static final String[] COMMANDS_THAT_NEED_ARGUMENT \u003d {\"event\", \"seminar\", "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        \"attendance\", \"performance\", \"studentlist\", \"calendar\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public CommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the first word in lower cases."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the first word in lower cases"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected String getFirstWord(String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandType \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        commandType \u003d commandType.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        commandType \u003d commandType.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the 2nd to last words."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param userInput raw user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the 2nd to last words"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if there is only 1 word from the input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected String getSubsequentWords(String userInput) throws PacException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        int startIndexOfSpace \u003d userInput.indexOf(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (startIndexOfSpace \u003d\u003d -1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Argument is required for command \u0027\" + userInput + \"\u0027\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        int startIndexOfParameter \u003d startIndexOfSpace + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return userInput.substring(startIndexOfParameter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Check if the input is a command that requires any argument. It checks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * from COMMANDS_THAT_NEED_ARGUMENT, so that array must be set up properly first."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param commandCategory the command to be checked"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return (@code true} if command category requires an argument"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected boolean needArgument(String commandCategory) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String command : COMMANDS_THAT_NEED_ARGUMENT) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (commandCategory.equals(command)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Check if a string contains the specified flags."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param string the string to check for flags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param flags any flags to be checked inside string"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return {@code true} if at least one flag is not found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected boolean flagDoesNotExist(String string, String... flags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        boolean output \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String flag : flags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output \u003d output \u0026\u0026 string.contains(flag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return !output;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Decide the command from userInput."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param userInput The userInput from the Ui."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If the command is undefined."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String userInput) throws PacException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandCategory \u003d getFirstWord(userInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandDescription \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // only look for 2nd to last words if commandCategory requires."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (needArgument(commandCategory)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            commandDescription \u003d getSubsequentWords(userInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        switch (commandCategory) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            command \u003d new Bye();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            EventCommandInterpreter eci \u003d new EventCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            command \u003d eci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"seminar\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            SeminarCommandInterpreter sci \u003d new SeminarCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d sci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"attendance\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            AttendanceCommandInterpreter aci \u003d new AttendanceCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            command \u003d aci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"performance\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            PerformanceCommandInterpreter pci \u003d new PerformanceCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            command \u003d pci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"studentlist\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            StudentCommandInterpreter ssci \u003d new StudentCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            command \u003d ssci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return new Help();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            CalendarCommandInterpreter cci \u003d new CalendarCommandInterpreter(eventList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d cci.decideCommand(commandDescription);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            assert (!commandCategory.equals(\"bye\") \u0026\u0026 !commandCategory.equals(\"event\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    \u0026\u0026 !commandCategory.equals(\"seminar\") \u0026\u0026 !commandCategory.equals(\"attendance\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    \u0026\u0026 !commandCategory.equals(\"performance\") \u0026\u0026 !commandCategory.equals(\"calendar\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    \u0026\u0026 !commandCategory.equals(\"help\") \u0026\u0026 !commandCategory.equals(\"studentlist\"))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    : \"accepted command category is not further interpreted!\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Please provide a valid command category. Refer to \u0027help\u0027 for more info.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Pac is null.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 9,
      "benchan911": 22,
      "lowjiayee": 99,
      "harithadiv": 8
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/EventCommandInterpreter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.AddEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditVenue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.DeleteEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.ListEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.parser.EventParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class EventCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected EventParser eventParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static final String[] COMMANDS_THAT_NEED_ARGUMENT \u003d {\"add\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        \"editname\", \"editdatetime\", \"editvenue\", \"editevent\", \"delete\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INDEX_FLAG_EDIT_ERROR_MESSAGE \u003d \"Please use i/ flag to indicate which event to edit.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INDEX_FLAG_DELETE_ERROR_MESSAGE \u003d \"Please use i/ flag to indicate which event to \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"delete.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INVALID_COMMAND_TYPE_MESSAGE \u003d \"Please provide a valid command type. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"Type \u0027help\u0027 for more info.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.eventParser \u003d new EventParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Check if the input is a command that requires any argument. It checks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * from COMMANDS_THAT_NEED_ARGUMENT, so that array must be set up properly first."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param commandType the command to be checked"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return (@code true} if command type requires an argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected boolean needArgument(String commandType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String command : COMMANDS_THAT_NEED_ARGUMENT) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (commandType.equals(command)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String commandDescription) throws PacException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String datetime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String venue;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandParameters \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // only look for 2nd to last words if commandCategory requires."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (needArgument(commandType)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            commandParameters \u003d getSubsequentWords(commandDescription);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            event \u003d eventParser.getEvent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            command \u003d new AddEvent(event, this.eventList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editname\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(INDEX_FLAG_EDIT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            name \u003d eventParser.getName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditName(index, name, this.eventList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editdatetime\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(INDEX_FLAG_EDIT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            datetime \u003d eventParser.getDateTime();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditDateTime(index, datetime, this.eventList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editvenue\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(INDEX_FLAG_EDIT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            venue \u003d eventParser.getVenue();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditVenue(index, venue, this.eventList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editevent\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(INDEX_FLAG_EDIT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            event \u003d eventParser.getEvent();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditEvent(index, event, this.eventList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(INDEX_FLAG_DELETE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            command \u003d new DeleteEvent(index, this.eventList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new ListEvent(this.eventList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INVALID_COMMAND_TYPE_MESSAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 2,
      "lowjiayee": 83,
      "harithadiv": 32
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/PerformanceCommandInterpreter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.performance.AddPerformanceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.performance.DeletePerformanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.performance.EditPerformanceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.performance.ViewStudentPerformanceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.performance.SortPerformanceListByName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.performance.SortPerformanceListByResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class PerformanceCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    PerformanceList performanceList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    String eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public PerformanceCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Execute the command from userInput."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param commandDescription The userInput from the Ui."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If the command is undefined."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String commandDescription) throws PacException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        eventName \u003d ui.getEventName(); // to know under which event the user want to edit the performance"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList \u003d getPerformanceList(eventName); //performance list to be edited"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return new AddPerformanceList(performanceList, eventName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return new DeletePerformanceList(performanceList, eventName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return new EditPerformanceList(performanceList, eventName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return new ViewStudentPerformanceList(performanceList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return getSortCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Performance: Unknown command.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This method determines the type of Sorting command the user want, by"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * getting a String input and parse it to return respective sorting Command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @return A Command with respect to the type of sorting command the user intend to execute."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException Throws PacException when the user input a not recognizable sorting"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *                       command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Command getSortCommand() throws PacException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String type \u003d ui.getSortType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (type.equals(\"name\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return new SortPerformanceListByName(performanceList, eventName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        } else if (type.equals(\"result\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return new SortPerformanceListByResult(performanceList, eventName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        throw new PacException(\"Performance sort: Unknown sort type. Enter \u0027name\u0027 or \u0027student\u0027.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This get the performance list under the event input by user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @return The PerformanceList under specific event."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException Throws PacException when the event is"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *                       not found in the EventList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private PerformanceList getPerformanceList(String eventName) throws PacException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return eventList.getEvent(eventName).getPerformanceList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 72,
      "lowjiayee": 7
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/SeminarCommandInterpreter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.ListSeminar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.AddEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditVenue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.EditEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.event.DeleteEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Seminar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.parser.EventParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class SeminarCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected EventParser eventParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static final String[] COMMANDS_THAT_NEED_ARGUMENT \u003d {\"add\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        \"editname\", \"editdatetime\", \"editvenue\", \"editevent\", \"delete\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public SeminarCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.eventParser \u003d new EventParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Check if the input is a command that requires any argument. It checks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * from COMMANDS_THAT_NEED_ARGUMENT, so that array must be set up properly first."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param commandType the command to be checked"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return (@code true} if command type requires an argument"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected boolean needArgument(String commandType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String command : COMMANDS_THAT_NEED_ARGUMENT) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (commandType.equals(command)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String commandDescription) throws PacException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Seminar seminar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String datetime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String venue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String commandParameters \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // only look for 2nd to last words if commandCategory requires."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (needArgument(commandType)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            commandParameters \u003d getSubsequentWords(commandDescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventParser.parse(commandParameters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            seminar \u003d eventParser.getSeminar();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new AddEvent(seminar, this.eventList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editname\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new PacException(\"Please use i/ flag to indicate which event to edit.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            name \u003d eventParser.getName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditName(index, name, this.eventList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editdatetime\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new PacException(\"Please use i/ flag to indicate which event to edit.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            datetime \u003d eventParser.getDateTime();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditDateTime(index, datetime, this.eventList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editvenue\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new PacException(\"Please use i/ flag to indicate which event to edit.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            venue \u003d eventParser.getVenue();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditVenue(index, venue, this.eventList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"editevent\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new PacException(\"Please use i/ flag to indicate which event to edit.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            seminar \u003d eventParser.getSeminar();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new EditEvent(index, seminar, this.eventList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (flagDoesNotExist(commandParameters, \"i/\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new PacException(\"Please use i/ flag to indicate which event to delete.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            index \u003d eventParser.getIndex();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new DeleteEvent(index, this.eventList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            command \u003d new ListSeminar(this.eventList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Please provide a valid command type. Refer to \u0027help\u0027 for more info.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 2,
      "harithadiv": 56,
      "lowjiayee": 53
    }
  },
  {
    "path": "src/main/java/seedu/command/interpreter/StudentCommandInterpreter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.SortStudentListByList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.SortStudentListByName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.ClearStudentList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.FindStudentList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.AddStudentList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.DeleteStudentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.student.ViewStudentList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class StudentCommandInterpreter extends CommandInterpreter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(StudentCommandInterpreter.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public StudentCommandInterpreter(EventList eventList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        super(eventList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to decide the type of command to execute."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param commandDescription the following parameter used."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *                           Currently only used for delete command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return The student related command that the user calls."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If an invalid command Description is provided."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Command decideCommand(String commandDescription) throws PacException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String commandType \u003d getFirstWord(commandDescription);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assert commandType.isBlank() : \"studentlist: Unknown command\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        AttendanceCommandInterpreter.setupLogger();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.info(\"StudentList Log\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        logger.finest(commandType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new AddStudentList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new ViewStudentList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new DeleteStudentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return sortCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new FindStudentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new ClearStudentList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Unknown Student List Command.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private Command sortCommand() throws PacException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\"Please Key in either \u0027name\u0027 or \u0027list\u0027.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String sortType \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new SortStudentListByName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return new SortStudentListByList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Unknown Student List Sort Command\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 2,
      "benchan911": 70,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/AddPerformanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.parser.PerformanceParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class AddPerformanceList extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private DisplayList displayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    PerformanceList performanceList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    String eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Constructor for AddPerformanceCommand. Takes PerformanceList, performances of the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * event to be modified, and String eventName, name of the event that owns the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * performance list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public AddPerformanceList(PerformanceList performanceList, String eventName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.performanceList \u003d performanceList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Add the performance to performance list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * The user is to choose whether to add the performance by importing a list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * or adding manually."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private void addToList() throws PacException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        boolean isByNameList \u003d ui.isImportList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (isByNameList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            addByList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (!isByNameList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            addManually();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This method gets the user to manually add a performance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * The user has to input name of student and grade for each"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * performance to be added. This method tells the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * whether the performance is added successfully with a"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * reply message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException A PacException is thrown when the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *                       performance format input is incorrect"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *                       and cannot be added successfully."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void addManually() throws PacException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        int studentNumber \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String parameter \u003d ui.getPerformanceParameterToAdd();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        while (!parameter.equals(\"done\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            performanceList.addToList(getPerformance(parameter), eventName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            studentNumber++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            parameter \u003d ui.getStringInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\"You have successfully added \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + studentNumber + \" result(s) to the performance list.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This method get the user to select the index of student list to import"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * and return the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @return The student list selected by user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException Throws PacException when there is no student list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *                       exist in the student list collection."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private StudentList getList() throws PacException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"There is no existing student list.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            int listIndex \u003d displayList.getStudentListIndex();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return studentListCollection.get(listIndex - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Fail to get list\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This method get the user to input student\u0027s performance one by one"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * with the student list imported."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException Throws PacException when there is no student list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *      *                       exist in the student list collection."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void addByList() throws PacException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        StudentList studentList \u003d getList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        int studentNumber \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (String studentName : studentList.getStudentList()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            performanceList.addToList(new Performance(studentName,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    ui.getResultOfStudent(studentName)), eventName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            studentNumber++;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        UI.display(\"You have successfully added \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + studentNumber + \" result(s) to the performance list.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * It process the data input by student and returns"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * a Performance base on the input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @return A Performance of student"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException throws PacException when the user input"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *                       is insufficient or incorrect."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Performance getPerformance(String parameter) throws PacException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return new PerformanceParser().parsePerformance(parameter);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        addToList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 103,
      "lowjiayee": 14,
      "benchan911": 5
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/DeletePerformanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class DeletePerformanceList extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    PerformanceList performanceList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Performance performance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    String eventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Constructor for DeletePerformanceCommand. Takes in performance list and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * the name of event that the list is under."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param performanceList A PerformanceList of students."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public DeletePerformanceList(PerformanceList performanceList, String eventName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.performanceList \u003d performanceList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Performance getPerformance() throws PacException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String studentName \u003d ui.getStudentName(\"delete his/her performance\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return performanceList.getPerformance(studentName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void deleteFromList() throws PacException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performance \u003d getPerformance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList.deletePerformance(performance, eventName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (performanceList.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            throw new PacException(\"No performance list under this event.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        deleteFromList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 36,
      "lowjiayee": 4,
      "benchan911": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/EditPerformanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class EditPerformanceList extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    PerformanceList performanceList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    String eventName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public EditPerformanceList(PerformanceList performanceList, String eventName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.performanceList \u003d performanceList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private Performance getPerformance() throws PacException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String studentName \u003d ui.getStudentName(\"edit his/her performance\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return performanceList.getPerformance(studentName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private void editPerformance() throws PacException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        Performance performance \u003d getPerformance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String editType \u003d ui.getPerformanceParameter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (editType.toLowerCase().trim().equals(\"name\")) { // edit name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            performanceList.editPerformance(performance, \"name\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        } else if (editType.toLowerCase().trim().equals(\"result\")) { // edit result"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            performanceList.editPerformance(performance, \"result\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            throw new PacException(\"Wrong type of parameter chosen.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (performanceList.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            throw new PacException(\"No performance list under this event.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        editPerformance();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 44
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/SortPerformanceListByName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " * Class representing an performance related command to sort the performanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " * Sorts the performanceList in alphabetical order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class SortPerformanceListByName extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected PerformanceList performanceList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public SortPerformanceListByName(PerformanceList performances, String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.performanceList \u003d performances;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Method to sort an performance list according to name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private void sortPerformanceByName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (performanceList.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"An empty list cannot be sorted\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            performanceList.sortByName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            ui.sortPerformanceByName(eventName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        sortPerformanceByName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 36,
      "lowjiayee": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/SortPerformanceListByResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " * Class representing an performance related command to sort the performanceList of a specific event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " * Sorts the performanceList in alphabetical order."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class SortPerformanceListByResult extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected PerformanceList performanceList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public SortPerformanceListByResult(PerformanceList performanceList, String eventName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.performanceList \u003d performanceList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Method to sort an performance list according to name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private void sortPerformanceByResult() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (performanceList.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"An empty list cannot be sorted\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            performanceList.sortByGrade();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            ui.sortPerformanceByName(eventName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        sortPerformanceByResult();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 36,
      "lowjiayee": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/performance/ViewStudentPerformanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.command.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class ViewStudentPerformanceList extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private PerformanceList performanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Constructor for ViewAssignmentResultCommand. Takes in the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * performance list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public ViewStudentPerformanceList(PerformanceList performanceList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.performanceList \u003d performanceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList.printList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 20,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/student/AddStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to add a new studentList to studentListCollection."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AddStudentList extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected DisplayList displayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public AddStudentList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to add student names to a new list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Once studentList is created, it will be appended to studentListCollection."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void addToList() throws PacException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String listName \u003d ui.getListName().trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (listName.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"The list name is empty!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isExistedListName(listName)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"There is already an existing list name!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (listName.toLowerCase().equals(\"done\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Student Add cancelled.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        StudentList studentList \u003d new StudentList(listName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.addStudent(studentList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentList.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"You cannot create an empty Student List.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        displayList.printStudentList(studentList, listName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentListCollection.add(studentList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        addToList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 6,
      "benchan911": 43,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/command/student/ClearStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to clear all existing studentList in studentListCollection."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class ClearStudentList extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to clear the entire studentListCollection."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.displayStudentListCollectionEmpty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection.clear();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"The Student List Collection is cleared\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 26,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/command/student/DeleteStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to delete an existing studentList from studentListCollection."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class DeleteStudentList extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected DisplayList displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui \u003d new UI();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to delete an existing student list from studentListCollection by its index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException    PacException is thrown when there is an out of bound index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void deleteFromExisting() throws PacException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\"Please state the index of the student list you wish to delete.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.readUserInput();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String line \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            int index \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection.remove(index - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (NullPointerException e1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Out of bound.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Deletion Failed, out of bound.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.displayStudentListCollectionEmpty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayList.printStudentListCollection();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.displayStudentListCollectionEmpty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            deleteFromExisting();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 41,
      "lowjiayee": 8
    }
  },
  {
    "path": "src/main/java/seedu/command/student/FindStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to find an existing studentList by list name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class FindStudentList extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected ArrayList\u003cStudentList\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected DisplayList displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to find an existing student list from studentListCollection by list name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException    PacException is thrown when there is an out of bound index."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected void find() throws PacException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.displayStudentListCollectionEmpty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayStudentListCollection();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"\\nPlease state the list name you are searching for\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.readUserInput();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            String name \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            searchResults \u003d studentListCollection.search(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (searchResults.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                UI.display(\"Nothing match your description : \" + name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                UI.display(\"You have \" + searchResults.size() + \" matches:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                displayList.printSearchResults(searchResults);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Displays studentListCollection."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void displayStudentListCollection() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        UI.display(\"Displaying all student list: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ui.printStudentListCollection();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        find();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 3,
      "benchan911": 51,
      "lowjiayee": 6
    }
  },
  {
    "path": "src/main/java/seedu/command/student/SortStudentListByList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to sort all studentList by alphabetical order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class SortStudentListByList extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected StudentList studentList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to sort all student list in studentListCollection alphabetically."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.displayStudentListCollectionEmpty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection.sortByList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"StudentList sorted by name within the lists.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 1,
      "benchan911": 29,
      "lowjiayee": 3
    }
  },
  {
    "path": "src/main/java/seedu/command/student/SortStudentListByName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to sort all studentLists"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * within studentListCollection by alphabetical order."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class SortStudentListByName extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected StudentList studentList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to sort all student list in studentListCollection alphabetically."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.displayStudentListCollectionEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection.sortByName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.display(\"Student List is sorted by name within the Student List Collection.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 1,
      "benchan911": 31,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/command/student/ViewStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.command.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a student related command to view all existing studentList in studentListCollection."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class ViewStudentList extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    protected UI ui \u003d new UI();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Method to display all existing student list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private void displayStudentList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentListCollection.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            UI.displayStudentListCollectionEmpty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            ui.printStudentListCollection();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void execute() throws PacException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        displayStudentList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 29,
      "lowjiayee": 2
    }
  },
  {
    "path": "src/main/java/seedu/event/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String dateTimeFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private boolean isInvalid \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public DateTime(String arguments) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.dateTime \u003d arguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.dateTimeFormat \u003d getDateTimeFormat();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Formats datetime to the correct output for the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return The parsed string of date and time of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String getDateTimeFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (getDateTime() !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return getDateTime().format(DateTimeFormatter.ofPattern(\"E, MMM dd yyyy HHmm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Parses datetime of pattern input by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * If no input by the user, it takes the current datetime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Parsed datetime object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            isInvalid \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public boolean checkValidDateTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return !isInvalid;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets the numerical value of the month of the event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return The value of the month"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        LocalDateTime localDateTime \u003d getDateTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return localDateTime.getMonthValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Gets the year of the event as a single or double digit number, referring to the current century."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Year of the event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        LocalDateTime localDateTime \u003d getDateTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //only current century format in double digit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return localDateTime.getYear() - 2000;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getDate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        LocalDateTime localDateTime \u003d getDateTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return localDateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return this.dateTimeFormat;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String toStorable() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static DateTime parseStorable(String representation) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return new DateTime(representation);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 75,
      "lowjiayee": 8
    }
  },
  {
    "path": "src/main/java/seedu/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.attendance.Attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.attendance.AttendanceList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.PerformanceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected DateTime datetime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    protected String venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected AttendanceList attendanceList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected PerformanceList performanceList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Constructor with name, datetime, venue provided."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param name name of event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param datetime datetime of event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param venue venue of event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Event(String name, String datetime, String venue) throws PacException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        setName(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        setDatetime(datetime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        setVenue(venue);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.attendanceList \u003d new AttendanceList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.performanceList \u003d new PerformanceList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the name of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the name of the event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the name of the event. If the specified name is empty or {@code null},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * and the original name is also empty or {@code null},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * the name will take the form: event_(secondsSinceEpoch)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param name the new name for the event"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException when trying to overwrite a non-empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     *      and non-null name with an empty or null name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setName(String name) throws PacException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (this.name \u003d\u003d null || this.name.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            // if original name is empty or null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (name \u003d\u003d null || name.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                // if new name is empty or null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                this.name \u003d \"event_\" + Instant.now().getEpochSecond();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            // if original name is not empty and null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (name \u003d\u003d null || name.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is empty or null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new PacException(\"Empty name\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is not empty and not null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the datetime of the event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the datetime of the event"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String getDatetime() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Returns month of the event as an integer value, from 1 to 12."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Numerical value of month of the event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Integer getMonth() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.getMonth();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Returns year of the event as an integer value."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return Numerical value of the year of the event."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public Integer getYear() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.getYear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.getDate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the datetime of the event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param datetime the new datetime for the event"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void setDatetime(String datetime) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        this.datetime \u003d new DateTime(datetime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public boolean dateTimeIsParsed() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return datetime.checkValidDateTime();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the venue of the event."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the venue of the event"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return this.venue;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the venue of the event."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param venue the new venue for the event"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setVenue(String venue) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the attendanceList of the event."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the attendanceList of the event"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public AttendanceList getAttendanceList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the attendanceList of the event."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param attendanceList the new attendanceList for the event"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setAttendanceList(AttendanceList attendanceList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.attendanceList \u003d attendanceList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the performanceList of the event."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the performanceList of the event"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public PerformanceList getPerformanceList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return performanceList;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the performanceList of the event."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param performanceList the new performanceList for the event"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setPerformanceList(PerformanceList performanceList) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.performanceList \u003d performanceList;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String output \u003d \"Event: \" + getName();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (!getDatetime().equals(\"\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d (\", time: \" + getDatetime());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!getVenue().equals(\"\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d (\", venue: \" + getVenue());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns a storage-compatible String representation of the event."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a storage-compatible String representation of the event"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String toStorable() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String type \u003d this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(type + \u0027|\u0027"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                + name + \u0027|\u0027"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                + datetime.toStorable() + \u0027|\u0027"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                + venue"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                + \",\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (Attendance attendance : attendanceList.getAttendanceList()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output.append(attendance.toString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output.append(\u0027|\u0027);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // add a space to prevent NoSuchElementException, in case no AttendanceList"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        output.append(\",\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (Performance performance : performanceList.getPerformanceList()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output.append(performance.toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output.append(\u0027|\u0027);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        // add a space to prevent NoSuchElementException, in case no PerformanceList"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        output.append(\",\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns an event based on its storage-compatible String representation, including "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * its attendanceList and performanceList."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Major components are split by {@code ,}, minor components are split by {@code |}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param representation a storage-compatible String representation of an event"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an Event object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @exception PacException when trying to overwrite a non-empty"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     *      and non-null name with an empty or null name"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static Event parseStorable(String representation) throws PacException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String[] tokens \u003d representation.split(\",\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event newEvent \u003d parseEvent(tokens[0]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            newEvent.setAttendanceList(parseAttendanceList(tokens[1]));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException m) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            // Do nothing, as intended"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            newEvent.setPerformanceList(parsePerformanceList(tokens[2]));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException m) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            // Do nothing, as intended"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns an event based on its storage-compatible String representation."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Components are split by {@code |}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param representation a storage-compatible String representation of an event"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an Event object"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @exception PacException when trying to overwrite a non-empty"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     *      and non-null name with an empty or null name"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static Event parseEvent(String representation) throws PacException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event newEvent;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String[] token \u003d representation.split(\"\\\\|\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String type \u003d token[0];"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String name \u003d token[1];"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String datetime \u003d token[2];"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String venue;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            venue \u003d token[3];"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException m) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            venue \u003d \"\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"Seminar\":"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            newEvent \u003d new Seminar(name, datetime, venue);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            newEvent \u003d new Event(name, datetime, venue);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns a attendanceList based on its storage-compatible String representation."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Components are split by {@code |}."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param representation a storage-compatible String representation of all attendances"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an attendanceList with all attendances added to it"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static AttendanceList parseAttendanceList(String representation) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        AttendanceList attendanceList \u003d new AttendanceList();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            String[] token2 \u003d representation.split(\"\\\\|\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            for (String attendance : token2) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String[] attendanceDetail \u003d attendance.split(\": \");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                assert attendanceDetail.length \u003d\u003d 2 : \"Name contains \u0027: \u0027\";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String person \u003d attendanceDetail[0];"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String isPresent \u003d Attendance.getSimpleAttendanceStatus(attendanceDetail[1]);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                Attendance newAttendance \u003d new Attendance(person, isPresent);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                attendanceList.add(newAttendance);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException m) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            // Do nothing, as intended"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return attendanceList;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns a performanceList based on its storage-compatible String representation."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Components are split by {@code |}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param representation a storage-compatible String representation of all performances"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a performanceList with all performances added to it"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static PerformanceList parsePerformanceList(String representation) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        PerformanceList performanceList \u003d new PerformanceList();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            String[] token3 \u003d representation.split(\"\\\\|\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            for (String performance : token3) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String[] performanceDetail \u003d performance.split(\": \");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                assert performanceDetail.length \u003d\u003d 2 : \"Name contains \u0027: \u0027\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String person \u003d performanceDetail[0];"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                String result \u003d performanceDetail[1];"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                Performance newPerformance \u003d new Performance(person, result);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                performanceList.add(newPerformance);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException m) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            // Do nothing, as intended"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return performanceList;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 9,
      "lowjiayee": 255,
      "harithadiv": 51,
      "benchan911": 1
    }
  },
  {
    "path": "src/main/java/seedu/event/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.DisplayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static final String TYPE_EVENT \u003d \"Event\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private static final String TYPE_SEMINAR \u003d \"Seminar\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String DUPLICATE_EVENT_ERROR_MESSAGE \u003d \"Event already exists in the list. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"Please add a new Event.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INVALID_INDEX_ERROR_MESSAGE \u003d \"Invalid index, must start from 1.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INDEX_NOT_FOUND_ERROR_MESSAGE \u003d \"Index cannot be found. Check your index from the \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"list.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String EMPTY_NAME_ERROR_MESSAGE \u003d \"Event name is empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String DATE_TIME_FORMAT_ERROR_MESSAGE \u003d \"Wrong format for date and time. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"Please enter in this format: yyyy-MM-dd HHmm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String EMPTY_VENUE_ERROR_MESSAGE \u003d \"Venue is empty\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String EMPTY_EVENT_LIST_ERROR_MESSAGE \u003d \"The event list is empty.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String EVENT_NOT_FOUND_ERROR_MESSAGE \u003d \"Event is not found in the list.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public ArrayList\u003cEvent\u003e list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private DisplayList displayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Empty constructor. Creates an empty list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.displayList \u003d new DisplayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Add the specified event to the end of list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param event the event to be appended"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void add(Event event) throws PacException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        checkDuplicateName(event.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (!event.dateTimeIsParsed()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.printInvalidDateTimeFormat();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        list.add(event);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.addEventMessage(TYPE_SEMINAR, event.getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.addEventMessage(TYPE_EVENT, event.getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private void checkDuplicateName(String newEventName) throws PacException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (Event event : list) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            String oldEventName \u003d event.getName().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (oldEventName.equals(newEventName.toLowerCase())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(DUPLICATE_EVENT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Delete the first instance of the specified event in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns {@code true} if the specified event is found (and removed)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param event the event to be deleted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return {@code true} if the specified event is found (and removed)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     *      from the list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public boolean delete(Event event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return list.remove(event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Removes the event at the specified position in this list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Shifts any subsequent events to the left (subtracts one from their indices)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param index the index of the element to be removed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void delete(int index) throws PacException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INDEX_NOT_FOUND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (list.get(index) instanceof Seminar) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.deleteEventMessage(TYPE_SEMINAR, list.get(index).getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.deleteEventMessage(TYPE_EVENT, list.get(index).getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the event at the specified position in this list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param index index of the event to find."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @return the event in the specified position."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If list is empty."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Event find(int index) throws PacException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INDEX_NOT_FOUND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Change the name of the event in the specified index."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param index index of the event"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param name new name for the event"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void editName(int index, String name) throws PacException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(EMPTY_NAME_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        checkDuplicateName(name);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event \u003d this.find(index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventNameMessage(event.getName(), name, TYPE_SEMINAR);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventNameMessage(event.getName(), name, TYPE_EVENT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        event.setName(name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Change the datetime of the event in the specified index."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param index index of the event"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param datetime new datetime for the event"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void editDatetime(int index, String datetime) throws PacException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event \u003d this.find(index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String oldDateTime \u003d event.getDatetime();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        event.setDatetime(datetime);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (!event.dateTimeIsParsed()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(DATE_TIME_FORMAT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String newDateTime \u003d event.getDatetime();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventDateTimeMessage(oldDateTime, newDateTime, TYPE_SEMINAR);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventDateTimeMessage(oldDateTime, newDateTime, TYPE_EVENT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Change the venue of the event in the specified index."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param index index of the event"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param venue new venue for the event"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void editVenue(int index, String venue) throws PacException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (venue.isEmpty()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(EMPTY_VENUE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event \u003d this.find(index);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventVenueMessage(event.getVenue(), venue, TYPE_SEMINAR);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventVenueMessage(event.getVenue(), venue, TYPE_EVENT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        event.setVenue(venue);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Edits all the fields in the event, ie. name, date and time, venue."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param index Index of the event to be edited."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * @param event New event that user inputs."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If list is empty."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void editEvent(int index, Event event) throws PacException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INDEX_NOT_FOUND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (event instanceof Seminar) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventMessage(list.get(index).toString(), event.toString(), TYPE_SEMINAR);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.editEventMessage(list.get(index).toString(), event.toString(), TYPE_EVENT);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        list.add(index, event);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (!event.dateTimeIsParsed()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            ui.printInvalidDateTimeFormat();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Event getEvent(String eventName) throws PacException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(EMPTY_EVENT_LIST_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (Event event : list) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            String eventNameToCompare \u003d eventName.toLowerCase().trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            String eventNameOriginal \u003d event.getName().toLowerCase().trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            if (eventNameToCompare.equals(eventNameOriginal)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        throw new PacException(EVENT_NOT_FOUND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Lists all types of events."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If list is empty."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void listEvent() throws PacException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(EMPTY_EVENT_LIST_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        displayList.printEventList(list, TYPE_EVENT);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     * Lists out events that are of seminar type only."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException If list is empty."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void listSeminar() throws PacException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(EMPTY_EVENT_LIST_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cEvent\u003e seminarList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (Event item : list) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (item instanceof Seminar) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                seminarList.add(item);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        displayList.printEventList(seminarList, TYPE_SEMINAR);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 20,
      "lowjiayee": 93,
      "harithadiv": 127
    }
  },
  {
    "path": "src/main/java/seedu/event/Seminar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class Seminar extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Seminar(String name, String datetime, String venue) throws PacException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        super(name, datetime, venue);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Sets the name of the seminar. If the specified name is empty or {@code null},"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * and the original name is also empty or {@code null},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * the name will take the form: seminar_(secondsSinceEpoch)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param name the new name for the seminar"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException when trying to overwrite a non-empty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     *      and non-null name with an empty or null name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void setName(String name) throws PacException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (this.name \u003d\u003d null || this.name.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            // if original name is empty or null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (name \u003d\u003d null || name.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is empty or null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                this.name \u003d \"seminar_\" + Instant.now().getEpochSecond();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            // if original name is not empty and null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (name \u003d\u003d null || name.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is empty or null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new PacException(\"Empty name\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                // if new name is not empty and not null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String output \u003d \"Seminar: \" + getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!getDatetime().equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d (\", time: \" + getDatetime());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!getVenue().equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d (\", venue: \" + getVenue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 34,
      "lowjiayee": 22
    }
  },
  {
    "path": "src/main/java/seedu/exception/PacException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class PacException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public PacException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 7
    }
  },
  {
    "path": "src/main/java/seedu/pac/Pac.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.pac;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentListCollection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Bye;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.command.interpreter.CommandInterpreter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class Pac {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static final Logger logger \u003d Logger.getLogger(Pac.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INVALID_COMMAND_ERROR_MESSAGE \u003d \"Please provide a valid command.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String EVENTLIST_DIRECTORY \u003d \"./data/eventlist.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String STUDENTLIST_DIRECTORY \u003d \"./data/studentlist.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String FILE_LOGGER_ERROR_MESSAGE \u003d \"File logger not working\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String PAC_EXCEPTION_ERROR_MESSAGE \u003d \"PacException at Pac.run()\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected UI ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected CommandInterpreter interpreter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected EventList eventList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static StudentListCollection studentListCollection;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected Storage eventStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected Storage studentListCollectionStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Pac() throws PacException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        setupLogger();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        eventStorage \u003d new Storage(EVENTLIST_DIRECTORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventList \u003d eventStorage.loadEventList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (eventList \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            eventList \u003d new EventList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        studentListCollectionStorage \u003d new Storage(STUDENTLIST_DIRECTORY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        studentListCollection \u003d studentListCollectionStorage.loadStudentListCollection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (studentListCollection \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection \u003d new StudentListCollection();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        interpreter \u003d new CommandInterpreter(eventList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void setupLogger() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        logger.setLevel(Level.ALL); // print ALL log"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        ch.setLevel(Level.SEVERE);  // only print SEVERE log to console"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"Pac.log\", true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            fh.setLevel(Level.FINE);    // print FINE log and more severe log to log file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (IOException m) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            logger.severe(FILE_LOGGER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(m.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void run() throws PacException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        ui.setUserName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            ui.readUserInput();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                String input \u003d ui.getUserInput().trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (input.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    throw new PacException(INVALID_COMMAND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                command \u003d interpreter.decideCommand(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (PacException m) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                logger.log(Level.WARNING, PAC_EXCEPTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                UI.display(m.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } while (isNotBye(command));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventStorage.saveEventList(eventList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eventStorage.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        studentListCollectionStorage.saveStudentListCollection(studentListCollection);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        studentListCollectionStorage.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    boolean isNotBye(Command command) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return !(command instanceof Bye);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Main entry-point for the java.Pac.Pac application."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            Pac pac \u003d new Pac();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            pac.run();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (PacException m) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(m.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 8,
      "lowjiayee": 83,
      "harithadiv": 16,
      "benchan911": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/parser/AttendanceParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.attendance.Attendance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * This is the parser for Attendance. It gets the parameters from the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * and parse them to studentName and status, and create a new Attendance"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * with the two data. It then returns the Attendance created."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param commandParameters A String contains information of the Attendance, to be parsed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return                  A Attendance containing information parsed from commandParameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @throws PacException     Throws PacException when the commandParameters contains wrong"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *                          tokens or insufficient parameter."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public Attendance parseAttendance(String commandParameters) throws PacException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String[] dataToRead \u003d commandParameters.split(\" \", 5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String studentName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String status \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String token : dataToRead) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (token !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                String[] data \u003d token.split(\"/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                if (data.length \u003c 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    throw new PacException(\"Insufficient parameter or wrong command.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                switch (data[0]) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                case \"n\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    studentName \u003d data[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                case \"p\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    status \u003d data[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    throw new PacException(\"Wrong type of Attendance data token.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        if (studentName.equals(\"\") || status.equals(\"\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Insufficient variables to be saved as Attendance\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return new Attendance(studentName, status);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getName(String commandParameters) throws PacException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String[] dataToRead \u003d commandParameters.split(\" \", 5);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String[] tokens \u003d dataToRead[0].split(\"/\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String studentName \u003d tokens[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return studentName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            throw new PacException(\"Fail to add\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 56
    }
  },
  {
    "path": "src/main/java/seedu/parser/CalendarParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class CalendarParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String SEMESTER_FLAG \u003d \"s/\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String ACADEMIC_YEAR_FLAG \u003d \"ay/\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final int SEMESTER_AND_AY \u003d 2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final int CHARACTERS_IN_SEMESTER \u003d 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final int CHARACTERS_IN_AY \u003d 8;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INPUT_ERROR_MESSAGE \u003d \"Please provide a valid semester and academic year in this format\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \": s/1 ay/19-20.\\n    * Note that each academic year should be provided as double digits.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INVALID_FLAG_MESSAGE \u003d \"Unknown flag. Only s/ and ay/ flags are recognizable.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INVALID_YEAR_NUMBER_FORMAT_MESSAGE \u003d \"Please provide consecutive years for ay, eg, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"ay/19-20\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public CalendarParser() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private String[] parseDescription(String parameters) throws PacException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (tokens.length !\u003d SEMESTER_AND_AY || tokens[0].length() !\u003d CHARACTERS_IN_SEMESTER"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                || tokens[1].length() !\u003d CHARACTERS_IN_AY) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INPUT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return tokens;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private int parseAcademicYear(String[] academicYear, int semester) throws PacException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int calendarYear;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        for (String yr : academicYear) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (yr.length() \u003e 2 || yr.length() \u003c 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(INPUT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (semester \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                calendarYear \u003d Integer.parseInt(academicYear[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                calendarYear \u003d Integer.parseInt(academicYear[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INPUT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return calendarYear;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getSemester(String description) throws PacException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parseDescription(description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int semester;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (tokens[0].substring(0,2).equals(SEMESTER_FLAG)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                semester \u003d Integer.parseInt(tokens[0].substring(2));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(INPUT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INVALID_FLAG_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public int getYear(String description, int semester) throws PacException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parseDescription(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        int calendarYear;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (tokens[1].substring(0,3).equals(ACADEMIC_YEAR_FLAG)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            String[] academicYear \u003d tokens[1].substring(3).split(\"-\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (academicYear.length !\u003d 2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    throw new PacException(INPUT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                } else if (Integer.parseInt(academicYear[1]) - Integer.parseInt(academicYear[0]) !\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    throw new PacException(INVALID_YEAR_NUMBER_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                throw new PacException(INPUT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            calendarYear \u003d parseAcademicYear(academicYear, semester);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(INVALID_FLAG_MESSAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        return calendarYear;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 84,
      "lowjiayee": 1
    }
  },
  {
    "path": "src/main/java/seedu/parser/EventParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.Seminar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class EventParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String SHORT_FLAG_ERROR_MESSAGE \u003d \"Flag is too short.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INVALID_FLAG_ERROR_MESSAGE \u003d \"Please provide a valid flag.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String INVALID_INDEX_ERROR_MESSAGE \u003d \"Please provide a valid index.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String NO_FLAG_ERROR_MESSAGE \u003d \"Please provide a flag for your parameter.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String NO_NAME_VENUE_FOR_EVENT_ERROR_MESSAGE \u003d \"Please at least provide a name or venue \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"for event.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    private static final String NO_NAME_VENUE_FOR_SEMINAR_ERROR_MESSAGE \u003d \"Please at least provide a name or venue \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"for seminar.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventParser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.date \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.time \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.venue \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.index \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Parse parameters based on the following format:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * n/EVENTNAME [t/EVENTTIME] [d/EVENTDATE] [v/EVENTVENUE]."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param parameters original parameters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void parse(String parameters) throws PacException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String[] tokens \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        splitByEventFlags(tokens);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void splitByEventFlags(String[] tokens) throws PacException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String mostRecent \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            if (token.length() \u003c 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                if (mostRecent \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    throw new PacException(SHORT_FLAG_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                } else if (validFlagToAppend(mostRecent)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    append(mostRecent, token);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                switch (token.substring(0, 2).toLowerCase()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                case \"n/\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(name, \"name\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    name +\u003d token.substring(2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"name\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                case \"t/\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(time, \"time\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    time +\u003d token.substring(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"time\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                case \"d/\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(date, \"date\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    date +\u003d token.substring(2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"date\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                case \"v/\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(venue, \"venue\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    venue +\u003d token.substring(2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"venue\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                case \"i/\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    ensureNotDuplicateFlag(index, \"index\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                        index \u003d Integer.parseInt(token.substring(2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    } catch (NumberFormatException m) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                        throw new PacException(INVALID_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    mostRecent \u003d \"index\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    // assumes that all valid flags have been processed before this line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    if (isUnknownFlag(token)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                        throw new PacException(INVALID_FLAG_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    if (mostRecent \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                        throw new PacException(NO_FLAG_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    if (validFlagToAppend(mostRecent)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                        append(mostRecent, token);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private boolean validFlagToAppend(String flag) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return flag.equals(\"name\") || flag.equals(\"venue\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Append a string to the most recently added parameter."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param mostRecent the most recently added parameter"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param token the string to be appended"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void append(String mostRecent, String token) throws PacException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (token.isEmpty() || token.equals(\" \")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        switch (mostRecent) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            name +\u003d name.isEmpty() ? token : (\" \" + token);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        case \"venue\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            venue +\u003d venue.isEmpty() ? token : (\" \" + token);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"I am not sure \u0027\" + token + \"\u0027 belongs to which flag. \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    + \"Is a flag provided beforehand?\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void ensureNotDuplicateFlag(String value, String name) throws PacException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!value.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Please provide only 1 \" + name + \" flag.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void ensureNotDuplicateFlag(int value, String name) throws PacException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (value !\u003d -1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Please provide only 1 \" + name + \" flag.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns {@code true} if the input contains a flag."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * It is assumed that all valid flags have been handled"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * before the execution of this function."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param input the token to be checked"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return {@code true} if the input contains a flag"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private boolean isUnknownFlag(String input) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return input.charAt(1) \u003d\u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the value of name after parsing."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return name of event"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the value of datetime after parsing."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return datetime of event"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return date + \" \" + time;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the value of venue after parsing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return venue of event"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns the value of index after parsing."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return index of event"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns an Event object after parsing its parameters."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an Event object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if both name and venue are empty"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Event getEvent() throws PacException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String datetime \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (name.equals(\"\") \u0026\u0026 venue.equals(\"\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(NO_NAME_VENUE_FOR_EVENT_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return new Event(name, datetime, venue);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns an Seminar object after parsing its parameters."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an Seminar object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if both name and venue are empty"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Seminar getSeminar() throws PacException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String datetime \u003d date + \" \" + time;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (name.equals(\"\") \u0026\u0026 venue.equals(\"\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            throw new PacException(NO_NAME_VENUE_FOR_SEMINAR_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return new Seminar(name, datetime, venue);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 171,
      "harithadiv": 33
    }
  },
  {
    "path": "src/main/java/seedu/parser/PerformanceParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class PerformanceParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This is the parser for Performance. It gets the parameters from the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * and parse them to studentName and result, and create a new Performance"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * with the two data. It then returns the Performance created."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param commandParameters A String contains information of the Performance, to be parsed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @return                  A Performance containing information parsed from commandParameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException    Throws PacException when the commandParameters contains wrong"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *                          tokens or insufficient parameter."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Performance parsePerformance(String commandParameters) throws PacException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String[] dataToRead \u003d commandParameters.split(\" \", 5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String studentName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (String s : dataToRead) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            if (s !\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                String[] data \u003d s.split(\"/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                if (data.length \u003c 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    throw new PacException(\"Insufficient parameter or wrong command.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                switch (data[0]) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                case \"n\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    studentName \u003d data[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                case \"r\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    result \u003d data[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    throw new PacException(\"Wrong type of Performance data token.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (studentName.equals(\"\") || result.equals(\"\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Insufficient variables to be saved as performance\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return new Performance(studentName, result);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 39,
      "lowjiayee": 6
    }
  },
  {
    "path": "src/main/java/seedu/performance/Performance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class Performance {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String studentName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Constructor for Performance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param studentName A string input by user, the name of student who scored"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *                      the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param result      A string input by user, sets the result of the student."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public Performance(String studentName, String result) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getStudent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return studentName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * A comparator to sort the performance list by student name, in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * alphabetical order."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public static Comparator\u003cPerformance\u003e performanceListNameComparator \u003d new Comparator\u003cPerformance\u003e() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        public int compare(Performance s1, Performance s2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            String listName1 \u003d s1.getStudent().toUpperCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            String listName2 \u003d s2.getStudent().toUpperCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * A comparator to sort the performance list by student result, from"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * highest to lowest."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public static Comparator\u003cPerformance\u003e performanceListGradeComparator \u003d new Comparator\u003cPerformance\u003e() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        public int compare(Performance s1, Performance s2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            String listName1 \u003d s1.getResult().toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            String listName2 \u003d s2.getResult().toUpperCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return studentName + \": \" + result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 52,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/performance/PerformanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import static seedu.performance.Performance.performanceListNameComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import static seedu.performance.Performance.performanceListGradeComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class PerformanceList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    protected ArrayList\u003cPerformance\u003e performanceList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    UI ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    DisplayTable displayTable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public PerformanceList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void addToList(Performance performance, String eventName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (isRepeated(performance)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            UI.display(\"You have already stored \" + performance.studentName + \"\u0027s result. If you wish \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    + \"to edit, please input: Performance edit\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            performanceList.add(performance);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            ui.addPerformanceMessage(performance.studentName, eventName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Add performance to performanceList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param performance the performance to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void add(Performance performance) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        performanceList.add(performance);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private boolean isRepeated(Performance performance) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (Performance p : performanceList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return isSameString(p.getStudent(), performance.getStudent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private boolean isSameString(String string1, String string2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return string1.toLowerCase().trim().equals(string2.toLowerCase().trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public ArrayList\u003cPerformance\u003e getPerformanceList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return performanceList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Delete the student\u0027s performance from the performance list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * It detects whether the current list is empty, contains the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * input student\u0027s performance, and delete whenever is allowed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param performance The Performance of student to be deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void deletePerformance(Performance performance, String eventName) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        boolean hasDeleted \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            UI.display(\"No performance list under this event\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (Performance p : performanceList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            if (p !\u003d null \u0026\u0026 isSameString(p.getStudent(), performance.getStudent())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                performanceList.remove(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                hasDeleted \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        ui.deletePerformanceMessage(performance, eventName, hasDeleted);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This method edit the parameters in Performance. The type of parameter to change is"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * determined by the String type passed into this method."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param performance The Performance to be edited."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param type        The type of parameter to be edited."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void editPerformance(Performance performance, String type) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        boolean hasEdited \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            UI.display(\"No performance list under this event\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (Performance p : performanceList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            if (p !\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    \u0026\u0026 isSameString(p.getStudent(), performance.getStudent())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    \u0026\u0026 isSameString(type, \"name\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                editName(p);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                hasEdited \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            } else if (p !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    \u0026\u0026 isSameString(p.getStudent(), performance.getStudent())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                    \u0026\u0026 isSameString(type, \"result\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                editResult(p);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                hasEdited \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (!hasEdited) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            UI.display(\"Performance not found in list\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private void editName(Performance performance) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performance.studentName \u003d ui.getPerformanceName(\"name\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        ui.editPerformanceMessage(performance, \"name\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList.remove(performance);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList.add(performance);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private void editResult(Performance performance) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performance.result \u003d ui.getPerformanceName(\"result\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        ui.editPerformanceMessage(performance, \"result\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList.remove(performance);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList.add(performance);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This method iterates and prints the Performance list in a table format."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            UI.display(\"No performance list under this event\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        displayTable.printHeaderOfThree(\"index\", \"Name of Student\", \"Result\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (Performance performance : performanceList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            displayTable.printBodyOfThree(i, performance.studentName, performance.getResult());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This method compares the input String student name with Performance.studentName"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * and returns the Performance when the two Strings are equal."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param studentName A String input to be compared."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @return The Performance with studentName matches input String."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Performance getPerformance(String studentName) throws PacException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            throw new PacException(\"No performance list under this event\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (Performance performance: performanceList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            if (isSameString(performance.studentName,studentName)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                return performance;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        throw new PacException(\"There is no record for \" + studentName + \"\u0027s performance.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return performanceList.isEmpty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList.sort(performanceListNameComparator);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void sortByGrade() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        performanceList.sort(performanceListGradeComparator);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 161,
      "lowjiayee": 11
    }
  },
  {
    "path": "src/main/java/seedu/storage/FileIO.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class FileIO {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private FileReader fileToReadFrom;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private FileWriter fileToWriteTo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Open files to be modified, and scanner to read from file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param directory the file to be opened"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if cannot initialise file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public FileIO(String directory) throws PacException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.file \u003d open(directory);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            this.fileToReadFrom \u003d new FileReader(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"FileIO: cannot initialise file\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.scanner \u003d new Scanner(fileToReadFrom);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Opens a file, creating its relevant directory if necessary."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param directory the abstract pathname of the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a File object pointing to the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if directory already exists while creating it"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected File open(String directory) throws PacException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        File f \u003d new File(directory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        ensurePathExist(f);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return f;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Checks if the file denoted by this abstract pathname exists."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * If it does not exist, create directories until that path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Prints messages to show what it does."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param f the abstract pathname"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if directory already exists while creating it"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private void ensurePathExist(File f) throws PacException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String output \u003d \"Storage file (\" + f.getPath() + \") is \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d \"not found... \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                new File(f.getParent()).mkdir();    // mkdir"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                output +\u003d \"created.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (IOException m) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                throw new PacException(\"FileIO: creating file that already exists\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            output +\u003d \"found...\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(output);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Read a line from current file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return the next line"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if EOF is encountered"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public String read() throws PacException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"FileIO: nothing to read anymore\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Write a string from start of file, replacing the content of file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param input the string to be written"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if {@code IOException} occurs"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void write(String input) throws PacException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (this.fileToWriteTo \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                this.fileToWriteTo \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            fileToWriteTo.write(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (IOException m) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"FileIO.write: \" + m.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Close everything in FileIO."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if IOException occurs"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void close() throws PacException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            if (this.fileToWriteTo !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                this.fileToWriteTo.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            this.fileToReadFrom.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            this.scanner.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (IOException m) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"FileIO.close: \" + m.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 117
    }
  },
  {
    "path": "src/main/java/seedu/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentListCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    protected FileIO fileIO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Creates a Storage object that saves to the specified directory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Note that an EventList object has to be passed for each relevant Storage function."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param directory the filepath to save to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if cannot initialise filepath"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public Storage(String directory) throws PacException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.fileIO \u003d new FileIO(directory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Load all events to EventList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return an EventList object with all events loaded"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if EOF is encountered"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventList loadEventList() throws PacException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String input \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                input \u003d fileIO.read();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                Event newEvent \u003d Event.parseStorable(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                eventList.add(newEvent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (PacException m) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                if (m.getMessage().equals(\"FileIO: nothing to read anymore\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (Exception m) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                UI.display(\"... Corrupted event found. Only previous events are loaded.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                return eventList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } while (!input.isBlank());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (eventList.getSize() \u003e 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"... Loaded all events.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Save all events to Storage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param eventList the list of events to be stored"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if IOException occurs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void saveEventList(EventList eventList) throws PacException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (Event event : eventList.list) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            fileIO.write(event.toStorable() + System.lineSeparator());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (eventList.getSize() \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"All events are saved.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Load all studentLists to a StudentListCollection object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a StudentListCollection object with all studentLists loaded"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public StudentListCollection loadStudentListCollection() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StudentListCollection studentListCollection \u003d new StudentListCollection();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String input \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                input \u003d fileIO.read();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                StudentList newStudentList \u003d StudentList.parseString(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                studentListCollection.add(newStudentList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (PacException m) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                if (m.getMessage().equals(\"FileIO: nothing to read anymore\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            } catch (Exception m) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                UI.display(\"... Corrupted student list found. Only previous student lists are loaded.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                return studentListCollection;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } while (!input.isBlank());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (studentListCollection.size() \u003e 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"... Loaded all student lists.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return studentListCollection;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Save all studentLists to Storage."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param studentListCollection the list of studentlLsts to be stored"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if IOException occurs"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void saveStudentListCollection(StudentListCollection studentListCollection) "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        throws PacException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        fileIO.write(studentListCollection.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        if (studentListCollection.size() \u003e 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(\"All student lists are saved.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Close every opened objects."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @throws PacException if IOException occurs"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void close() throws PacException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        fileIO.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 2,
      "lowjiayee": 116
    }
  },
  {
    "path": "src/main/java/seedu/student/StudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.ui.DisplayTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": " * Class representing a studentList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class StudentList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public ArrayList\u003cString\u003e studentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String listName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public StudentList(String listName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        this.listName \u003d listName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.studentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Adds a new student name to studentList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @param studentName The name of the student."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void addToList(String studentName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        studentList.add(studentName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Retrieves the existing studentList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return studentList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public ArrayList\u003cString\u003e getStudentList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return studentList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Retrieves the listName."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * @return listName"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getListName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return listName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void sortAscending() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        Collections.sort(studentList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Display the existing student names in the studentList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void showList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        DisplayTable displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        displayTable.printHeaderOfTwo(\"List\", listName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String name: studentList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayTable.printBodyOfTwo(index, name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static Comparator\u003cStudentList\u003e listNameComparator \u003d new Comparator\u003cStudentList\u003e() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        public int compare(StudentList s1, StudentList s2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName1 \u003d s1.getListName().toUpperCase();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            String listName2 \u003d s2.getListName().toUpperCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            return listName1.compareTo(listName2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String data \u003d listName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String studentName : studentList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            data \u003d data.concat(\"|\" + studentName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * Returns a studentList based on its String representation."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @param representation a String representation of a studentList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     * @return a studentList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public static StudentList parseString(String representation) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String[] tokens \u003d representation.split(\"\\\\|\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assert tokens.length \u003e 0 : \"Not a studentList\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        String listName \u003d tokens[0];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StudentList newStudentList \u003d new StudentList(listName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (int i \u003d 1; i \u003c tokens.length; ++i) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            newStudentList.addToList(tokens[i]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return newStudentList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return studentList.isEmpty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public boolean isDuplicate(String name) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c studentList.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (studentList.get(i).toLowerCase().equals(name.toLowerCase())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 27,
      "benchan911": 67,
      "lowjiayee": 16
    }
  },
  {
    "path": "src/main/java/seedu/student/StudentListCollection.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.pac.Pac;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.student.StudentList.listNameComparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class StudentListCollection extends ArrayList\u003cStudentList\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public ArrayList\u003cStudentList\u003e search(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        ArrayList\u003cStudentList\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c studentListCollection.size(); i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (studentListCollection.get(i).getListName().toLowerCase().contains(name.toLowerCase())) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                searchResults.add(studentListCollection.get(i));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Pac.studentListCollection.sort(listNameComparator);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     * Iterate through the studentListCollection and sort."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortByList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c studentListCollection.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentListCollection.get(i).sortAscending();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public boolean isExistedListName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); ++i) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (this.get(i).getListName().toLowerCase().equals(name.toLowerCase())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public StudentList getList(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return this.get(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getListCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String data \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            data \u003d data.concat(System.lineSeparator() + getList(i).listName + \"|\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            for (String studentName: this.getList(i).getStudentList()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                data \u003d data.concat(studentName + \"|\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StringBuilder data \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); ++i) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            data.append(this.get(i).toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        return data.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void push(StudentList studentList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        boolean isDuplicate \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        while (!isDuplicate) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            isDuplicate \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            for (int i \u003d 0; i \u003c this.size(); ++i) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                if (this.get(i).getListName().toLowerCase().equals(studentList.listName.toLowerCase())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    isDuplicate \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    String wordIndex \u003d \" [\" + index + \"]\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    studentList.listName \u003d studentList.listName.concat(wordIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        this.add(studentList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 1,
      "benchan911": 80,
      "lowjiayee": 4
    }
  },
  {
    "path": "src/main/java/seedu/ui/DisplayList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class DisplayList extends UI {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printEventList(ArrayList\u003cEvent\u003e list, String type) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\"Here are all the \" + type + \"s in your list.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(i + 1 + \". \" + list.get(i));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printStudentList(StudentList studentList, String listName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\"Student List created, named : \" + listName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        studentList.showList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public int getStudentListIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assert !studentListCollection.isEmpty() : \"studentListCollection should be empty.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Please choose one of the following list.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        for (StudentList studentList: studentListCollection) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            UI.display(index + \". \" + studentList.getListName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return Integer.parseInt(getStringInput());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void printSearchResults(ArrayList\u003cStudentList\u003e searchResults) throws PacException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        UI.display(\"Here\u0027s the Search Result(s)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            for (StudentList studentList : searchResults) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "                UI.display(\"\\n[\" + index + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentList.showList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            throw new PacException(\"Search Failed\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 28,
      "lowjiayee": 9,
      "benchan911": 11
    }
  },
  {
    "path": "src/main/java/seedu/ui/DisplayTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class DisplayTable extends UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printHeaderOfTwo(String index, String header) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String columnOfTwo \u003d (\"| %-10s|  %-82s|%n\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        printSplit();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.printf(columnOfTwo, index, header);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        printSplitOfTwo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printBodyOfTwo(int index, String body) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String columnOfTwo \u003d (\"| %-10d|  %-82s|%n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String modifiedBody1 \u003d extractLength(body, 50);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.printf(columnOfTwo, index, modifiedBody1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        printSplitOfTwo();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printHeaderOfThree(String index, String header1, String header2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String columnOfThree \u003d (\"| %-10s|  %-50s|  %-28s|%n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        printSplit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(columnOfThree, index, header1, header2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        printSplitOfThree();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printBodyOfThree(int index, String body1, String body2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String columnOfThree \u003d (\"| %-10d|  %-50s|  %-28s|%n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String modifiedBody1 \u003d extractLength(body1, 50);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String modifiedBody2 \u003d extractLength(body2, 25);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(columnOfThree, index, modifiedBody1, modifiedBody2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        printSplitOfThree();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printBodyOfSix(ArrayList\u003cString\u003e description) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String columnOfSix \u003d (\"| %-20s| %-20s| %-20s| %-20s| %-20s| %-20s|%n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(columnOfSix, description.get(0), description.get(1), description.get(2), description.get(3),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                description.get(4), description.get(5));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printSplitOfSix();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public static void printMonths(ArrayList\u003cString\u003e description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String columnOfSix \u003d (\"| %-20s| %-20s| %-20s| %-20s| %-20s| %-20s|%n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(columnOfSix, description.get(0), description.get(1), description.get(2), description.get(3),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                description.get(4), description.get(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printSplitOfSix();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    private String extractLength(String string, int length) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        int lengthString \u003d string.length();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (lengthString \u003c length) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return string.substring(0, length - 4) + \"...\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printSplitOfThree() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(11).forEach(System.out::print);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(52).forEach(System.out::print);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(30).forEach(System.out::print);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.print(\"|\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printSplitOfTwo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(11).forEach(System.out::print);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(84).forEach(System.out::print);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.print(\"|\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public static void printSplitOfSix() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(21).forEach(System.out::print);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.print(\"|\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printSplit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(97).forEach(System.out::print);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 44,
      "harithadiv": 31,
      "benchan911": 23
    }
  },
  {
    "path": "src/main/java/seedu/ui/HelpUI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class HelpUI extends UI {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printGetHelp() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StringBuilder output \u003d new StringBuilder("
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            \"Hello, please select 1-5 for its command format.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"1. Student List\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"2. Event-related\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            + \"3. Calendar\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            + \"4. Attendance\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            + \"5. Performance\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        output.append(\"To view event list, input: event list\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        output.append(\"To view other lists, input: \u003ctype_of_list\u003e view\\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        output.append(\"Note: All command are NOT CASE SENSITIVE.\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        output.append(\"To exit help function, enter \u0027back\u0027\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(output.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printEventHelp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        StringBuilder output \u003d new StringBuilder("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            \"To add an event, use this command the following format:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\tEvent add n/Event_name [v/Venue_name] [d/yyyy-MM-dd t/HHmm].\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"You may also replace \u0027Event\u0027 with one of the following type:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\t- Seminar\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        output.append("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            \"To edit an event, use these commands with the following format:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\tEvent editDateTime i/Event_index d/yyyy-MM-dd t/HHmm, or\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\tEvent editName i/Event_index n/Event_name, or\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\tEvent editVenue i/Event_index v/Event_venue, or\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\tEvent editEvent i/Event_index n/Event_name [d/yyyy-MM-dd t/HHmm] [v/Event_venue]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        output.append("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            \"To list all events, use the command\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\tevent list\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"To delete an event, use the command\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            + \"\\tevent delete i/Event_index\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        output.append(\"Enter \u0027list\u0027 for command format list. To exit help function, enter \u0027back\u0027\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(output.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarHelp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        display(\"To view events in a calendar, there should be events that exist in the event list.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"To view calendar, input: s/Semester_Number ay/Year_one-Year_two.\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        display(\"* Note that semester can only be an integer 1 or 2.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        display(\"* Note that the academic year must contain two consecutive years separated by a hyphen.\\n \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                + \" Each year should be in a double digit format.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Enter \u0027list\u0027 for command format list. To exit help function, enter \u0027back\u0027\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printPerformanceHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(\"All performance list should exist under an existing event.\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"Follow step-by-step commands after the following commands are input.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(\"To add students\u0027 performance, input:\\n\\t\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"performance add\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(\"To delete a student\u0027s performance under an event, input:\\n\\t\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"Performance delete\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"To edit a student\u0027s performance under an event, input:\\n\\t\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"Performance edit\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"\\tYou are allowed to edit student\u0027s performance by student\u0027s name or result.\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(\"To sort a student\u0027s performance list under an event, input:\\n\\t\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"Performance sort\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"\\tYou are allowed to sort student\u0027s performance by students\u0027 name or result.\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"To view a student\u0027s performance under an event, input:\\n\\t\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"Performance view\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Enter \u0027list\u0027 for command format list. To exit help function, enter \u0027back\u0027\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printAttendanceHelp() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(\"All attendance list should exist under an existing event.\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"Follow step-by-step commands after the following commands are input.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(\"To add students\u0027 attendance, input:\\n\\t\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"attendance add\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        display(\"To clear a student\u0027s attendance list, input:\\n\\t\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"attendance clear\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        display(\"To sort a student\u0027s attendance list, input:\\n\\t\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"attendance sort\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        display(\"To find a student\u0027s attendance, input:\\n\\t\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"attendance find\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        display(\"To edit a student\u0027s attendance, input:\\n\\t\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"attendance edit\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Enter \u0027list\u0027 for command format list. To exit help function, enter \u0027back\u0027\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printStudentListHelp() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"To create a new studentList for future events, input:\\n\\t\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"studentlist add\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"To delete an existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"studentlist delete\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"To clear all existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"studentlist clear\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"To find an existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"studentlist find\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"To list all existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"studentlist view\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        display(\"To sort all existing studentList, input:\\n\\t\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"studentlist sort\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Enter \u0027list\u0027 for command format list. To exit help function, enter \u0027back\u0027\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 48,
      "lowjiayee": 34,
      "harithadiv": 10,
      "benchan911": 15
    }
  },
  {
    "path": "src/main/java/seedu/ui/UI.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.performance.Performance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static seedu.pac.Pac.studentListCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    private static String userName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static void display(String message) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public static void displayStudentListCollectionEmpty() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.println(\"There is no existing student list.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Advances this scanner past the current line and stores the input that"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * was skipped, excluding any line separator at the end."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * The position is set to the beginning of the next line."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void readUserInput() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        System.out.print(System.lineSeparator() + \"\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Returns the string that is read from"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * {@code readUserInput()} most recently."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @return the most recent line of user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getStringInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * Close the scanner."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * This prints the welcome message and set username for the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void setUserName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String logo \u003d \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \" ______       ____           ______\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|   __  \\\\    /    \\\\      /     ___|\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|  |__| |   /  /\\\\  \\\\     |   /\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|   ____/  /   _    \\\\    |   |\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|  |      /  /    \\\\  \\\\   |   \\\\____\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \"|__|     /__/      \\\\__\\\\  \\\\________|\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"What is your name?\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        userName \u003d getUserInput();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Hello \" + userName + \". Welcome to your \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"personal Professor Assistant Console. If you need \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"assistant with command format, input \u0027help\u0027.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void editEventMessage(String oldEvent, String newEvent, String eventType) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\"Your %s was edited from |%s| to |%s|.\\n\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                eventType, oldEvent, newEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void editEventNameMessage(String oldName, String newName, String eventType) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\"Your %s name was changed from |%s| to |%s|.\\n\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                eventType, oldName, newName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void editEventDateTimeMessage(String oldDateTime, String newDateTime, String eventType) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\"Your %s date and time was changed from |%s| to |%s|.\\n\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                eventType, oldDateTime, newDateTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public void editEventVenueMessage(String oldVenue, String newVenue, String eventType) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\"Your %s venue was changed from |%s| to |%s|.\\n\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                eventType, oldVenue, newVenue);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void addEventMessage(String eventType, String eventName) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(\"New %s: %s was added successfully to \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"your Event list.\\n\", eventType, eventName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void addAttendanceMessage(String studentName, String attendanceStatus, String eventName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        System.out.printf(\"Attendance of %s (%s) has been taken successfully\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + \" under event %s.\\n\", studentName, attendanceStatus, eventName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void addPerformanceMessage(String studentName, String taskName) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(\"The result of student %s has been added \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"successfully under event %s.\\n\", studentName, taskName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.print(\"If you are adding student\u0027s result manually, \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.print(\"record next student: (format: n/name r/result). \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.print(\"When you are finished, input \u0027done\u0027. \\n\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void deleteEventMessage(String eventType, String eventName) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(\"%s: %s was deleted successfully from \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"your Event list.\\n\", eventType, eventName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void printInvalidDateTimeFormat() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.println(\"Datetime is not set. If you wish to add datetime, please enter the correct format:\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarHeading(int semesterOneYear, int semesterTwoYear, int semester) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printCalendarHorizontalLine();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        String line \u003d \"SEMESTER \" + semester + \" AY \" + semesterOneYear + \"/\" + semesterTwoYear;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        System.out.printf(\" %75s %n\", line);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printCalendarHorizontalLine();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarHorizontalLine() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \" _\").limit(1).forEach(System.out::print);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Stream.generate(() -\u003e \"_\").limit(130).forEach(System.out::print);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\" \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarHeader(int semesterOneYear, int semesterTwoYear,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "                                     int semester) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        UI.display(\"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printCalendarHeading(semesterOneYear, semesterTwoYear, semester);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        printCalendarMonthsHeading(semester);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public void printCalendarMonthsHeading(int semester) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        ArrayList\u003cString\u003e months \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        if (semester \u003d\u003d 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(0, \"JUL\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(1, \"AUG\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(2, \"SEP\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(3, \"OCT\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(4, \"NOV\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(5, \"DEC\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(0, \"JAN\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(1, \"FEB\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(2, \"MAR\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(3, \"APR\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(4, \"MAY\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "            months.add(5, \"JUN\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        DisplayTable.printMonths(months);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * The message showed to the user after successful deletion of a performance."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benchan911"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     * @param performance The Performance deleted."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void deletePerformanceMessage(Performance performance, String eventName, boolean hasDeleted) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        if (!hasDeleted) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "            display(\"Performance not found in list\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String studentName \u003d performance.getStudent();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(\"The result of student %s has been deleted \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"successfully under event %s.\\n\", studentName, eventName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void editPerformanceMessage(Performance performance, String type) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String studentName \u003d performance.getStudent();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(\"The student %s has been changed to %s successfully.\\n\", type, studentName);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getPerformanceName(String type) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(\"Please key in the student\u0027s new %s\", type);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return getStringInput();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getResultOfStudent(String studentName) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Please key in the result for \" + studentName + \": \");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getAttendanceStatusOfStudent(String studentName) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Please key in the attendance status for student \" + studentName + \" [Y/N]\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getPerformanceParameter() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Please key in the type of performance parameter you want to edit: name / result\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getPerformanceParameterToAdd() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Please key in the performance you want to add in this format: n/name r/result\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"When you are finished, input \u0027done\u0027 \");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getStudentName(String typeCommand) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        System.out.printf(\"Please key in the name of student that you wish to %s \\n\", typeCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getTypeOfAddPerformance() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Would you like to import an existing student list? \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"If yes, input \u0027yes\u0027. Else, input anything.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return getStringInput();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public boolean isImportList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        String userInput \u003d getTypeOfAddPerformance();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return userInput.equals(\"yes\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Please key in the name of event that \""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "                + \"you wish to access to its student\u0027s performance.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getEventNameForAttendance() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Please key in the name of event.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void clearAttendanceMessage(String eventName) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Attendance List cleared for Event: \" + eventName);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortAttendanceByStatus(String eventName) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Attendance List is sorted by name for Event: \" + eventName);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void sortAttendanceByName(String eventName) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        display(\"Attendance List is sorted by attendance name for Event:  \" + eventName);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public void sortPerformanceByName(String eventName) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        display(\"Performance List is sorted by Performance status for Event:  \" + eventName);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    public String getSortType() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"Do you want to sort by students\u0027 name or result?\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        return getStringInput().toLowerCase();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void addStudent(StudentList studentList) throws PacException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        String studentName \u003d \"\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            display(\"Please enter a student Name. If you are finished, enter done.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            readUserInput();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentName \u003d getUserInput().trim();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            if (studentName.equals(\"done\")) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else if (studentList.isDuplicate(studentName)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                throw new PacException(\"Duplicated Student Name found.\\nStudent List Add Command Failed.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentList.addToList(studentName);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        } while (!studentName.equals(\"done\"));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public String getListName() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        display(\"What is the name of your list?\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        readUserInput();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        return getUserInput();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    public void printStudentListCollection() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        DisplayTable displayTable \u003d new DisplayTable();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (int i \u003d 0; i \u003c studentListCollection.size(); i++) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            displayTable.printHeaderOfTwo(\"List #\" + (i + 1),"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                    studentListCollection.get(i).getListName());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            for (String name : studentListCollection.get(i).getStudentList()) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                displayTable.printBodyOfTwo(index, name);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 162,
      "lowjiayee": 10,
      "harithadiv": 46,
      "benchan911": 89
    }
  },
  {
    "path": "src/test/java/seedu/attendance/AttendanceListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    AttendanceList attendanceList \u003d new AttendanceList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    String testEventName \u003d \"Event1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void sort() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"John Doe\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"Amy Doe\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"Robert Doe\", \"N\"), testEventName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"James Doe\", \"N\"), testEventName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[John Doe: Present, Amy Doe: Present, Robert Doe: Absent, James Doe: Absent]\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                attendanceList.getAttendanceList().toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.sortByName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[Amy Doe: Present, James Doe: Absent, John Doe: Present, Robert Doe: Absent]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                attendanceList.getAttendanceList().toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.sortByStatus();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[James Doe: Absent, Robert Doe: Absent, Amy Doe: Present, John Doe: Present]\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                attendanceList.getAttendanceList().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void find() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"Boy\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"Girl\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"Big Boy\", \"N\"), testEventName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[]\", attendanceList.isMatch(\"Man\").toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[Boy: Present, Big Boy: Absent]\", attendanceList.isMatch(\"Boy\".toLowerCase()).toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void isDuplicate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"John Doe\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertFalse(attendanceList.isDuplicate(\"Jerry\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertTrue(attendanceList.isDuplicate(\"John Doe\")); // Must match exactly"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void clearList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"John Doe\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"Doe John\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertFalse(attendanceList.isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.clearList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertTrue(attendanceList.isEmpty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void isEmpty() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertTrue(attendanceList.isEmpty());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"John Doe\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertFalse(attendanceList.isEmpty());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getAttendanceList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[]\", attendanceList.getAttendanceList().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceList.addToList(new Attendance(\"John Doe\", \"Y\"), testEventName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[John Doe: Present]\", attendanceList.getAttendanceList().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 70
    }
  },
  {
    "path": "src/test/java/seedu/attendance/AttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getStudentName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Attendance attendanceTestUnit \u003d new Attendance(\"John Doe\", \"Y\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"John Doe\", attendanceTestUnit.getStudentName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getStatus() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Attendance attendanceTestUnit \u003d new Attendance(\"John Doe\", \"Y\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Present\", attendanceTestUnit.getStatus());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getAttendance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Attendance attendanceTestUnit \u003d new Attendance(\"John Doe\", \"Y\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"John Doe: Present\", attendanceTestUnit.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void setStatus() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Attendance attendanceTestUnit \u003d new Attendance(\"John Doe\", \"Y\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceTestUnit.setStatus(\"N\"); // Set status as absent"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Absent\", attendanceTestUnit.getStatus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceTestUnit.setStatus(\"Y\"); // With upper case y"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Present\", attendanceTestUnit.getStatus());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceTestUnit.setStatus(\"unknown\"); // With unknown input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Absent\", attendanceTestUnit.getStatus());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceTestUnit.setStatus(\"y\"); // With lower case y"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Present\", attendanceTestUnit.getStatus());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceTestUnit.setStatus(\"      y     \"); // With additional white spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Present\", attendanceTestUnit.getStatus());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void setName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        Attendance attendanceTestUnit \u003d new Attendance(\"John Doe\", \"Y\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"John Doe\", attendanceTestUnit.getStudentName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceTestUnit.setName(\"David Chang\"); // Set new name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"David Chang\", attendanceTestUnit.getStudentName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        attendanceTestUnit.setName(\" Ryan   \"); // Set new name with white spaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Ryan\", attendanceTestUnit.getStudentName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 50,
      "lowjiayee": 1
    }
  },
  {
    "path": "src/test/java/seedu/event/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getName() throws PacException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event1 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"1\", event1.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setName() throws PacException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event1 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e event1.setName(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event2 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        event2.setName(\"event2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"event2\", event2.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getDatetime() throws PacException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //Event event1 \u003d new Event(\"1\", \"4\", \"3\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //assertEquals(\"yyyy-MM-dd HHmm\", event1.getDatetime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Event event2 \u003d new Event(\"1\", \"2020-05-04 0130\", \"3\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"Mon, May 04 2020 0130\", event2.getDatetime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setDatetime() throws PacException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event1 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        event1.setDatetime(\"2020-05-04 0130\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"Mon, May 04 2020 0130\", event1.getDatetime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getVenue() throws PacException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event2 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"3\", event2.getVenue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setVenue() throws PacException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Event event1 \u003d new Event(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        event1.setVenue(\"sea\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"sea\", event1.getVenue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 47,
      "harithadiv": 6
    }
  },
  {
    "path": "src/test/java/seedu/event/SeminarTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class SeminarTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getName() throws PacException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar1 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"1\", seminar1.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setName() throws PacException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar1 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e seminar1.setName(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar2 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        seminar2.setName(\"seminar2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"seminar2\", seminar2.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getDatetime() throws PacException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //Seminar seminar1 \u003d new Seminar(\"1\", \"4\", \"3\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        //assertEquals(\"yyyy-MM-dd HHmm\", seminar1.getDatetime());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Seminar seminar2 \u003d new Seminar(\"1\", \"2020-05-04 0130\", \"3\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"Mon, May 04 2020 0130\", seminar2.getDatetime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setDatetime() throws PacException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar1 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        seminar1.setDatetime(\"2020-05-04 0130\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"Mon, May 04 2020 0130\", seminar1.getDatetime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void getVenue() throws PacException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        Seminar seminar2 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertEquals(\"3\", seminar2.getVenue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void setVenue() throws PacException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        Seminar seminar1 \u003d new Seminar(\"1\", \"2\", \"3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        seminar1.setVenue(\"sea\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertEquals(\"sea\", seminar1.getVenue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 33,
      "lowjiayee": 20
    }
  },
  {
    "path": "src/test/java/seedu/interpreter/CalendarCommandInterpreterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "package seedu.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.command.interpreter.CalendarCommandInterpreter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "public class CalendarCommandInterpreterTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    CalendarCommandInterpreter cci;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    public CalendarCommandInterpreterTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        cci \u003d new CalendarCommandInterpreter(new EventList());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void calendarView() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"s/1 s/2\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"s/1 s/2 ay/19-20\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"s/1 ay/19-20 ay/20-21\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"s/-1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"s/1 ay/199-300\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"s/1 ay/3-4\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"ay/20-30\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"ay/50000\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"s/1 ay/-3--4\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void missingArgument() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"s/ ay/ \"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "        assertThrows(PacException.class, () -\u003e cci.decideCommand(\"       \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harithadiv"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harithadiv": 36
    }
  },
  {
    "path": "src/test/java/seedu/interpreter/CommandInterpreterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Bye;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Help;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.interpreter.CommandInterpreter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class CommandInterpreterTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    CommandInterpreter ci;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public CommandInterpreterTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        this.ci \u003d new CommandInterpreter(new EventList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void byeCommand() throws PacException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"bye\") instanceof Bye);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"  bye  \") instanceof Bye);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"bYe\") instanceof Bye);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void helpCommand() throws PacException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"help\") instanceof Help);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"  help  \") instanceof Help);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(ci.decideCommand(\"heLp\") instanceof Help);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void unknownCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e ci.decideCommand(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e ci.decideCommand(\"hi\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 38
    }
  },
  {
    "path": "src/test/java/seedu/interpreter/EventCommandInterpreterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.AddEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.DeleteEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditVenue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.ListEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.interpreter.EventCommandInterpreter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class EventCommandInterpreterTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    EventCommandInterpreter eci;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public EventCommandInterpreterTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        eci \u003d new EventCommandInterpreter(new EventList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void add() throws PacException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"add n/hello\") instanceof AddEvent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"add n/1 n/2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editName() throws PacException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"editname i/1 n/new name\") instanceof EditName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editname n/new name\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editname i/-5\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editname i/0\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editname i/1 i/2\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editname i/10000 2\"));        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editDateTime() throws PacException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"editdatetime i/1 d/2020-11-11 t/1234\") instanceof EditDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime d/date t/time\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime i/1 d/date\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime i/1 t/time\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime d/date\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime t/time\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime i/-5\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime i/0\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime i/1 i/2\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime i/10000 2\"));        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editVenue() throws PacException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"editvenue i/1 v/new venue\") instanceof EditVenue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editvenue v/new venue\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editvenue i/-5\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editvenue i/0\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editvenue i/1 i/2\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editvenue i/10000 2\"));        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editEvent() throws PacException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"editevent i/1 n/new name v/new venue\") instanceof EditEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void delete() throws PacException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"delete i/1\") instanceof DeleteEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"delete i/-5\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"delete i/0\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"delete i/1 i/2\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"delete i/10000 2\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void list() throws PacException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(eci.decideCommand(\"list\") instanceof ListEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void unknown() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"...\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harithadiv"
        },
        "content": "    void missingArgument() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"add\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editname\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editdatetime\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editvenue\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"editevent\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e eci.decideCommand(\"delete\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 100,
      "harithadiv": 2
    }
  },
  {
    "path": "src/test/java/seedu/interpreter/SeminarCommandInterpreterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.interpreter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.AddEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.DeleteEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.EditVenue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.event.ListSeminar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.interpreter.SeminarCommandInterpreter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.event.EventList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "public class SeminarCommandInterpreterTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    SeminarCommandInterpreter sci;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public SeminarCommandInterpreterTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        sci \u003d new SeminarCommandInterpreter(new EventList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void add() throws PacException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"add n/hello\") instanceof AddEvent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editName() throws PacException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"editname i/1 n/new name\") instanceof EditName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editname i/-5\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editname i/0\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editname i/1 i/2\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editname i/10000 2\"));  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editDateTime() throws PacException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"editdatetime i/1 d/2020-11-11 t/1234\") instanceof EditDateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime d/date t/time\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime i/1 d/date\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime i/1 t/time\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime d/date\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime t/time\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime i/-5\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime i/0\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime i/1 i/2\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime i/10000 2\")); "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editVenue() throws PacException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"editvenue i/1 v/new venue\") instanceof EditVenue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editvenue v/new venue\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editvenue i/-5\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editvenue i/0\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editvenue i/1 i/2\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editvenue i/10000 2\")); "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void editEvent() throws PacException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"editevent i/1 n/new name v/new venue\") instanceof EditEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void delete() throws PacException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"delete i/1\") instanceof DeleteEvent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void list() throws PacException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertTrue(sci.decideCommand(\"list\") instanceof ListSeminar);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void unknown() throws PacException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"...\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void missingArgument() throws PacException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"add\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editname\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editdatetime\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editvenue\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"editevent\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertThrows(PacException.class, () -\u003e sci.decideCommand(\"delete\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 96
    }
  },
  {
    "path": "src/test/java/seedu/pac/PacTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "package seedu.pac;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.command.Bye;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "class PacTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    Pac pac;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    public PacTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            pac \u003d new Pac();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        } catch (PacException m) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "            System.out.println(m.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "    void checkBye() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "        assertFalse(pac.isNotBye(new Bye()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 18,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/performance/PerformanceListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import seedu.exception.PacException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "class PerformanceListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    ArrayList\u003cPerformance\u003e emptyTestList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    PerformanceList emptyTestUnit \u003d new PerformanceList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    void getPerformanceList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(emptyTestList, emptyTestUnit.getPerformanceList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    void getPerformance() throws PacException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        Performance performanceTestUnit \u003d new Performance(\"John\", \"100\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        emptyTestUnit.addToList(performanceTestUnit, \"event\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(performanceTestUnit, emptyTestUnit.getPerformance(\"John\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    void isEmpty() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertTrue(emptyTestList.isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 33
    }
  },
  {
    "path": "src/test/java/seedu/performance/PerformanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "package seedu.performance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "class PerformanceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Performance gradeTestUnit \u003d new Performance(\"John\", \"A\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Performance markTestUnit \u003d new Performance(\"Li Ming\", \"100\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Performance numericNameTestUnit \u003d new Performance(\"123\", \"No result\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    Performance negativeResultTestUnit \u003d new Performance(\"Negative result\", \"-1\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    void getStudent() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"John\", gradeTestUnit.getStudent());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"Li Ming\", markTestUnit.getStudent());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"123\", numericNameTestUnit.getStudent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"Negative result\", negativeResultTestUnit.getStudent());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    void getResult() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"A\", gradeTestUnit.getResult());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"100\", markTestUnit.getResult());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"No result\", numericNameTestUnit.getResult());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"-1\", negativeResultTestUnit.getResult());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"John: A\", gradeTestUnit.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"Li Ming: 100\", markTestUnit.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"123: No result\", numericNameTestUnit.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "        assertEquals(\"Negative result: -1\", negativeResultTestUnit.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 36
    }
  },
  {
    "path": "src/test/java/seedu/studentlist/StudentListCollectionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.student.StudentListCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static seedu.student.StudentList.listNameComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class StudentListCollectionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    StudentListCollection studentListCollection \u003d new StudentListCollection();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    String[] nameList \u003d  {\"Daniel\", \"Robert\", \"Max\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        StudentList studentList1 \u003d new StudentList(\"Demo List 1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String name: nameList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentList1.addToList(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentListCollection.push(studentList1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(System.lineSeparator() + \"Demo List 1|Daniel|Robert|Max|\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentListCollection.getListCollection());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        StudentList studentList2 \u003d new StudentList(\"Demo List 2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String name: nameList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentList2.addToList(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentListCollection.push(studentList2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(System.lineSeparator() + \"Demo List 1|Daniel|Robert|Max|\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                + System.lineSeparator() + \"Demo List 2|Daniel|Robert|Max|\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentListCollection.getListCollection());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void isDuplicated() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        add();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertTrue(studentListCollection.isExistedListName(\"Demo List 2\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertFalse(studentListCollection.isExistedListName(\"Demo List 3\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void sort() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        add();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        StudentList studentList0 \u003d new StudentList(\"Demo List 0\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        for (String name: nameList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "            studentList0.addToList(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentListCollection.push(studentList0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(System.lineSeparator() + \"Demo List 1|Daniel|Robert|Max|\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        + System.lineSeparator() + \"Demo List 2|Daniel|Robert|Max|\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        + System.lineSeparator() + \"Demo List 0|Daniel|Robert|Max|\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentListCollection.getListCollection());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentListCollection.sort(listNameComparator);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(System.lineSeparator() + \"Demo List 0|Daniel|Robert|Max|\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        + System.lineSeparator() + \"Demo List 1|Daniel|Robert|Max|\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                        + System.lineSeparator() + \"Demo List 2|Daniel|Robert|Max|\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benchan911"
        },
        "content": "                studentListCollection.getListCollection());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 62
    }
  },
  {
    "path": "src/test/java/seedu/studentlist/StudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benchan911"
        },
        "content": "package seedu.studentlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import seedu.student.StudentList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benchan911"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benchan911"
        },
        "content": "public class StudentListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    StudentList studentList \u003d new StudentList(\"Demo List\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void isEmpty() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertTrue(studentList.isEmpty());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentList.addToList(\"Alice\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertFalse(studentList.isEmpty());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void isDuplicate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentList.addToList(\"Alice\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertTrue(studentList.isDuplicate(\"Alice\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertFalse(studentList.isDuplicate(\"Bobby\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getListName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Demo List\", studentList.getListName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentList.addToList(\"Alice\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentList.addToList(\"Charlie\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentList.addToList(\"Bobby\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[Alice, Charlie, Bobby]\", studentList.getStudentList().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void sort() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        add();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        studentList.sortAscending();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"[Alice, Bobby, Charlie]\",studentList.getStudentList().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benchan911"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    void getString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        add();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benchan911"
        },
        "content": "        assertEquals(\"Demo List|Alice|Charlie|Bobby\", studentList.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benchan911"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benchan911"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benchan911": 53
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anqi-nus"
        },
        "content": "input"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event add n/dinner with colleague"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event add n/World Cup d/2022-11-21 t/0000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event add n/soccer match v/Kallang d/2020-01-23 t/1900"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event delete i/1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "event list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "Bye"
      }
    ],
    "authorContributionMap": {
      "Anqi-nus": 1,
      "lowjiayee": 6,
      "-": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "del ACTUAL.TXT Pac.log"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "del ..\\build\\libs\\data\\eventlist.txt ..\\build\\libs\\data\\studentlist.txt"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 3,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "rm ACTUAL.TXT "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "rm Pac.log"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "rm -r data/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": "rmdir data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiayee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "lowjiayee": 6,
      "-": 21
    }
  }
]
