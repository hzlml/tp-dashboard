[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "trishaangelica": 10
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Kok Joon | [Github](https://github.com/kokjoon97) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Trisha Labi | [Github](https://github.com/trishaangelica) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Joshua Loh | [Github](https://github.com/JLoh579) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jia Juin | [Github](https://github.com/jiajuinphoon) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wong Jin En Shannon | [Github](https://github.com/Shannonwje) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 1,
      "JLoh579": 1,
      "Shannonwje": 1,
      "jiajuinphoon": 2,
      "-": 4,
      "trishaangelica": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## 1. Design "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## 2. Implementation"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "This section will describe how the main features of the application are implemented."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### 2.1 Delete feature"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 2.1.1 Current implementation"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The delete feature is implemented using a \u003ccode\u003eDeleteCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with an index representing that of the item to be deleted from the shopping"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "list. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The \u003ccode\u003eDuke\u003c/code\u003e class first receives user input from the \u003ccode\u003eUi\u003c/code\u003e class before it creates a "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eParser\u003c/code\u003e object and calls its \u003ccode\u003eparseCommand\u003c/code\u003e function to instantiate a "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eDeleteCommand\u003c/code\u003e object based on that user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The \u003ccode\u003eDuke\u003c/code\u003e class then calls the \u003ccode\u003eexecute\u003c/code\u003e method of the \u003ccode\u003eDeleteCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "which makes another call to the \u003ccode\u003edeleteItem\u003c/code\u003e function of the \u003ccode\u003eShoppingList\u003c/code\u003e object "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "with the specified index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The following sequence diagram below shows how the delete feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](images/DeleteFeature.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 2.1.2 Design considerations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Aspect: Data structure to support the delete feature"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eDeleteCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Easy to add the delete feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 2: Implement delete feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Will have lesser code to deal with as a new function is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### 2.2 Set budget feature"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 2.2.1 Current implementation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The set budget feature is implemented using a \u003ccode\u003eSetBudgetCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with a variable representing the budget amount."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The \u003ccode\u003eDuke\u003c/code\u003e class first receives user input from the \u003ccode\u003eUi\u003c/code\u003e class before it creates a "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eParser\u003c/code\u003e object and calls its \u003ccode\u003eparseCommand\u003c/code\u003e function to instantiate a "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eSetBudgetCommand\u003c/code\u003e object based on that user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The \u003ccode\u003eDuke\u003c/code\u003e class then calls the \u003ccode\u003eexecute\u003c/code\u003e method of the \u003ccode\u003eSetBudgetCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "which makes another call to the \u003ccode\u003esetBudget\u003c/code\u003e function of the \u003ccode\u003eBudget\u003c/code\u003e object "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "with the amount specified by the user for the budget."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The following sequence diagram below shows how the set budget feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](images/SetBudget.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 2.2.2 Design considerations"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Aspect: Data structure to support the set budget feature"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eSetBudgetCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Easy to add the set budget feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 2: Implement set budget feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Will have lesser code to deal with as a new function is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Likes to cook at home and requires help keeping track of complex grocery shopping lists and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "staying within budget"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Prefers to use command line interface applications as opposed to other kinds of applications or"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "paper"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Can type fast"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Make grocery shopping a breeze by offering greater flexibility in managing"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "shopping lists and also providing helpful features like budget tracking"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v1.0|organised home cook|be able to edit my budget|change my budget when I need to|"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v1.0|organised home cook|delete items from the list|manage my list|"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v1.0|frugal home cook|add a budget|so that I know how much I have to spend|"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v2.0|frugal home cook|be notified when I cross my budget|remove some items from my list|"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v2.0|practical home cook|be able to search for items on my list|find things easily in a long list|"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. Should work on any OS that has Java 11 or later installed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. Should respond to any user commands within 2 seconds."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. Should be easy to use for people who have never used a command line interface before."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Appendix D: Glossary"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 103,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.utils.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static Budget myBudget \u003d new Budget();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"Logger.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final String LOG_FILE_ERROR \u003d \"Logging to file unsuccessful\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Duke.setUpLogger();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Sets up the logger to log to the console and a file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static void setUpLogger() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        ConsoleHandler console \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        console.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.addHandler(console);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        File logFile \u003d new File(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (!logFile.exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                logFile.createNewFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            FileHandler logHandler \u003d new FileHandler(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            logHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.addHandler(logHandler);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.SEVERE,LOG_FILE_ERROR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /** Runs the program until termination.  */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"Application starting.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /** Prints the Goodbye message and exits. */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        ui.bidFarewell();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"Application shutting down\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /** Reads the user command and executes it, until the user issues the exit command.  */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            ui.printline(\"\\nEnter command:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            String userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            assert !userInput.isEmpty() : \"Input should not be empty\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert command !\u003d null : \"Command should have been initialised\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            executeCommand(command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            assert command.feedbackToUser !\u003d null : \"Result should have been initialised\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            ui.printline(command.feedbackToUser);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        } while (!command.isExit);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private void executeCommand(Command command) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            command.setData(items,myBudget);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            ui.printline(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 24,
      "kokjoon97": 41,
      "Shannonwje": 1,
      "-": 12,
      "trishaangelica": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ADD\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String SUCCESS_ACK \u003d System.lineSeparator() + \"Added this item: \" + \"%s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an item to the list.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: ADD i/[DESCRIPTION] p/[PRICE]\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example: ADD i/apple p/3.00\" + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String FAILURE_ACK \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"Error! Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"\\nExample: ADD 1 i/apple p/4.50\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String FAILURE_ACK_2 \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"Error! price should follow this format\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"\\nExample: p/4.50\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    private Item add;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * Creates an AddCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * Description is a compulsory input,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * while price is an optional input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * @param description description of item"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * @param price       price of item"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public AddCommand(String description, double price) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        add \u003d new Item(description, price);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            items.add(add);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            assert add.getDescription() !\u003d null : \"(Add Command): Item must not be null.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            LOGGER.log(Level.INFO, \"(Add command)  Added item: \" + add);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d String.format(SUCCESS_ACK,add);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            //@@author kokjoon97"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                LOGGER.log(Level.INFO,\"(Add command) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            LOGGER.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d String.format(FAILURE_ACK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Add command) Invoked with invalid price format: \u0027\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + add.getPrice() + \"\u0027\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d String.format(FAILURE_ACK_2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 9,
      "JLoh579": 5,
      "jiajuinphoon": 44,
      "trishaangelica": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " * Clears the shopping list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"CLEAR\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the list.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: CLEAR\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example: CLEAR\" + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d System.lineSeparator() + \"Your shopping list has been cleared.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assert  items.getList().size() \u003d\u003d 0 : \"Size of list should be zero.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Clear command) List of items is now empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        feedbackToUser \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 25,
      "trishaangelica": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    protected ShoppingList items;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    protected Budget myBudget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public boolean isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public String feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        throw new UnsupportedOperationException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void setData(ShoppingList items,Budget myBudget) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        this.myBudget \u003d myBudget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 7,
      "kokjoon97": 5,
      "trishaangelica": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"DEL\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an item in the list.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: DEL [INDEX]\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Example: DEL 1\" + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String DELETE_MESSAGE \u003d \"\\nGot it! I have removed the following item:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String DELETE_MESSAGE_FAILURE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + \"Please enter a valid index within the bounds\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Constructs the delete command with the user-specified index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param index Index of the item to be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Delete command) User entered index \" + index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            index -\u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            String feedback \u003d DELETE_MESSAGE + items.getItem(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            items.deleteItem(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Delete command) Item was removed from index: \" + index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser \u003d feedback;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                LOGGER.log(Level.INFO,\"(Delete command) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.WARNING,\"(Delete command) Invoked with invalid index: \" + this.index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser \u003d DELETE_MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"EDIT\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the specified item in the list.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: EDIT [INDEX] i/[DESCRIPTION] p/[PRICE]\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example 1: EDIT 1 i/apple p/3.00\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example 2: EDIT 1 i/apple\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example 3: EDIT 1 p/6.00\" + System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            + \"The item has been updated to: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_FAILURE_NOT_IN_LIST \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"OOPS! I don\u0027t have that item in the list yet. Try again? :D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_FAILURE_PRICE_INCORRECT_FORMAT \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"OOPS! I couldn\u0027t process that because price has to be a number\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \", silly!\" + System.lineSeparator() + \"|| Example: EDIT 2 i/apple p/2.00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private int indexOfItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String newDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String newPrice;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Creates an EditCommand and initialises the item index,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * description and price that needs to be edited."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param index       index of item to change"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param description new description of item to change"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param price       new price of item to change"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public EditCommand(int index, String description, String price) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.indexOfItem \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.newDescription \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.newPrice \u003d price;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        LOGGER.log(Level.INFO, \"(Edit command) User entered index: \" + indexOfItem"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" description: \u0027\" + newDescription + \"\u0027 price: \" + newPrice);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            indexOfItem -\u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            Item item \u003d items.getItem(indexOfItem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (newDescription \u003d\u003d null \u0026\u0026 newPrice !\u003d null) { //only edit price"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                item.setPrice(Double.parseDouble(newPrice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                assert item.getPrice() \u003d\u003d Double.parseDouble(newPrice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            } else if (newPrice \u003d\u003d null \u0026\u0026 newDescription !\u003d null) { //only edit description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                item.setDescription(newDescription);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                assert item.getDescription() \u003d\u003d newDescription;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            } else if (newPrice !\u003d null \u0026\u0026 newDescription !\u003d null) { //edit both price and description"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                item.setDescription(newDescription);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                item.setPrice(Double.parseDouble(newPrice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                assert item.getDescription() \u003d\u003d newDescription;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                assert item.getPrice() \u003d\u003d Double.parseDouble(newPrice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            LOGGER.log(Level.INFO, \"(Edit command)  Item has been updated to: \" + item.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d String.format(MESSAGE_SUCCESS, item.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            //@@author kokjoon97"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                LOGGER.log(Level.INFO,\"(Edit command) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Edit command)  Item to edit is not found in list\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d MESSAGE_FAILURE_NOT_IN_LIST;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Edit command) Invoked with invalid price format: \u0027\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + this.newPrice + \"\u0027\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d MESSAGE_FAILURE_PRICE_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 9,
      "JLoh579": 4,
      "Shannonwje": 11,
      "trishaangelica": 62
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"BYE\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: BYE\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example: BYE\" + System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d System.lineSeparator() + \"Exiting SHOCO as requested ...\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        feedbackToUser \u003d MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 2,
      "JLoh579": 3,
      "trishaangelica": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.ui.CommandLineTable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " * Displays the shopping list, cost of items, and budget details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"FIND\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String FIND_MESSAGE \u003d System.lineSeparator() + \"Here are the matching items:\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all items that contain the keyword.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: FIND [KEYWORD]\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Example: FIND apples\" + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        ArrayList\u003cItem\u003e filteredItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        int size \u003d items.getSize();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        int matches \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        int[] indexArray \u003d new int[size];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            Item unfilteredItem \u003d items.getItem(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert unfilteredItem !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (unfilteredItem.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                filteredItems.add(unfilteredItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                indexArray[matches] \u003d i + 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                matches +\u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        int filteredListSize \u003d filteredItems.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Find command) Matches found: \" + filteredListSize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        if (filteredListSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser \u003d \"Sorry, no results could be found!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert filteredListSize !\u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            System.out.println(FIND_MESSAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            CommandLineTable st \u003d new CommandLineTable();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            st.setShowVerticalLines(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            st.setHeaders(\"Item\", \"Price\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            for (int i \u003d 0; i \u003c filteredItems.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                String itemLine \u003d indexArray[i] + \". [\" + filteredItems.get(i).getStatusIcon()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        + \"] \" + filteredItems.get(i).getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                st.addRow(itemLine, String.format(\"$%.2f\", filteredItems.get(i).getPrice()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            st.print();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Find command) Results displayed successfully\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 69
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"HELP\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: HELP\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example: HELP\" + System.lineSeparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        feedbackToUser \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + AddCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + EditCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + ListCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + FindCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + DeleteCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + ClearCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + MarkCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + UnmarkCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + SetBudgetCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + ResetBudgetCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + HelpCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                + ExitCommand.MESSAGE_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 3,
      "kokjoon97": 1,
      "Shannonwje": 1,
      "trishaangelica": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public IncorrectCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JLoh579": 1,
      "trishaangelica": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " * Displays the shopping list, cost of items, and budget details."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"DISPLAY\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String LIST_MESSAGE \u003d System.lineSeparator() + \"Here is your shopping list:\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String TOTAL_COST_MESSAGE \u003d \"Total cost of items: %.2f\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String BUDGET_MESSAGE \u003d \"Your remaining budget / total budget: %.2f / %.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all items in the list.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: DISPLAY\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example: DISPLAY\" + System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        // Prepare info for printing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double totalCost \u003d items.getTotalCost();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        String budgetDetails \u003d String.format(TOTAL_COST_MESSAGE, totalCost)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                + String.format(BUDGET_MESSAGE, myBudget.getRemainingBudget(totalCost), myBudget.getAmount());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        // Printing gets done here"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        System.out.println(LIST_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.showTableOfItems();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(budgetDetails);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        LOGGER.log(Level.INFO,\"(List command) Items, total cost, and budget have been displayed.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        // Feedback is empty"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 36,
      "trishaangelica": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/MarkCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class MarkCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"MARK\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + \"Yes! I\u0027ve marked this item as bought:\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"%s\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String FAIL_MESSAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + \"Oh No! This item does not exist in the list\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks an item as bought.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                    + System.lineSeparator() + \"|| Parameters: MARK [INDEX]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"|| Example: MARK 1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private int indexOfItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public MarkCommand(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.indexOfItem \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        LOGGER.log(Level.INFO, \"(Mark command) User entered index: \" + indexOfItem);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            Item markItem \u003d items.markAsBought(indexOfItem);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            assert markItem.getStatusIcon().equals(\"B\") : \"Item should be marked as bought\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.INFO, \"(Mark command)  Item has been marked: \" + markItem.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d String.format(SUCCESS_MESSAGE, markItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Mark command)  index is out of bounds\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d FAIL_MESSAGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 3,
      "Shannonwje": 38,
      "trishaangelica": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ResetBudgetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class ResetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"RES\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String SUCCESS_RESET_BUDGET \u003d System.lineSeparator() + \"Budget has been reset to $0.00\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Resets the budget to $0.00.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: RES\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example: RES\" + System.lineSeparator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public ResetBudgetCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        myBudget.resetBudget();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        assert myBudget.getAmount() \u003d\u003d 0 : \"Budget should be zero\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Reset Budget command) Budget amount is set to zero: \" + myBudget.getAmount());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        feedbackToUser \u003d SUCCESS_RESET_BUDGET;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        //@@author kokjoon97"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Reset Budget command) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 10,
      "JLoh579": 2,
      "Shannonwje": 18,
      "trishaangelica": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SetBudgetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "public class SetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"SET\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String SET_BUDGET_MESSAGE \u003d System.lineSeparator() + \"Setting budget to \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the budget based on user input.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: SET /b[BUDGET]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Example: SET /b 100.00\" + System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Constructs the set budget command with the user-specified budget."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param amount Budget specified by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public SetBudgetCommand(double amount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Set budget) User entered budget: \" + amount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double correctBudget \u003d myBudget.setBudget(amount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Set budget) Budget was corrected to: \" + correctBudget);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert correctBudget \u003c\u003d 5000 : \"Budget should not exceed $5000\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert correctBudget \u003e\u003d 0 : \"Budget should not be negative\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Set budget) Budget amount: \" + correctBudget + \" did not fail assertions.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        String feedback \u003d SET_BUDGET_MESSAGE + \"$\" + correctBudget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        feedbackToUser \u003d feedback;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Set budget) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UnmarkCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class UnmarkCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"UNMARK\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + \"Yes! I\u0027ve unmarked this item as bought:\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"%s\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String FAIL_MESSAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + \"Oh No! This item does not exist in the list\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unmarks a bought item.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                    + System.lineSeparator() + \"|| Parameters: UNMARK [INDEX]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                    + System.lineSeparator() + \"|| UNMARK 1\" + System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private int indexOfItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public UnmarkCommand(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.indexOfItem \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        LOGGER.log(Level.INFO, \"(Unmark command) User entered index: \" + indexOfItem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            Item unmarkItem \u003d items.unmarkAsBought(indexOfItem);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            assert unmarkItem.getStatusIcon().equals(\"0\") : \"Item should be marked as unbought\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.INFO, \"(Unmark command)  Item has been marked: \" + unmarkItem.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d String.format(SUCCESS_MESSAGE, unmarkItem);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Unmark command)  index is out of bounds\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d FAIL_MESSAGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 3,
      "Shannonwje": 35,
      "trishaangelica": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Budget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final double MAX_BUDGET \u003d 5000;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final double MIN_BUDGET \u003d 0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Creates a new budget object with the smallest allowable amount."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        amount \u003d MIN_BUDGET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Sets the budget based on user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param amount The user supplied amount."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @return The correct budget amount in case the user-specified amount is too high or negative."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public double setBudget(double amount) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        amount \u003d Math.min(amount, MAX_BUDGET);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assert amount \u003c\u003d MAX_BUDGET : \"Amount should not be greater than 5000\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        amount \u003d Math.max(amount, MIN_BUDGET);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assert amount \u003e\u003d MIN_BUDGET : \"Amount should not be negative\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Calculates the remaining budget based on the total cost of items."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param totalCost Total cost of items."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return The remaining budget."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public double getRemainingBudget(double totalCost) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return amount - totalCost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void resetBudget() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        amount \u003d MIN_BUDGET;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 33,
      "kokjoon97": 6,
      "Shannonwje": 2,
      "trishaangelica": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Item.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private boolean isBought;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String BOUGHT \u003d \"B\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String NOT_BOUGHT \u003d \"0\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Constructs an Item object with the provided description and price."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param description Name of the object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param price Price of the object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public Item(String description,double price) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.isBought \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Constructs an Item object with only description provided and no price indicated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param description Name of the object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.price \u003d 0.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.isBought \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void setPrice(double price) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Returns the status of the item to tell if it is bought or not bought yet."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @return Status of the item."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (isBought) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            return BOUGHT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            return NOT_BOUGHT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void markAsBought() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        isBought \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void unmarkAsBought() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        isBought \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description + String.format(\" $%.2f\", price);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 3,
      "kokjoon97": 19,
      "Shannonwje": 16,
      "jiajuinphoon": 1,
      "trishaangelica": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/ShoppingList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.ui.CommandLineTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class ShoppingList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private static ArrayList\u003cItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public ArrayList\u003cItem\u003e getList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Returns the size of the items ArrayList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @return Size of the items ArrayList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Prints a table representing the shopping list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void showTableOfItems() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        CommandLineTable st \u003d new CommandLineTable();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        st.setShowVerticalLines(true);//if false (default) then no vertical lines are shown"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        st.setHeaders(\"Item\", \"Price\");//optional - if not used then there will be no header and horizontal lines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        int bulletNum \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        String itemLine;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        for (Item item : items) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            itemLine \u003d bulletNum + \". [\" + item.getStatusIcon() + \"] \" + item.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            st.addRow(itemLine, String.format(\"$%.2f\",item.getPrice()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            bulletNum++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        st.print();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Calculates and returns the total cost of the items in the shopping list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @return Total cost of items in shopping list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public double getTotalCost() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double totalCost \u003d 0.0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        for (Item item : items) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            totalCost +\u003d item.getPrice();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return totalCost;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Clear all items from the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        items.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Marks item in index as bought."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param index index of item to mark"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @return item that is marked"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item markAsBought(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (index \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Item itemBought \u003d items.get(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        itemBought.markAsBought();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return itemBought;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Returns the item at the specified index."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param index Index of the item requested."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return Item at the specified index."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item getItem(int index) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Unmarks item in index as bought."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param index index of item to unmark"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @return item that is unmarked"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item unmarkAsBought(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (index \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Item itemNotBought \u003d items.get(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        itemNotBought.unmarkAsBought();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return itemNotBought;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Removes an item at the specified index."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param index Index of the item to be removed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void deleteItem(int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Item unwantedItem \u003d items.get(index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.remove(unwantedItem);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Adds item to list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param item Item to add."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @throws NullPointerException If there is no description."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public void add(Item item) throws NullPointerException, NumberFormatException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(item);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (item.getDescription() \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 33,
      "kokjoon97": 27,
      "Shannonwje": 45,
      "jiajuinphoon": 5,
      "trishaangelica": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/CommandLineTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author logicbig-reused"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//Reused from https://www.logicbig.com/how-to/code-snippets/jcode-java-cmd-command-line-table.html with minor modifications"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class CommandLineTable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private static final String HORIZONTAL_SEP \u003d \"-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String verticalSep;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String joinSep;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String[] headers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private List\u003cString[]\u003e rows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public CommandLineTable() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        setShowVerticalLines(false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void setShowVerticalLines(boolean showVerticalLines) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        verticalSep \u003d showVerticalLines ? \"|\" : \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        joinSep \u003d showVerticalLines ? \"+\" : \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void setHeaders(String... headers) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.headers \u003d headers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void addRow(String... cells) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        rows.add(cells);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Prints table."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int[] maxWidths \u003d headers !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                ? Arrays.stream(headers).mapToInt(String::length).toArray() : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        for (String[] cells : rows) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (maxWidths \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                maxWidths \u003d new int[cells.length];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (cells.length !\u003d maxWidths.length) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                throw new IllegalArgumentException(\"Number of row-cells and headers should be consistent\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            for (int i \u003d 0; i \u003c cells.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                maxWidths[i] \u003d Math.max(maxWidths[i], cells[i].length());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (headers !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            printLine(maxWidths);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            printRow(headers, maxWidths);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            printLine(maxWidths);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        for (String[] cells : rows) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            printRow(cells, maxWidths);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (headers !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            printLine(maxWidths);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void printLine(int[] columnWidths) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        for (int i \u003d 0; i \u003c columnWidths.length; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            String line \u003d String.join(\"\", Collections.nCopies(columnWidths[i]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + verticalSep.length() + 1, HORIZONTAL_SEP));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            System.out.print(joinSep + line + (i \u003d\u003d columnWidths.length - 1 ? joinSep : \"\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void printRow(String[] cells, int[] maxWidths) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        for (int i \u003d 0; i \u003c cells.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            String s \u003d cells[i];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            String verStrTemp \u003d i \u003d\u003d cells.length - 1 ? verticalSep : \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            System.out.printf(\"%s %-\" + maxWidths[i] + \"s %s\", verticalSep, s, verStrTemp);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "} //@@author logicbig"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "trishaangelica": 82
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String GREET_MESSAGE \u003d \"\\n      HELLO! I\u0027m SHOCO. Your digital shopping list!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String SHOCO_LOGO \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "              \"\\n                                         __\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n                                        /__\\\\\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n                                       /\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n        ______________________________/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |     |     |     |    |      /\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |____ |____ |____ |____|_____/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |     |     |     |    |    /\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |____ |____ |____ |____|___/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |     |     |     |    |  /\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |____ |____ |____ |____|_/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |____ |____ |____ |___ |/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"                               \\\\\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"                                \\\\\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"                                /\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"        _______________________/\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n          /\\\\              /\\\\\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n          \\\\/              \\\\/\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.print(GREET_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(SHOCO_LOGO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Prints the goodbye message."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void bidFarewell() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(\"BYE\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Reads a non-empty input from the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return non-empty input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        while (input.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            input \u003d input.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void printline(String str) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/utils/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.commands.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.MarkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ResetBudgetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.UnmarkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static Command newCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String[] commandAndArgs \u003d splitCommandAndArgs(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String commandWord \u003d commandAndArgs[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String arguments;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            arguments \u003d commandAndArgs[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            arguments \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            createAddCommand(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        case MarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            createMarkCommand(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        case UnmarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            createUnmarkCommand(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            createEditCommand(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        //@@author kokjoon97"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            createDeleteCommand(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            createFindCommand(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        case SetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            createSetBudgetCommand(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            createListCommand(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            createClearCommand(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        case ResetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            createResetBudgetCommand(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            createExitCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        case HelpCommand.COMMAND_WORD: //fall through"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            createHelpCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert newCommand !\u003d null : \"newCommand should have been initialised\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        return newCommand;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Splits Command and Args from full input string."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param userInput full input string."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String[] splitCommandAndArgs(String userInput) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return userInput.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createAddCommand(String arguments) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            String[] args \u003d splitArgsForAddCommand(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            String prices;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            description \u003d args[0];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            prices \u003d args[1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (prices \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                newCommand \u003d new AddCommand(description, 0.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    double price \u003d Double.parseDouble(prices);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    newCommand \u003d new AddCommand(description, price);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \"Oops! For that to be done properly, check if these are met:\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \" - Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \" - Price of an item has to be in numerical form.\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \" - At least \u0027i/\u0027 or \u0027p/\u0027 should be present.\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \"|| Example: ADD i/apple p/2.50\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"Error! Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"\\nExample: ADD 1 i/apple p/4.50\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"Oops! For that to be done properly, check if these are met:\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \" - Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \" - Price of an item has to be in decimal form.\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \" - At least \u0027i/\u0027 or \u0027p/\u0027 should be present.\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \"|| Example: ADD i/apple p/2.50\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    private String[] splitArgsForAddCommand(String arguments) throws NullPointerException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String[] argsArray \u003d new String[]{};"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String descriptionDelimiter \u003d \"i/\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String priceDelimiter \u003d \"p/\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String itemPrice;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String itemDescription;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        int buffer \u003d 2;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int indexOfiPrefix;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int indexOfpPrefix;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        boolean descriptionPresent \u003d arguments.contains(descriptionDelimiter);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        boolean pricePresent \u003d arguments.contains(priceDelimiter);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (descriptionPresent \u0026\u0026 !pricePresent) { //eg args: ADD i/apple"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            indexOfiPrefix \u003d arguments.trim().indexOf(descriptionDelimiter);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            itemDescription \u003d arguments.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            argsArray \u003d new String[]{itemDescription, null};"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        } else if (descriptionPresent \u0026\u0026 pricePresent) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            indexOfiPrefix \u003d arguments.trim().indexOf(descriptionDelimiter);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            indexOfpPrefix \u003d arguments.trim().indexOf(priceDelimiter);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (indexOfpPrefix \u003c indexOfiPrefix) { //e.g args: ADD p/4.50 i/apple"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemDescription \u003d arguments.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemPrice \u003d arguments.substring(indexOfpPrefix + buffer, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            } else { //e.g args: ADD i/apple p/4.50"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemDescription \u003d arguments.substring(indexOfiPrefix + buffer, indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemPrice \u003d arguments.substring(indexOfpPrefix + buffer).trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            argsArray \u003d new String[]{itemDescription, itemPrice};"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } else if (!descriptionPresent \u0026\u0026 pricePresent) { //ADD p/3.50"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            argsArray \u003d new String[]{null, null};"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (argsArray[0] \u003d\u003d null \u0026\u0026 argsArray[1] \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return argsArray;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the MarkCommand."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createMarkCommand(String arguments) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            String[] words \u003d arguments.trim().split(\" \");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                int index \u003d Integer.parseInt(words[0]) - 1;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                newCommand \u003d new MarkCommand(index);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                LOGGER.log(Level.WARNING, \"(Mark command) Rejecting user command, too many or no arguments.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                newCommand \u003d new IncorrectCommand(\"Please provide a single numerical index number!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Mark command) Rejecting user command, invalid command format entered.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            newCommand \u003d new IncorrectCommand(\"Please provide a single numerical index number!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the Unmark Command."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createUnmarkCommand(String arguments) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            String[] words \u003d arguments.trim().split(\" \");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                int index \u003d Integer.parseInt(words[0]) - 1;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                newCommand \u003d new UnmarkCommand(index);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                LOGGER.log(Level.WARNING,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                        \"(Unmark command) Rejecting user command, too many or no arguments.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                newCommand \u003d new IncorrectCommand(\"Please provide a single numerical index number!\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    \"(Unmark command) Rejecting user command, invalid command format entered.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            newCommand \u003d new IncorrectCommand(\"Please provide a single numerical index number!\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the EditCommand."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createEditCommand(String arguments) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int indexOfItem;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String newItemPrice;  //newItemPrice is String type as it need not be present (allows null)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String newItemDescription;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            String[] args \u003d splitArgsForEditCommand(arguments);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            indexOfItem \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newItemDescription \u003d args[1];"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newItemPrice \u003d args[2];"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new EditCommand(indexOfItem, newItemDescription, newItemPrice);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Edit command) Rejecting user command, invalid command format entered.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"Oops! For that to be done properly, check if these are met:\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \" - Index of item must be a positive number.\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \" - Price of an item has to be in decimal form.\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \" - At least \u0027i/\u0027 or \u0027p/\u0027 should be present.\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \" - If \u0027i/\u0027 or \u0027p/\u0027 is present, ensure i/[NEW DESCRIPTION] or p/[NEW PRICE] is present.\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"|| Example: EDIT 2 i/apple p/2.50\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Split args for Edit Command."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String[] splitArgsForEditCommand(String arguments) throws NullPointerException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String[] argsArray;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String descriptionDelimiter \u003d \"i/\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String priceDelimiter \u003d \"p/\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String indexOfItem;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String itemPrice;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String itemDescription;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int buffer \u003d 2;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int indexOfiPrefix;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int indexOfpPrefix;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        boolean descriptionPresent \u003d arguments.contains(descriptionDelimiter);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        boolean pricePresent \u003d arguments.contains(priceDelimiter);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (descriptionPresent \u0026\u0026 !pricePresent) { //e.g args: EDIT 2 i/apple"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            indexOfiPrefix \u003d arguments.trim().indexOf(descriptionDelimiter);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            itemDescription \u003d arguments.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (itemDescription.equals(\"\")) { //e.g args: EDIT 2 i/"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                indexOfItem \u003d arguments.substring(0, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                argsArray \u003d new String[]{indexOfItem, itemDescription, null};"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } else if (pricePresent \u0026\u0026 !descriptionPresent) { //e.g args: EDIT 2 p/4.50"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            indexOfpPrefix \u003d arguments.trim().indexOf(priceDelimiter);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            itemPrice \u003d arguments.substring(indexOfpPrefix + buffer).trim();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (itemPrice.equals(\"\")) { //e.g args: EDIT 2 p/"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            indexOfItem \u003d arguments.substring(0, indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            argsArray \u003d new String[]{indexOfItem, null, itemPrice};"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } else if (descriptionPresent \u0026\u0026 pricePresent) { //e.g args: EDIT 2 i/.. p/.."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            indexOfiPrefix \u003d arguments.trim().indexOf(descriptionDelimiter);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            indexOfpPrefix \u003d arguments.trim().indexOf(priceDelimiter);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (indexOfpPrefix \u003c indexOfiPrefix) { //e.g args: EDIT 2 p/4.50 i/apple"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                indexOfItem \u003d arguments.substring(0, indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemDescription \u003d arguments.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemPrice \u003d arguments.substring(indexOfpPrefix + buffer, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            } else { //e.g args: EDIT 2 i/apple p/4.50"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                indexOfItem \u003d arguments.substring(0, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemDescription \u003d arguments.substring(indexOfiPrefix + buffer, indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemPrice \u003d arguments.substring(indexOfpPrefix + buffer).trim();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (itemDescription.equals(\"\") || itemPrice.equals(\"\")) { //e.g args: EDIT 2 p/i/apple OR EDIT 2 p/4 i/"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            argsArray \u003d new String[]{indexOfItem, itemDescription, itemPrice};"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            argsArray \u003d new String[]{null, null, null};"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if ((Integer.parseInt(argsArray[0]) \u003c 0) | (argsArray[1] \u003d\u003d null \u0026\u0026 argsArray[2] \u003d\u003d null)) { //index \u003c 0 or i/p/"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return argsArray;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Initialises the DeleteCommand."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private void createDeleteCommand(String arguments) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            int index \u003d Integer.parseInt(arguments);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.WARNING,\"(Delete command) Rejecting user command, user did not enter a number for index.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Please enter an index\""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Example: DEL 3\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Initialises the ListCommand."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createListCommand(String arguments) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (arguments !\u003d null) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"Invalid command.\""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"To display your shopping list, just input \\\"DISPLAY\\\".\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Initialises the ClearCommand."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createClearCommand(String arguments) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (arguments !\u003d null) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"Invalid command.\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"To clear your shopping list, just input \\\"CLEAR\\\".\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Initialises the SetBudgetCommand."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private void createSetBudgetCommand(String arguments) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (!arguments.contains(\"b/\")) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                LOGGER.log(Level.WARNING,\"(Set budget) Rejecting user command, no \\\"b/\\\" substring.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        + \"Please enter the amount after the \\\"b/\\\" divider\""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        + \"Example: SET b/300\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                assert arguments.indexOf(\"b/\") !\u003d -1 : \"Substring \\\"b/\\\" should be present\";"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                double amount \u003d Double.parseDouble(arguments.substring(2));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                newCommand \u003d new SetBudgetCommand(amount);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } catch (NumberFormatException | NullPointerException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.WARNING,\"(Set budget) Rejecting user command, no number was specified for budget.\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Please enter an amount for your budget\""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Example: SET b/300\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the ResetBudgetCommand."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private void createResetBudgetCommand(String arguments) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (arguments !\u003d null) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING,"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    \"(Reset Budget command) Rejecting user command, should not have arguments.\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    + \"Invalid command.\""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    + \"To reset your budget, just input \\\"RES\\\".\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new ResetBudgetCommand();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the HelpCommand."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createHelpCommand() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        newCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the ExitCommand."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createExitCommand() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        newCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private void createFindCommand(String arguments) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        if (arguments \u003d\u003d null) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Please enter a keyword after FIND\""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Example: FIND apples\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Find command) User did not supply keyword for FIND\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert arguments !\u003d null;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Find command) User supplied keyword: \" + arguments);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new FindCommand(arguments);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 18,
      "kokjoon97": 90,
      "Shannonwje": 49,
      "jiajuinphoon": 42,
      "trishaangelica": 250
    }
  },
  {
    "path": "src/main/java/seedu/duke/utils/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    boolean fileExists \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public ArrayList\u003cItem\u003e loadItem() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String str;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        ArrayList\u003cItem\u003e shoppingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            str \u003d loadStringFromFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            List\u003cItem\u003e tempItemList \u003d extractTempList(str);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            Item currentItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            for (Item i : tempItemList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    currentItem \u003d convertGeneralItemtoSpecificItem(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    shoppingList.add(currentItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                } catch (................................) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    /////////////////////////////////////////////////"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            ////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return shoppingList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private List\u003cItem\u003e extractTempList(String str) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Type listType \u003d new TypeToken\u003cList\u003cItem\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return gson.fromJson(jsonStr, listType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private Item convertGeneralItemtoSpecificItem(Item item) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Item convertedItem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        convertedItem \u003d new Item(item.getDescription(), item.getPrice());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (item.getStatusIcon().equals(\"B\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            convertedItem.markAsBought();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return convertedItem;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private String loadStringFromFile() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String str \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            fileExists \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            str \u003d s.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void save (ShoppingList shoppingList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            saveItemAsString(fileName, ShoppingList.getList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (........................) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    static void saveItemAsString(String fileName, ArrayList\u003cItem\u003e shoppingList) throws IOException{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        FileWriter fw \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String json \u003d gson.toJson(shoppingList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        fw.write(json);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        fw.flush();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 103
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    Budget myBudget \u003d new Budget();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    void testAdd_ItemDescriptionOnly_Success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command \u003d new AddCommand(\"apple\", 0.0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String expectedFeedback \u003d System.lineSeparator() + \"Added this item: \" + items.getItem(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    void testAdd_ItemPriceAndDescription_Success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command \u003d new AddCommand(\"banana\", 5.50);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        String expectedFeedback \u003d System.lineSeparator() + \"Added this item: \" + items.getItem(0)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public void testAdd_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String price \u003d \"5.00\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        double prices \u003d Double.parseDouble(price);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command \u003d new AddCommand(null,prices);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String expectedFeedback3 \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                + \"Error! Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                + \"\\nExample: ADD 1 i/apple p/4.50\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback3, command.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 9,
      "JLoh579": 6,
      "jiajuinphoon": 33,
      "trishaangelica": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    ShoppingList things;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    Item firstAddition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        things \u003d new ShoppingList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        firstAddition \u003d new Item(\"apple\",3.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        things.add(firstAddition);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_negativeIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new DeleteCommand(-1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(things,null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + \"Please enter a valid index within the bounds\", command.feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_zeroIndex() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(things,null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + \"Please enter a valid index within the bounds\", command.feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_tooLargeIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new DeleteCommand(100);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(things,null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + \"Please enter a valid index within the bounds\",command.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 54
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    Budget myBudget \u003d new Budget();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    Command command \u003d new Command();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void testEdit_ItemDescriptionOnly_Success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(1, \"apples\", null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        String expectedFeedback \u003d  String.format(EditCommand.MESSAGE_SUCCESS, items.getList().get(0).toString())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    void testEdit_ItemPriceOnly_Success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"banana\", 4.50));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(2, null, \"3.5\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        String expectedFeedback1 \u003d  String.format(EditCommand.MESSAGE_SUCCESS, items.getList().get(1).toString())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback1, command.feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    void testEdit_ItemPriceAndDescription_Success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"banana\", 4.50));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(3, \"banana\", \"5.00\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        String expectedFeedback2 \u003d  String.format(EditCommand.MESSAGE_SUCCESS, items.getList().get(2).toString())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback2, command.feedbackToUser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void testEdit_ItemToEditNotInList_exceptionThrown() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"banana\", 4.50));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(0, \"banana\", \"5.00\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback3 \u003d EditCommand.MESSAGE_FAILURE_NOT_IN_LIST;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback3, command.feedbackToUser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void testEdit_ItemPriceIncorrectFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.add(new Item(\"banana\", 4.50));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(1, \"banana\", \"QWERTY\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback3 \u003d EditCommand.MESSAGE_FAILURE_PRICE_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback3, command.feedbackToUser);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 35,
      "JLoh579": 10,
      "trishaangelica": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/MarkCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class MarkCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"banana\", 4.5));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testMark_unmarkedItem_Success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new MarkCommand(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + \"Yes! I\u0027ve marked this item as bought:\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + System.lineSeparator() + items.getList().get(1).toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testMark_outOfLimitIndex_Success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new MarkCommand(10);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback1 \u003d MarkCommand.FAIL_MESSAGE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback1, command.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testMark_negativeIndex_Success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new MarkCommand(-5);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback2 \u003d MarkCommand.FAIL_MESSAGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback2, command.feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 2,
      "JLoh579": 6,
      "Shannonwje": 45,
      "trishaangelica": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UnmarkCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class UnmarkCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    Command command \u003d new Command();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"banana\", 4.5));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testUnmark_MarkedItem_Success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new MarkCommand(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new UnmarkCommand(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + \"Yes! I\u0027ve unmarked this item as bought:\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + System.lineSeparator() + items.getList().get(1).toString()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testUnmark_outOfLimitIndex_Success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new UnmarkCommand(10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback1 \u003d UnmarkCommand.FAIL_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback1, command.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testUnmark_negativeIndex_Success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new UnmarkCommand(-5);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback2 \u003d UnmarkCommand.FAIL_MESSAGE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assertEquals(expectedFeedback2, command.feedbackToUser);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 2,
      "JLoh579": 7,
      "Shannonwje": 51,
      "trishaangelica": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/BudgetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private Budget testBudget \u003d new Budget();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void getRemaining_zeroTotalCost_remainingEqualsBudget() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        testBudget.setBudget(50);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double totalCost \u003d 0.0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(testBudget.getAmount(),testBudget.getRemainingBudget(totalCost));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void getRemaining_totalCostExceedsBudget_remainingIsNegative() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        testBudget.setBudget(50);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double totalCost \u003d 60;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double expectedResult \u003d -10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedResult,testBudget.getRemainingBudget(totalCost));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void setBudget_negativeInput_setToZero() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        testBudget.setBudget(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double testAmount \u003d -100;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double expectedResult \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        testBudget.setBudget(testAmount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedResult,testBudget.getAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void setBudget_tooLargeInput_setToMax() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        testBudget.setBudget(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double testAmount \u003d 6000;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double expectedResult \u003d 5000;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        testBudget.setBudget(testAmount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedResult,testBudget.getAmount());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 26,
      "kokjoon97": 14,
      "trishaangelica": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/utils/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ResetBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"unknownCommandWord arguments\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for 0-argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"HELP\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"CLEAR\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"DISPLAY\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, ListCommand.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"BYE\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_resetBudgetCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"RES\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, ResetBudgetCommand.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for single index argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_deleteCommandNoArgs_errorMessage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"DEL\", \"DEL \" };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Please enter an index\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Example: DEL 3\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_deleteCommandArgsIsNotSingleNumber_errorMessage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"DEL notAnumber \", \"DEL 8*wh12\", \"DEL 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Please enter an index\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Example: DEL 3\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_markCommandNoArgs_errorMessage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"MARK\", \"MARK \" };"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        final String resultMessage \u003d \"Please provide a single numerical index number!\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_markCommandArgsIsNotSingleNumber_errorMessage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"MARK notAnumber \", \"MARK 8*wh12\", \"MARK 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        final String resultMessage \u003d \"Please provide a single numerical index number!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_unMarkCommandNoArgs_errorMessage() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"UNMARK\", \"UNMARK \" };"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        final String resultMessage \u003d \"Please provide a single numerical index number!\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_unMarkCommandArgsIsNotSingleNumber_errorMessage() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        final String[] inputs \u003d { \"UNMARK notAnumber \", \"UNMARK 8*wh12\", \"UNMARK 1 2 3 4 5\" };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        final String resultMessage \u003d \"Please provide a single numerical index number!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for add item command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_addCommandNoDescription_errorMessage() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"ADD\", \"ADD \", \"ADD p/2.50\" };"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Error! Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"\\nExample: ADD 1 i/apple p/4.50\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_addCommandIncorrectPriceFormat_errorMessage() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"ADD i/apple p/8*wh12\", \"ADD i/apple p/ \" };"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Oops! For that to be done properly, check if these are met:\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Price of an item has to be in numerical form.\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - At least \u0027i/\u0027 or \u0027p/\u0027 should be present.\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"|| Example: ADD i/apple p/2.50\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for edit item command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_editCommandInvalidArgs_errorMessage() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"EDIT\", \"EDIT \", \"EDIT wrong args format\", \"EDIT i/apple p/2.50\", \"EDIT 1 i/p/2.50\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            \"EDIT 1 i/apple p/\", \"EDIT 1 i/p/WERT\", \"EDIT 1 i/p/\" };"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Oops! For that to be done properly, check if these are met:\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Index of item must be a positive number.\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Price of an item has to be in decimal form.\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - At least \u0027i/\u0027 or \u0027p/\u0027 should be present.\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - If \u0027i/\u0027 or \u0027p/\u0027 is present, ensure i/[NEW DESCRIPTION] or p/[NEW PRICE] is present.\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"|| Example: EDIT 2 i/apple p/2.50\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for add item command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_setBudgetCommandIncorrectFormat_errorMessage() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d { \"SET\", \"SET \", \"SET b/ 8*wh12\", \"SET b/\" };"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Please enter an amount for your budget\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Example: SET b/300\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Utility methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String resultMessage, String[] emptyInputs) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        for (String input : emptyInputs) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            assertEquals(result.feedbackToUser, resultMessage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Parses input and asserts the class/type of the returned command object."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 11,
      "jiajuinphoon": 2,
      "trishaangelica": 208
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD wrong args format"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD p/2.50"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "ADD i/apple p/8*wh12"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "ADD i/apple p/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD i/apple p/2.45"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD i/banana p/3.00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD i/cherry p/5.60"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "FIND cherry"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "FIND nothing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SET"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SET b/ 8*wh12"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SET b/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SET b/500.00"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT wrong args format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT i/tomato p/3.40"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/p/2.50"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/apple p/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/TOMATO p/WERT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/p/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/apples"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/apple p/2.50"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 2 p/6.50 i/bananas"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "EDIT 3 p/8.00"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "MARK"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "MARK 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "MARK 2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "UNMARK"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "UNMARK 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "UNMARK notAnumber"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "UNMARK 8*wh12"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "UNMARK 1 2 3 4 5"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "DEL notAnumber"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "DEL 8*wh12"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "DEL 1 2 3 4 5"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "DEL 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "DEL"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "unknownCommandWord arguments"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "DISPLAY"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "RES"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "CLEAR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "HELP"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "BYE"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 10,
      "kokjoon97": 2,
      "Shannonwje": 2,
      "trishaangelica": 30
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    \u0027dir /b duke-0.0.1.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 1,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "cd \"../build/libs/\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "trishaangelica": 1
    }
  }
]
