[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 1,
      "-": 42,
      "trishaangelica": 10
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Kok Joon | [Github](https://github.com/kokjoon97) | [Portfolio](team/kokjoon97.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Labi Trisha Angelica Vergara | [Github](https://github.com/trishaangelica) | [Portfolio](team/trishaangelica.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Loh Ching Wei, Joshua | [Github](https://github.com/JLoh579) | [Portfolio](team/jloh579.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Phoon Jia Juin | [Github](https://github.com/jiajuinphoon) | [Portfolio](team/jiajuinphoon.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wong Jin En, Shannon | [Github](https://github.com/Shannonwje) | [Portfolio](team/shannonwje.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 4,
      "jiajuinphoon": 2,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "# SHOCO v2.1 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "By: `Team SHOCOTech`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Since: `Feb 2020`"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Creators: `Tan Kok Joon`, `Labi Trisha Angelica Vergara`, `Loh Ching Wei, Joshua`, `Phoon Jia Juin`, `Wong Jin En, Shannon`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[1. Introduction](#1-introduction)**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[2. Overview of the SHOCO application](#2-overview-of-the-shoco-application)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[3. Implementation](#3-implementation)**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.1 View help feature](#31-view-help-feature)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.2 Display feature](#32-display-feature)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.3 Set budget feature](#33-set-budget-feature)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.4 Add feature](#34-add-feature)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.5 Edit feature](#35-edit-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.6 Mark and Unmark feature](#36-mark-and-unmark-feature)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.7 Find feature](#37-find-feature)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.8 Delete feature](#38-delete-feature)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.9 Clear list feature](#39-clear-list-feature)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.10 Reset budget feature](#310-reset-budget-feature)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [3.11 Exit program feature](#311-exit-program-feature)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * **[Appendix A: Product Scope](#appendix-a-product-scope)**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * **[Appendix B: User Stories](#appendix-b-user-stories)**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * **[Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * **[Appendix D: Instructions for Manual Testing](#appendix-d-instructions-for-manual-testing)**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [Launch and Shutdown](#launch-and-shutdown)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [Set and Reset a budget](#set-and-reset-a-budget)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [Add and Edit an item](#add-and-edit-an-item)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [Mark and Un-Mark an item](#mark-and-un-mark-an-item)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [Find and Delete an item](#find-and-delete-an-item)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    + [Display and Clear the shopping list](#display-and-clear-the-shopping-list)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " \u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "### Purpose of this guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "This guide describes the software architecture and design of the SHOCO application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "It will evolve throughout the design and implementation of each SHOCO release. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Currently, this document is for the third public release of the application, SHOCO v2.1."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "### Scope of this guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "This document describes the software architecture and design for the implementation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "of SHOCO and is tailored for the developers, designers, and software testers of SHOCO."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "## 2. Overview of the SHOCO application"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "The overview of the main classes in the application are shown in the class diagram below."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Omitted are the classes for the features implemented, the \u003ccode\u003eLoadData\u003c/code\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "class, \u003ccode\u003eWriteData\u003c/code\u003e class, \u003ccode\u003eFileUtil\u003c/code\u003e class and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003ccode\u003eCommandLineTable\u003c/code\u003e class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![alt text](images/ClassDiagram_v2.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The \u003ccode\u003eDuke\u003c/code\u003e class manages all required resources in the execution of the application. These include"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "a \u003ccode\u003eShoppingList\u003c/code\u003e object to keep track of the \u003ccode\u003eItem\u003c/code\u003e objects the user has added to his list and"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "a \u003ccode\u003eBudget\u003c/code\u003e object to store the user\u0027s budget."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eDuke\u003c/code\u003e also has a \u003ccode\u003eStorage\u003c/code\u003e object for saving and loading data from the disk - this data is stored as JSON files"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "and consists of the latest saved \u003ccode\u003eShoppingList\u003c/code\u003e and \u003ccode\u003eBudget\u003c/code\u003e."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "There is a dependency from \u003ccode\u003eDuke\u003c/code\u003e to \u003ccode\u003eParser\u003c/code\u003e as it only creates an instance of the \u003ccode\u003eParser\u003c/code\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "every time user input is received by the \u003ccode\u003eUi\u003c/code\u003e and does not keep track of the \u003ccode\u003eParser\u003c/code\u003e which is deleted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "after it is done parsing the current user input. The \u003ccode\u003eParser\u003c/code\u003e determines what command is being invoked by the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "user before creating a new \u003ccode\u003eCommand\u003c/code\u003e object. It then returns the reference to the new \u003ccode\u003eCommand\u003c/code\u003e object "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "to \u003ccode\u003eDuke\u003c/code\u003e. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "At any point in time, \u003ccode\u003eDuke\u003c/code\u003e only stores up to one \u003ccode\u003eCommand\u003c/code\u003e and no more. This"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e has to be executed before \u003ccode\u003eDuke\u003c/code\u003e can receive more user input."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "This section will describe how the main features of the application are implemented."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### 3.1 View help feature"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### 3.1.1 Current implementation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The help feature is implemented using a \u003ccode\u003eHelpCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class. The \u003ccode\u003eHelpCommand\u003c/code\u003e class shows the program usage instructions to the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " The process is as follows:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e. If the user input fails to match any of the "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " correct command keywords (\u003ccode\u003eADD\u003c/code\u003e, \u003ccode\u003eEDIT\u003c/code\u003e, \u003ccode\u003eDEL\u003c/code\u003e etc.), or if the input matches the "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  \u003ccode\u003eHELP\u003c/code\u003e command keyword, a \u003ccode\u003eHelpCommand\u003c/code\u003e object will be instantiated."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 3. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eHelpCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 4. \u003ccode\u003eHelpCommand#execute()\u003c/code\u003e lists all the accepted command format SHOCO recognizes, their purpose and 1 or more examples"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "of usage."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The following sequence diagram below shows how the help feature works. Note, the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "![Help Feature](images/Help_v2.png)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### 3.1.2 Design considerations"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### Aspect: Data structure to support the help feature"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eHelpCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: Easy to add the help feature without having to change the logic of the code much as each command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  object is treated as a black box"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 2: Implement help feature in the \u003ccode\u003eDuke\u003c/code\u003e or \u003ccode\u003eParser\u003c/code\u003e class"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Reason for choosing alternative 1: By abstracting out different command types as separate classes, we could work better"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "in parallel and also be able to spot bugs more easily as each class deals with a different functionality"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author JLoh579 --\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "### 3.2 Display feature"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "This feature involves displaying the shopping list and budget details to the user."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "#### 3.2.1 Current implementation"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The display feature is implemented using a \u003ccode\u003eDisplayCommand\u003c/code\u003e class which extends the \u003ccode\u003eCommand\u003c/code\u003e "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "class. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eDisplayCommand\u003c/code\u003e object based"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "on that user input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eDisplayCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "4. \u003ccode\u003eDisplayCommand#execute()\u003c/code\u003e makes a call to \u003ccode\u003eShoppingList#getTotalCost()\u003c/code\u003e to find the cost of"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "the items."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "5. \u003ccode\u003eDisplayCommand#execute()\u003c/code\u003e then calls  \u003ccode\u003eBudget#getAmount()\u003c/code\u003e and"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003ccode\u003eBudget#getRemainingBudget()\u003c/code\u003e  to find the current budget and the remaining budget. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "6. The results are then printed to console."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The following sequence diagrams below show how the display feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "omitted to emphasise the other classes:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "![alt text](images/Display_v2.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "![alt text](images/Display_SD_v2.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "#### 3.2.2 Design considerations"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "##### Aspect: Data structure to support the display feature"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eDisplayCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Pros: Easy to add the display feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- Alternative 2: Implement display feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Cons: Handling the command under the \u003ccode\u003eDuke\u003c/code\u003e class results in longer methods. Thus, the code becomes "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  harder to navigate and understand. "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "Reason for choosing alternative 1: With each command type having its own class, we could work better in parallel and"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "also be able to trace functionality bugs more easily if each command class deals with its own functionality."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### 3.3 Set budget feature"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.3.1 Current implementation"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The set budget feature is implemented using a \u003ccode\u003eSetBudgetCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with a variable representing the budget amount."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eSetBudgetCommand\u003c/code\u003e object based on that user input."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eSetBudgetCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "4. \u003ccode\u003eSetBudgetCommand#execute()\u003c/code\u003e makes another call to \u003ccode\u003eBudget#setBudget()\u003c/code\u003e."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "5. The amount in the \u003ccode\u003eBudget\u003c/code\u003e object is set to the amount specified by the user."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The following sequence diagram below shows how the set budget feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](images/Set_v3.png)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.3.2 Design considerations"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Aspect: Data structure to support the set budget feature"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eSetBudgetCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Easy to add the set budget feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 2: Implement set budget feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Reason for choosing alternative 1: By implementing each command type in a separate class, any bugs associated with a"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "particular functionality will not affect other functionalities that significantly. It would also make it easier for us to "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "work in parallel."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003c!-- @@author jiajuinphoon --\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "### 3.4 Add feature"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "#### 3.4.1 Current implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " The add feature is implemented using an \u003ccode\u003eAddCommand\u003c/code\u003e class. This class extends from the main"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " \u003ccode\u003eCommand\u003c/code\u003e class. The user input **must contain at least a description** out of these parameters: "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " *description*, *price*, *quantity*. User can choose not to input price or quantity as the price will set to "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " default which is 0.0 if the user did not input any value for price. On the other hand, quantity will set to "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " default which is 1 if the user did not input any value for quantity. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " The process is as follows:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 1. \u003ccode\u003eDuke\u003c/code\u003e class receives user input from the \u003ccode\u003eUi\u003c/code\u003e class. "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 2. A \u003ccode\u003eParser\u003c/code\u003e object is created to call its \u003ccode\u003eparseCommand\u003c/code\u003e method."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * The \u003ccode\u003eParser\u003c/code\u003e object instantiates an \u003ccode\u003eAddCommand\u003c/code\u003e object based on the user input."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 3. The \u003ccode\u003eDuke\u003c/code\u003e class calls the \u003ccode\u003eAddCommand#execute()\u003c/code\u003e method of the \u003ccode\u003eAddCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 4. In the \u003ccode\u003eAddCommand#execute()\u003c/code\u003e method, the \u003ccode\u003eItem\u003c/code\u003e to be added is stored in the \u003ccode\u003eShoppingList\u003c/code\u003e "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    object, using \u003ccode\u003eShoppingList#add()\u003c/code\u003e method."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 5. In the sequence diagram, \u003ccode\u003eAddCommand\u003c/code\u003e will add \u003ccode\u003eItem\u003c/code\u003e if the description is provided. "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 6. The \u003ccode\u003eItem\u003c/code\u003e object is stored into the \u003ccode\u003eShoppingList\u003c/code\u003e object."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " The following sequence diagram below shows how the add feature works. The details of adding item\u0027s values"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " are shown in a separate sequence diagram below:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " ![alt text](images/Add_v2.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " ![alt text](images/Add_SD_v2.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "#### 3.4.2 Design considerations"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "##### Aspect: Data structure to support the add feature"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "- Alternative 1 (current choice): User must provided a description for item, duplicates are"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                  not allowed in the list. "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  - Pros: User has minimal potential to see unreasonable list in the Shopping List. For "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  example, having a item that has only price and quantity but without description and also"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  a list that one item is recorded multiple times in the list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  - Cons: Will significantly increase the code base as there is a need to check for the "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  presence of the variable in user input to avoid duplication, not user-friendly in certain "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  scenario (eg: user wants to have duplicates because the item is for different occasion and "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  the user wants to record down twice without any elaboration)."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "- Alternative 2: Require user to provide all three values to successfully add the item into "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                 the list. Duplicates are allowed"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  - Pros: User will have a neat and unity Shopping list, dealing less with parameter (because users are"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  forced to give all three variables). The duplicates item are useful in certain specific condition."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  - Cons: User flexibility will decrease, because user must input all parameters even if he/she does not want to "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  provide certain variables such as price and quantity, which will result unsuccessful adding items into the list. "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  Also, duplicate items may confuse the user, even though in some specific scenario, duplicate item may be useful to "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  the user.  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " Reasons for choosing Alternative 1: By allowing user to just add the item without price,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " we can increase the flexibility. For instance, the user wants to buy milk but not sure how much does the milk"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " cost and not sure how many milk they want to buy. So they can just add it into the list,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " and edit the price and quantity later when they knew the price and have decided the quantity. "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "***"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### 3.5 Edit feature"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### 3.5.1 Current implementation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The edit feature is implemented using an \u003ccode\u003eEditCommand\u003c/code\u003e class. This class extends from the main"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class. The \u003ccode\u003eItem\u003c/code\u003e object to be edited is identified by the index number provided "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "in the user input. In addition to the index number, the user input **must also contain at least one** of these parameters: "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "*description*, *price*, *quantity*. "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e class receives user input from the \u003ccode\u003eUi\u003c/code\u003e class. "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. A \u003ccode\u003eParser\u003c/code\u003e object is created."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e method to instantiate an \u003ccode\u003eEditCommand\u003c/code\u003e object based on the user input."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "4. \u003ccode\u003eDuke\u003c/code\u003e class calls the \u003ccode\u003eEditCommand#execute()\u003c/code\u003e method."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "5. In the \u003ccode\u003eEditCommand#execute()\u003c/code\u003e method, the \u003ccode\u003eItem\u003c/code\u003e object is retrieved through"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003ccode\u003eShoppingList#getItem()\u003c/code\u003e. The original description / price / quantity of the item is overwritten "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "with the new values from the user input through the use of the \u003ccode\u003eItem\u003c/code\u003e class setter methods."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "6. The \u003ccode\u003eItem\u003c/code\u003e object with its new values is stored back to the \u003ccode\u003eShoppingList\u003c/code\u003e object."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The following sequence diagram below shows how the edit feature works. The details of updating the values of an item"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "have been omitted from the diagram. Those details are shown in a separate sequence diagram."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "![Edit Feature](images/Edit_v2.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " The separate sequence diagram below shows how an item is updated with new values."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "![Edit Feature SD](images/Edit_SD_v2.png)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### 3.5.2 Design considerations"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### Aspect: Data structure to support the edit feature"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 1 (current choice): Only parameters present in user input are treated as values to update."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: User has the flexibility to choose which variables he/she wishes to update."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Might significantly increase the code base as there is a need to check for the "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    presence of the variable in user input."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 2: Require all values of an \u003ccode\u003eItem\u003c/code\u003e object to be updated and parameters must be in alphabetical"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "order."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: Will have less code to deal with having no additional parsing of the input string."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Less user flexibility; user must input all parameters even if he/she does not wish to update certain"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  variables."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Reason for choosing alternative 1: By allowing users to update any values they want, it provides them with greater convenience and freedom as they do not need to follow strict command \"rules/order\". Furthermore, having greater freedom on input values makes it a hassle-free process for the users."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### 3.6 Mark and Unmark feature"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "#### 3.6.1 Current Implementation"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " The mark and unmark feature is implemented using the \u003ccode\u003eMarkCommand\u003c/code\u003e and \u003ccode\u003eUnmarkCommand\u003c/code\u003e class"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " which extends the main \u003ccode\u003eCommand\u003c/code\u003e class with an index representing that of the item to be marked or"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " unmarked as bought in the list."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " The process is as follows:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " 1. \u003ccode\u003eDuke\u003c/code\u003e first receives user input from \u003ccode\u003eUi\u003c/code\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " 2. \u003ccode\u003eDuke\u003c/code\u003e creates a \u003ccode\u003eParser\u003c/code\u003e object and calls its"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " \u003ccode\u003eParser#parseCommand()\u003c/code\u003e method to instantiate a \u003ccode\u003eMarkCommand\u003c/code\u003e / \u003ccode\u003eUnmarkCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " object based on the user input"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " 3. \u003ccode\u003eDuke\u003c/code\u003e then calls the \u003ccode\u003eMarkCommand#execute()\u003c/code\u003e /"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " \u003ccode\u003eUnmarkCommand#execute()\u003c/code\u003e method. "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " 4. \u003ccode\u003eMarkCommand#execute()\u003c/code\u003e / \u003ccode\u003eUnmarkCommand#execute()\u003c/code\u003e makes a call to the"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " \u003ccode\u003eShoppingList#markAsBought()\u003c/code\u003e / \u003ccode\u003eShoppingList#unmarkAsBought()\u003c/code\u003e method with the"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " specified index."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " The following sequence diagram below shows how the Mark feature (Diagram 1) and Unmark feature (Diagram 2) works."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " Note the \u003ccode\u003eUi\u003c/code\u003e class is omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " Diagram 1:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![alt text](images/Mark_v2.png)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Diagram 2:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![alt text](images/Unmark_v2.png)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "#### 3.6.2 Design Considerations"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "##### Aspect: Data structure to support the Mark and Unmark Feature"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " - Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eMarkCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  and \u003ccode\u003eUnmarkCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   - Pros: Easy to edit and add the mark and unmark feature without having to change the logic of the code in"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    multiple files"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "- Alternative 2: Implement the mark and unmark feature in either the \u003ccode\u003eDuke\u003c/code\u003e or \u003ccode\u003eParser\u003c/code\u003e class"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    - Pros: Will have less code and classes to deal with, without having to create a whole new object to execute"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "      the command."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    - Cons: Code becomes harder to navigate and understand since the command is all handled under one class, thus makes"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    having to edit the mark and unmark feature difficult."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Reasons for choosing alternative 1: By having an individual class on it\u0027s own, any bugs found in the mark and unmark"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "feature can be found easier and therefore helps to resolve the issue more efficiently. Also, with the feature being"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "implemented in an object-oriented style, reading and tracing the application code would be easier, thus making adding"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "future features to the mark and unmark feature easier as well."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "***"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### 3.7 Find feature"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.7.1 Current implementation"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The find feature is implemented using a \u003ccode\u003eFindCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with a String representing the keyword specified by the user."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eFindCommand\u003c/code\u003e object based on"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "that user input."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eFindCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "4. \u003ccode\u003eFindCommand#execute()\u003c/code\u003e makes various calls to \u003ccode\u003eShoppingList#getItem()\u003c/code\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "to check whether the \u003ccode\u003eItem\u003c/code\u003e at each specified index contains the given keyword."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "5. Each \u003ccode\u003eItem\u003c/code\u003e that contains the keyword is then added to a new \u003ccode\u003eArrayList\u003c/code\u003e named"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " \u003ccode\u003efilteredItems\u003c/code\u003e that is maintained by the \u003ccode\u003eFindCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "6. This list of matching results is then printed to standard output."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The following sequence diagram below shows how the \u003ccode\u003eDuke\u003c/code\u003e object creates the \u003ccode\u003eFindCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Note the \u003ccode\u003eUi\u003c/code\u003e class is omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](images/Find_v3.png)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "This next sequence diagram will show how the \u003ccode\u003eFindCommand\u003c/code\u003e creates the \u003ccode\u003efilteredItems\u003c/code\u003e list:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](images/Find_SD_v3.png)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.7.2 Design considerations"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Aspect: Data structure to support the find feature"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eFindCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Easy to add the find feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 2: Implement find feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Reason for choosing alternative 1: With each command type having its own class, we could work better in parallel and"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "also be able to trace functionality bugs more easily if each command class deals with a different functionality."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### 3.8 Delete feature"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.8.1 Current implementation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The delete feature is implemented using a \u003ccode\u003eDeleteCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with an index representing that of the item to be deleted from the shopping"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "list. "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eDeleteCommand\u003c/code\u003e object based"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "on that user input."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eDeleteCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "4. \u003ccode\u003eDeleteCommand#execute()\u003c/code\u003e makes another call to \u003ccode\u003eShoppingList#deleteItem()\u003c/code\u003e."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "5. The \u003ccode\u003eItem\u003c/code\u003e at the specified index is then removed from the \u003ccode\u003eShoppingList\u003c/code\u003e object."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The following sequence diagram below shows how the delete feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](images/Delete_v3.png)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.8.2 Design considerations"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Aspect: Data structure to support the delete feature"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eDeleteCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Easy to add the delete feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 2: Implement delete feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Reason for choosing alternative 1: By abstracting out different command types as separate classes, this allowed us"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "to work better in parallel and also be able to spot bugs more easily as each class deals with a different functionality."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author JLoh579 --\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "### 3.9 Clear list feature"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "This feature involves clearing all items in the shopping list."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "#### 3.9.1 Current implementation"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The clear list feature is implemented using a \u003ccode\u003eClearCommand\u003c/code\u003e class which extends the \u003ccode\u003eCommand\u003c/code\u003e "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "class. "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eClearCommand\u003c/code\u003e object based on that user input."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eClearCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "4. \u003ccode\u003eClearCommand#execute()\u003c/code\u003e makes a call to \u003ccode\u003eShoppingList#clearList()\u003c/code\u003e."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The following sequence diagram below shows how the clear list feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "omitted to emphasise the other classes:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "![alt text](images/Clear_v2.png)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "#### 3.9.2 Design considerations"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "##### Aspect: Data structure to support the clear list feature"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eClearCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Pros: Easy to add the clear list feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   is treated as a black box"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- Alternative 2: Implement clear list feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   - Cons: Handling the command under the \u003ccode\u003eDuke\u003c/code\u003e class results in longer methods. Thus, the code becomes "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   harder to navigate and understand. "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "Reason for choosing alternative 1: With each command type having its own class, we could work better in parallel and"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "also be able to trace functionality bugs more easily if each command class deals with a different functionality."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e "
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### 3.10 Reset budget feature"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "#### 3.10.1 Current implementation"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "The reset budget feature is implemented using a \u003ccode\u003eResetBudgetCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with a variable representing the budget amount."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e first receives user input from the \u003ccode\u003eUi\u003c/code\u003e class."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e creates a \u003ccode\u003eParser\u003c/code\u003e object and calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e method to"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "instantiate a \u003ccode\u003eResetBudgetCommand\u003c/code\u003e object based on that user input."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls the \u003ccode\u003eResetBudget#execute()\u003c/code\u003e method."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "4. \u003ccode\u003eResetBudget#execute()\u003c/code\u003e makes a call to the \u003ccode\u003eBudget#resetBudget()\u003c/code\u003e method to set the"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "existing budget to $0.00."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "The following sequence diagram below shows how the reset budget feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![alt text](images/Res_v2.png)"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "#### 3.10.2 Design considerations"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "##### Aspect: Data structure to support the reset budget feature"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eResetBudgetCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " "
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  - Pros: Easy to add the reset budget feature without having to change the logic of the code much as each command"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  object is treated as a black box."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "- Alternative 2: Implement reset budget feature in the \u003ccode\u003eDuke\u003c/code\u003e or \u003ccode\u003eParser\u003c/code\u003e class."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Reason for choosing alternative 1: By implementing each command type in a separate class, any bugs associated with a "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "particular functionality will not affect other functionalities that significantly. It would also make it easier for us"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "to work in parallel."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "***"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### 3.11 Exit program feature"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### 3.11.1 Current implementation"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The program termination feature is implemented using an \u003ccode\u003eExitCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class. The \u003ccode\u003eExitCommand\u003c/code\u003e class terminates the program when instantiated."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e class receives user input from the \u003ccode\u003eUi\u003c/code\u003e class."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eExitCommand\u003c/code\u003e object based on that user input. "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls the \u003ccode\u003eExitCommand#execute()\u003c/code\u003e method of the "
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "4. The program is terminated."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The following sequence diagram below shows how the exit feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "![alt text](images/Exit_v2.png)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### 3.11.2 Design considerations"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### Aspect: Data structure to support the exit feature"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eExitCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: Easy to add the exit feature without having to change much of the code logic as each command"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  object is treated as a black box"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 2: Implement exit feature in the \u003ccode\u003eDuke\u003c/code\u003e or \u003ccode\u003eParser\u003c/code\u003e class"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Reason for choosing alternative 1: By abstracting out different command types as separate classes, we could work"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "better in parallel and also be able to spot bugs more easily as each class deals with a different functionality"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Appendix A: Product Scope"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "This section talks about who this product is specially designed for and what it aims to achieve."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Likes to cook at home and requires help keeping track of complex grocery shopping lists and"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "staying within budget"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Prefers to use command line interface applications as opposed to other kinds of applications or"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "paper"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Can type fast"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Make grocery shopping a breeze by offering greater flexibility in managing"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "shopping lists and also providing helpful features like budget tracking"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "This section contains the user stories for the different versions of our product."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "|v1.0|organised home cook|be able to add items to the list|manage the list better|"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v1.0|organised home cook|be able to edit my budget|change my budget when I need to|"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v1.0|organised home cook|delete items from the list|manage my list|"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "|v1.0|organised home cook|have a useful \"help\" list that I can refer to|find instructions for various commands|"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v1.0|frugal home cook|add a budget|so that I know how much I have to spend| "
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "|v1.0|organised home cook|mark things as bought|keep track of my grocery progress|"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "|v1.0|frugal home cook|be able to clear my budget|set a new budget|"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "|v1.0|frugal home cook|be able to see the total value of the items in my shopping list|know that I am within budget|"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "|v1.0|frugal home cook|see the remaining budget that I have left|avoid exceeding my budget|"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "|v1.0|practical home cook|be able to clear all items from the list with one command|easily start off with a clean slate|"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "|v1.0|practical home cook|see all items on my list|see at a glance what I have planned to buy|"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "|v1.0|frugal home cook|see my budget|know if I\u0027m within or out of my budget|"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "|v1.0|frugal home cook|calculate my remaining budget|see how much I have left to spend|"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v2.0|frugal home cook|be notified when I cross my budget|remove some items from my list|"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "|v2.0|practical home cook|be able to search for items on my list|find things easily in a long list|"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "|v2.0|practical home cook|be able to edit the items in my lists|keep my shopping list up to date|"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "|v2.0|organised home cook|save my list|have a local copy of my list|"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "|v2.0|organised home cook|load my saved list|add on to my existing list|"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "|v2.0|frugal home cook|see the remaining budget update based on the quantity of items|see how much I spend based on how much I buy|"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. Should work on any OS that has Java 11 or later installed."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. Should respond to any user commands within 2 seconds."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. Should be easy to use even for people who have never used a command line interface before."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica--\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "## Appendix D: Instructions for Manual Testing"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003e :information_source: Note: These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing. "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Launch and Shutdown"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. Initial launch "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      i.    Download the [latest](https://github.com/AY1920S2-CS2113T-T13-1/tp/releases) version of `SHOCO`, named \u003ccode\u003eCS2113T-T13-1.Shoco.jar\u003c/code\u003e under version 2.1."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      ii.   Copy it into an empty folder on your desktop."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      iii.  While inside the empty folder, open a command prompt window by typing \u003ccode\u003eCMD\u003c/code\u003e in the address bar of the folder."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      iv.   Run the following command in the command prompt window: `java -jar CS2113T-T13-1.Shoco.jar`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      "
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      \u003e :bulb: Tip: If the font size of the terminal is too big, you can decrease it by \u003ccode\u003eCTRL + scroll down\u003c/code\u003e on your mouse."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Shows a welcome message from SHOCO."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      i.    Enter the command \u003ccode\u003eBYE\u003c/code\u003e to exit the SHOCO application."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The program is terminated."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Set and Reset a budget"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. Set a budget"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eSET b/500.00\u003c/code\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       Expected: Budget is set to $500.00"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eSET b/10000\u003c/code\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Budget is set to $5000.00, which is the maximum budget SHOCO allows."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iii. Test case: \u003ccode\u003eSET b/-100\u003c/code\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Budget is reset to $0.00, which is the minimum budget SHOCO allows."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iv. Other incorrect set budget commands to try: \u003ccode\u003eSET b/xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the SET command is shown."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Reset the budget"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eRES\u003c/code\u003e "
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Budget has been reset to $0.00"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Other incorrect reset budget commands to try: \u003ccode\u003eRES xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                     "
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the RES command is shown."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Add and Edit an item"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. Add an item "
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    \u003e:bulb: Tip: Before adding an item, you can run the \u003ccode\u003eDISPLAY\u003c/code\u003e command to prevent entering a duplicate description"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003e ADD i/apple p/3.00 q/2 \u003c/code\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       Expected: An item with the description - \"apple\", price - \"$3.00\" and quantity - \"2\"  is added."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u003e :bulb: Tip: You can run the \u003ccode\u003eDISPLAY\u003c/code\u003e command to check the newly added item."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                                           "
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eADD p/3.00\u003c/code\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: No item is added. Error message and a correct usage of the ADD command is shown."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iii. Other incorrect ADD commands to try: \u003ccode\u003eADD\u003c/code\u003e, \u003ccode\u003eADD p/xxx\u003c/code\u003e, \u003ccode\u003eADD q/xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Similar to previous. "
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Edit an item"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    \u003e :bulb: Tip: You can run the \u003ccode\u003eDISPLAY\u003c/code\u003e command to check if the item has been correctly updated."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      "
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    *Assumption: Valid index and description is provided. (No duplicate description allowed)*"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eEDIT 1 i/banana\u003c/code\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The description of the first item is updated to \"banana\". "
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eEDIT 1 p/5.60\u003c/code\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The price of the first item is updated to \"$5.60\". "
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iii. Test case: \u003ccode\u003eEDIT 1 q/3\u003c/code\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The quantity of the first item is updated to \"3\". "
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iv. Other incorrect edit commands to try: \u003ccode\u003eEDIT p/xxx\u003c/code\u003e , \u003ccode\u003eEDIT q/xxx\u003c/code\u003e. (where xxx is not a number)."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                "
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the EDIT command is shown."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e    "
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### Mark and Un-mark an item"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "1. Marking an item"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    *Assumption: there are more than 5 but less than a hundred items in the list.*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "          "
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   i. Test case: \u003ccode\u003eMARK 5\u003c/code\u003e    "
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: The fifth item in the list is mark as bought, denoted as [B]."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   ii. Test case: \u003ccode\u003eMARK -10\u003c/code\u003e "
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        "
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: An error message stating that the item does not exist in the list is shown."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   iii. Test case: \u003ccode\u003eMARK 100\u003c/code\u003e "
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: An error message stating that the item does not exist in the list is shown."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   iv. Other incorrect MARK commands to try: \u003ccode\u003eMARK xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "         Expected: An error message stating to provide a single numerical index number is shown."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "2. Un-marking an item"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   *Assumption: there are more than 5 and less than a hundred items in the list.*"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "       "
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   i. Test case: \u003ccode\u003eUNMARK 5\u003c/code\u003e "
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "         Expected: The fifth item in the list is marked as not bought yet, denoted as [X]."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   ii. Test case: \u003ccode\u003eUNMARK -10\u003c/code\u003e "
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "       Expected: An error message stating that the item does not exist in the list is shown."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   iii. Test case: \u003ccode\u003eUNMARK 100\u003c/code\u003e "
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "       Expected: An error message stating that the item does not exist in the list is shown."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   iv. Other incorrect UNMARK commands to try: \u003ccode\u003eUNMARK xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: An error message stating to provide a single numerical index number is shown."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "         "
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "***"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica--\u003e  "
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Find and Delete an item"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. Find an item based on keyword"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eFIND apple\u003c/code\u003e "
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       Expected: A list of items that contains \"apple\" in their description is displayed."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eFIND xxx\u003c/code\u003e (where xxx is a keyword that is unmatched)"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the FIND command is shown."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Delete an item"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u003e :bulb: Tip: You can run the \u003ccode\u003eDISPLAY\u003c/code\u003e command to check the index of an item."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eDEL 1\u003c/code\u003e "
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       Expected: The first item (if it exists), is deleted."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eDEL xxx\u003c/code\u003e (where xxx is a not a number / the item does not exist yet)"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the DEL command is shown."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Display and Clear the shopping list"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. List all items in the shopping list"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     i. Test case: \u003ccode\u003eDISPLAY\u003c/code\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: A list of all the items and the current budget amount is displayed."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                                                            "
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      \u0026nbsp;"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Clear all items in the shopping list"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     i. Test case: \u003ccode\u003eCLEAR\u003c/code\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The shopping list is cleared."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                                                            "
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      \u0026nbsp;"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---developer-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 141,
      "kokjoon97": 207,
      "Shannonwje": 203,
      "jiajuinphoon": 66,
      "-": 9,
      "trishaangelica": 414
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "# SHOCO"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SHOCO is a command-line interface (CLI) application that allows users to "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "manage and plan their shopping lists and budget. If you are a fast typer, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "you will find SHOCO to be even more effective than applications with graphical "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "user interfaces."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "trishaangelica": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "# SHOCO v2.1 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "By: `Team SHOCOTech`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Since: `Feb 2020`"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Creators: `Tan Kok Joon`, `Labi Trisha Angelica Vergara`, `Loh Ching Wei, Joshua`, `Phoon Jia Juin`, `Wong Jin En, Shannon`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[Introduction](#introduction)**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[Quick Start](#quick-start)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[Features](#features)**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Viewing help: `HELP`](#viewing-help-help)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Displaying list and budget details: `DISPLAY`](#displaying-list-and-budget-details-display)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Setting a budget: `SET`](#setting-a-budget-set)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Adding an item: `ADD`](#adding-an-item-add)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Editing an item: `EDIT`](#editing-an-item-edit)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Marking an item as bought: `MARK`](#marking-an-item-as-bought-mark)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Un-marking a marked item: `UNMARK`](#un-marking-a-marked-item-unmark)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Finding an item: `FIND`](#finding-an-item-find)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Deleting an item: `DEL`](#deleting-an-item-del)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Clearing the list: `CLEAR`](#clearing-the-list-clear)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Resetting a budget: `RES`](#resetting-a-budget-res)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [Exiting the Program: `BYE`](#exiting-the-program-bye)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[Additional information](#additional-information)**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[FAQ](#faq)**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[Command Summary](#command-summary)**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Have you ever encountered the problem of having to make multiple trips to the supermarket"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "because you forgot to get something important? Have you ever gone to the supermarket just to realise"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "you do not have enough cash on you?"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "If these problems sound familiar to you, fret not! With SHOCO, such troubles are now a thing of the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "past."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "SHOCO is a command-line interface (CLI) application that allows you to "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "manage and plan your shopping list and budget. With better organisation and also a"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "budget tracker, we are here to enhance your grocery-shopping experience and make the woes of"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "grocery shopping disappear."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. Ensure that you have Java 11 or above installed. Otherwise download it from"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "[here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. Download the latest version of `SHOCO` from [here](https://github.com/AY1920S2-CS2113T-T13-1/tp/releases), named `CS2113T-T13-1.Shoco.jar` under version 2.1."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. Copy the JAR file into an empty folder"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "4. Open the command prompt in the empty folder and type in the following command:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "   `java -jar CS2113T-T13-1.Shoco.jar`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "5. You are now all set to plan your shopping list!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Command Format"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* Please note the words in UPPER_CASE are the parameters that you can supply "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * e.g. in `ADD i/DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `ADD i/apple`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* Items in square brackets are *optional* and you can omit them. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * e.g `EDIT 1 [i/DESCRIPTION] [p/PRICE] [q/QUANTITY]` can be used as `EDIT 1 i/apple p/4.00` or as `EDIT 1 i/apple`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* All command words are case-sensitive and you should always use uppercase."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  * e.g `ADD` in `ADD i/DESCRIPTION` consists of only uppercase letters."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* You can supply parameters for the `ADD` and `EDIT` command, namely `DESCRIPTION`, `QUANTITY` and `PRICE`, in any order."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  * e.g `ADD i/apple q/5` **AND** `ADD q/5 i/apple` should both produce the same result."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The keyword for the `FIND` command is case-insensitive."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  * e.g If you have an item named \"apple\" in the list, both `FIND APPLE` **AND** `FIND apple` will display this"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  entry to the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Viewing help: `HELP`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Shows the available commands, their purpose and how they are to be used."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Format: `HELP`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author JLoh579 --\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "### Displaying list and budget details: `DISPLAY`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "Shows the shopping list, budget, cost of the items and the remaining budget."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "Format: `DISPLAY` "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Setting a budget: `SET`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Sets a budget for the user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Format: `SET b/AMOUNT`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `AMOUNT` can be any decimal number that is between 0 to 5000."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `b/` phrase should be present in the command.  "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "`SET b/3.00`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003c!-- @@author jiajuinphoon --\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "### Adding an item: `ADD`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "Adds an item to the shopping list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "Format: `ADD i/DESCRIPTION [p/PRICE] [q/QUANTITY]`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* The `DESCRIPTION` must exist."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* The `[QUANTITY]` must be a **positive whole number**. *e.g 1, 2, 3 ..*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* The `[PRICE]` must be in **positive numerical** form (decimal form accepted)."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* `[PRICE]` and `[QUANTITY]` are optional values, user can choose to provide the "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  respective values or omit them. The system will set the price and quantity to "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  the default values `0.0` and `1` if omitted."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003e :information_source: Note: You can rearrange the delimiters i/, p/ , q/ in \u003cem\u003eany\u003c/em\u003e order. e.g `i/.. p/.. q/..` or `q/.. i/.. p/..`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "1. `ADD i/potato p/5.00 q/3` **OR** `ADD p/5.00 q/3 i/potato`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Add the description, price and quantity of this item in the shopping list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "2. `ADD i/potato chips p/5.00`  **OR**  `ADD i/potato chips q/2` **OR** `ADD p/5.00 i/potato chips` "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "   **OR** `ADD q/5 i/potato chips`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Add the description and price /  description and quantity /  of the item in the shopping list"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "3. `ADD i/potato chips` "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Add only description of the item in the shopping list"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e \u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "***"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Editing an item: `EDIT`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Edits the specified item in the shopping list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Format: `EDIT INDEX [i/DESCRIPTION] [p/PRICE] [q/QUANTITY]`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Edits the item at the specified `INDEX`. The `INDEX` refers to the index number "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "shown in the displayed shopping list. "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* You can view an item\u0027s `INDEX` number by using the `DISPLAY` command. More info [here](#displaying-list-and-budget-details-display)."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* The `INDEX` and `[QUANTITY]` must be a **positive whole number**. *e.g 1, 2, 3 ..*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* The `INDEX` should not be out of bounds of the shopping list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * Out of bounds indices include negative indices \u0026 indices that are greater than the size of the shopping list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Indices that are not numbers or are out of bounds will produce an error message indicating the error of the index."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* The `[PRICE]` must be in **positive numerical** form (decimal form accepted)."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **At least one** of the three parameters (description/price/quantity) must be present in the command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003e :information_source: Note: You can rearrange the delimiters i/, p/ , q/ in \u003cem\u003eany\u003c/em\u003e order. e.g `i/.. p/.. q/..` or `q/.. i/.. p/..`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. `EDIT 3 i/potato p/5.00 q/3`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Edits the description, price and quantity of the 3rd item in the shopping list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. `EDIT 3 i/potato chips p/5.00`  **OR**  `EDIT 3 i/potato chips q/2`  **OR**  `EDIT 3 p/5.00 q/2`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Edits the description and price /  description and quantity /  price and quantity of the "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    3rd item in the shopping list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "3. `EDIT 3 i/potato chips` **OR** `EDIT 3 p/5.00` **OR** `EDIT 3 q/2`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Edits only description / only price / only quantity of the 3rd item in the shopping list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### Marking an item as bought: `MARK`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Marks an item from the list at the specified index as bought."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "When first added initially, the item will have the status `[X]` "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "to indicate that it is un-marked. After marking the item as bought, "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "the status of item becomes `[B]`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Format: `MARK INDEX`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* The `INDEX` should be a **positive whole number**."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* The `INDEX` should not be out of bounds of the shopping list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  * Out of bounds indices include negative indices \u0026 indices that are greater than the size of the shopping list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* Indices that are not numbers or are out of bounds will produce an error message indicating the error of the index."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* Marking an item whose status was previously `[B]` will be successful, assuring the success of the mark command executed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Example of the usage: "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "1. `MARK 5`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   * This marks the 5th item in your list as bought."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   * The status of the 5th item is now `[B]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "***"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### Un-marking a marked item: `UNMARK`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Un-marks a marked-as-bought item from the list at the specified index."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "After being marked as bought, the item will have the status `[B]`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "to indicate that it is marked as bought. After un-marking the marked-as-bought"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "item, the status of the item becomes `[X]`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Format: `UNMARK INDEX`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* The `INDEX` should be a **positive whole number**."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* The `INDEX` should not be out of bounds of the shopping list."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  * Out of bounds indices include negative indices \u0026 indices that are greater than the size of the shopping list."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* Indices that are not numbers or are out of bounds will produce an error message indicating the error of the index."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* Un-marking an item whose status was previously `[X]` will be successful, assuring the success of the un-mark command executed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Example of the usage:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "1. `UNMARK 3`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   * This marks the 3rd item in your list as not bought yet."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   * The status of the 3rd item is now `[X]`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "***"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Finding an item: `FIND`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Filters the shopping list according to a keyword specified by the user."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Format: `FIND KEYWORD`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `KEYWORD` can be any word or phrase."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `KEYWORD` field should not be left empty.  "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "`FIND apple`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Deleting an item: `DEL`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Removes an item from the list at the specified index."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Format: `DEL INDEX`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `INDEX` should be a **positive whole number**."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `INDEX` should not be out of bounds of the shopping list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  * Out of bounds indices include negative indices \u0026 indices that are greater than the size of the shopping list."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* Indices that are not numbers or are out of bounds will produce an error message indicating the error of the index."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "`DEL 3`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author JLoh579 --\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "### Clearing the list: `CLEAR`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "Clears all items in the shopping list."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "Format: `CLEAR`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### Resetting a budget: `RES`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Resets the budget to be $0.00 for the user."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Format: `RES`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "***"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Exiting the program: `BYE`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Format: `BYE`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "***"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Additional information"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### 1. Loading and saving your shopping list"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "All your shopping list and budget data are saved to JSON files after you"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "exit the application. This data is also retrieved from the same JSON files the next time you boot up"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Shoco. No further action is required from you as this is an automatic process."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### 2. Automated budget tracker"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "When the total cost of the items in your shopping list exceeds the stored budget amount, a message will be"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "displayed which states by how much you have overrun your current budget. This message will only"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "stop appearing when you increase your budget amount sufficiently or remove enough items from your list to keep within"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "your budget."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "**A**: Simply transfer the JSON files that contain your SHOCO data onto the new computer and place them in the"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "folder that contains the SHOCO app. If the folder already has the JSON files, replace them."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author kokjoon97 --\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "**Q**: Is it possible to restore a list that I have deleted?"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "**A**: Unfortunately, we are still working on this feature and there is no such functionality at this"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "point in time. It is however, possible to manually backup the `shoppinglist.json` file"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "from time to time so that if you unintentionally cleared your list, you can always replace the empty"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "`shoppinglist.json` file with your backed up version."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "***"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* View help `HELP`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Display list and budget details `DISPLAY`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Set budget `SET b/AMOUNT`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Add item `ADD i/DESCRIPTION [p/PRICE] [q/QUANTITY]`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Edit item `EDIT INDEX [i/DESCRIPTION] [p/PRICE] [q/QUANTITY]`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Mark item `MARK INDEX`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Un-mark item `UNMARK INDEX`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Find item `FIND KEYWORD`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Delete item `DEL INDEX`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Clear list `CLEAR`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Reset budget `RES`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Exit program `BYE`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 38,
      "kokjoon97": 156,
      "Shannonwje": 77,
      "jiajuinphoon": 33,
      "-": 11,
      "trishaangelica": 115
    }
  },
  {
    "path": "docs/team/jiajuinphoon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003c!-- @@author jiajuinphoon --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "# JiaJuinPhoon - Project Portfolio"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "# PROJECT: SHOCO "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "SHOCO is a desktop application used for the managing and planning of shopping lists and budget. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "Users interact with it through the use of a command-line interface (CLI) and the program is written in Java."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* **Major enhancement:** Included the **ability to add items** in the shopping lists."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * What it does: Allows the user to add values of the items in the shopping list. Such values are the description, price and quantity of the item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Justification: This feature allows the user to immediately add any items into the list.  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Highlights: This features allows the user to add any value. The add command does not require any order in it\u0027s input (e.g alphabetical ordering of delimiters)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* **Minor enhancement:** Negative values entered for price and quantity are not accepted. Also, quantity does not accept values with pointer. This is for a realistic approach as items will never have negative prices and/or quantities in real life. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* **Code contributed:** [[Functional code]](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003djiajuinphoon\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djiajuinphoon\u0026tabRepo\u003dAY1920S2-CS2113T-T13-1%2Ftp%5Bmaster%5D)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* **Other contributions:** "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Project Management:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        * Finish assigned bugs and PRs by the team member as soon as possible to increase the efficiency for them to implemen other feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Enhancements to existing features:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        * Fixed the error in the Logger \u003cins\u003e[#82](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/82/files)\u003c/ins\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Documentation:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        * Wrote the Development Guide for Add Function: \u003cins\u003e[#116](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/116/files)\u003c/ins\u003e "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        * Wrote the User Guide for Add Function: \u003cins\u003e[#116](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/116/files)\u003c/ins\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "   "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        * Fixed the bug in the reposense when the system did not distribute the parts properly (Eg: User A wrote a part for Development Guide but did not detect by the system.) \u003cins\u003e[#130](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/130/files)\u003c/ins\u003e "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "       "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "### Contributions to the User Guide"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003e *Below are sections that I have contributed to the User Guide. They showcase my ability to write documentation targeting end-users.*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "### Adding an item: `ADD`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "Add the specified item in the shopping list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "Format: `ADD i/DESCRIPTION [p/PRICE] [q/QUANTITY]`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* The `DESCRIPTION` must exist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* The `[QUANTITY]` must be a **positive integer**. *e.g 1, 2, 3 ..*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* The `[PRICE]` must be in **numerical** form (decimal form accepted)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* `[PRICE]` and `[QUANTITY]` are optional values, user can choose to provide the "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  respective values or omit them. The system will set the price and quantity to "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  the default values `0.0` and `1` "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "* note that you can rearrange the delimiters (more will shown in the example.)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "1. `ADD i/potato p/5.00 q/3` **OR** `ADD p/5.00 q/3 i/potato`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Add the description, price and quantity of this item in the shopping list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "2. `ADD i/potato chips p/5.00`  **OR**  `ADD i/potato chips q/2` **OR** `ADD p/5.00 i/potato chips` "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "   **OR** `ADD q/5 i/potato chips`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Add the description and price /  description and quantity /  of the item in the shopping list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "3. `ADD i/potato chips` "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    * Add only description of the item in the shopping list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003e *Below are sections that I have contributed to the User Guide. They showcase my ability to write documentation targeting end-users.*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "### 3.1 Add feature"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "#### 3.1.1 Current implementation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " The add feature is implemented using an \u003ccode\u003eAddCommand\u003c/code\u003e class. This class extends from the main"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " \u003ccode\u003eCommand\u003c/code\u003e class. The user input **must contain at least a description** out of these parameters: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " *description*, *price*, *quantity*. User can choose not to input price or quantity as the price will set to "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " default which is 0.0 if the user did not input any value for price. On the other hand, quantity will set to "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " default which is 1 if the user did not input any value for quantity. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " Process of object creation:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 1. \u003ccode\u003eDuke\u003c/code\u003e class receives user input from the \u003ccode\u003eUi\u003c/code\u003e class. "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 2. A \u003ccode\u003eParser\u003c/code\u003e object is created to call its \u003ccode\u003eparseCommand\u003c/code\u003e method."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * The \u003ccode\u003eParser\u003c/code\u003e object instantiates an \u003ccode\u003eAddCommand\u003c/code\u003e object based on the user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 3. The \u003ccode\u003eDuke\u003c/code\u003e class calls the \u003ccode\u003eAddCommand#execute\u003c/code\u003e method of the \u003ccode\u003eAddCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 4. In the \u003ccode\u003eAddCommand#execute\u003c/code\u003e function, the \u003ccode\u003eitem\u003c/code\u003e to be add is called from the \u003ccode\u003eShoppingList\u003c/code\u003e "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    object, using items.add()."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 5. In the SD, the AddCommand will add \u003ccode\u003eitem\u003c/code\u003e if the description is provided and one / both price and "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    quantity is provided. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " 6. The \u003ccode\u003eitem\u003c/code\u003e object with its\u0027 values is stored into the \u003ccode\u003eShoppingList\u003c/code\u003e object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " The following sequence diagram below shows how the add feature works. The details of the adding item\u0027s values"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " are shown in a separate sequence diagram below:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " ![alt text](../images/Add_v1.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " ![alt text](../images/Add_SD_v1.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "#### 3.1.2 Design considerations"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "##### Aspect: Data structure to support the add feature"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "- Alternative 1 (current choice): User must provided a description for item, Duplicates are"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                  not allowed in the list. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  - Pros: User has minimal potential to see unreasonable list in the Shopping List. For "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  example, having a item that has only price and quantity but without description and also"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  a list that one item is recorded multiple times in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  - Cons: Will significantly increase the code base as there is a need to check for the "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  presence of the variable in user input to avoid duplication, not human friendly in certain "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  scenario (eg: user wants to have duplicates because the item is for different occasion and "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  the user wants to record down twice without any elaboration)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "- Alternative 2: Require user to provide all three values to successfully add the item into "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                 the list. Duplicates are allowed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  - Pros: User will have a neat and unity Shopping list, less deal with parameter (because users are"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  forced to give all three variables). And the duplicates item are useful in certain specific condition."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  - Cons: User flexibility will decrease, because user must input all parameters even if he/she does not want to "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  provide certain variables such as price and quantity, which will result unsuccessful adding items into the list. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  Also, duplicate items may confused the user, even though in some specific scenario, duplicate item may be useful to "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "  the user.  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " Reasons for choosing Alternative 1 over alternative 2: By allowing user to just add the item without price,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " we can increase the flexibility. For instance, the user wants to buy milk but not sure how much does the milk"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " cost and not sure how many milk they want to buy. So they can just add it into the list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": " and edit the price and quantity later when they knew the price and have decided the quantity. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "\u003c!-- @@author --\u003e"
      }
    ],
    "authorContributionMap": {
      "jiajuinphoon": 136
    }
  },
  {
    "path": "docs/team/jloh579.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author JLoh579 --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "# Loh Ching Wei, Joshua - Project Portfolio "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "## PROJECT: SHOCO"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "SHOCO is a Command Line Interface (CLI) application which allows users to manage their shopping lists and "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "budget information. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "It is written in Java and has about 5 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- **Major enhancements:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    - Added the ability to provide an overview of list and budget details "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - What it does: Shows the shopping list and its associated information, including price, quantity, total cost "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        and remaining budget, to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Justification: This allows the user to see the current state of the information that he/she has added. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        This helps the user make decisions easily, and is vital to the app\u0027s functioning."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Highlights: Consideration was needed to ensure the details are shown in a clear and intuitive way."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    - Added store and load functionality"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - What it does: Stores changes to disk and loads the saved data upon start-up."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Justification: This allows the app to be useful even after closing and re-opening. Without this, all work"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        is lost upon closing the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Highlights: I had to spend some time learning how to use GSON to implement this enhancement as I was new to it. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Credits: As mentioned, this enhancement uses the open-source library GSON."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        I learned it quickly with the help of Chua Zong Wei, a friend who had done this module last semester. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- **Minor enhancement:**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    - Added the ability to clear the shopping list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Justification: Gives the user a quick way to start afresh."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- **Code contributed:** [[Code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djloh579\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- **Other contributions:**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    - Team-based tasks:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Made pull request for our team\u0027s repo ([#15](https://github.com/nus-cs2113-AY1920S2/tp/pull/15))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Managed release of v2.0 and v2.1 on GitHub ([Releases](https://github.com/AY1920S2-CS2113T-T13-1/tp/releases))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Simplified code for exiting the program, and for returning results of commands (Pull request [#73](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/73))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    - Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Added sections for display and clear command in the User Guide and Developer Guide (Pull request [#120](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/120))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Refine documentation by ensuring consistent spacing between sections, re-ordering sections so they flow "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        better, etc. (Pull request [#215](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/215))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    - Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Pull requests reviewed (with some review comments): [#35](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/35), [#70](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/70),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        [#121](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/121)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        - Reported bugs for another team in the class (Issues [#1 - #13](https://github.com/JLoh579/ped/issues))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003e *Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "documentation and the technical depth of my contributions to the project.*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "### 3.2 Display feature"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "This feature involves displaying the shopping list and budget details to the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "#### 3.2.1 Current implementation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The display feature is implemented using a \u003ccode\u003eDisplayCommand\u003c/code\u003e class which extends the \u003ccode\u003eCommand\u003c/code\u003e "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "class. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eDisplayCommand\u003c/code\u003e object based"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "on that user input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eDisplayCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "4. \u003ccode\u003eDisplayCommand#execute()\u003c/code\u003e makes a call to \u003ccode\u003eShoppingList#getTotalCost()\u003c/code\u003e to find the cost of"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "the items."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "5. \u003ccode\u003eDisplayCommand#execute()\u003c/code\u003e then calls  \u003ccode\u003eBudget#getAmount()\u003c/code\u003e and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003ccode\u003eBudget#getRemainingBudget()\u003c/code\u003e  to find the current budget and the remaining budget. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "6. The results are then printed to console."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The following sequence diagrams below show how the display feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "omitted to emphasise the other classes:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "![alt text](../images/Display_v1.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "![alt text](../images/Display_SD_v1.png)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "#### 3.2.2 Design considerations"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "##### Aspect: Data structure to support the display feature"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eDisplayCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Pros: Easy to add the display feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- Alternative 2: Implement display feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Cons: Handling the command under the \u003ccode\u003eDuke\u003c/code\u003e class results in longer methods. Thus, the code becomes "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  harder to navigate and understand. "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "Reason for choosing alternative 1: With each command type having its own class, we could work better in parallel and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "also be able to trace functionality bugs more easily if each command class deals with its own functionality."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "***"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "### 3.9 Clear list feature"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "This feature involves clearing all items in the shopping list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "#### 3.9.1 Current implementation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The clear list feature is implemented using a \u003ccode\u003eClearCommand\u003c/code\u003e class which extends the \u003ccode\u003eCommand\u003c/code\u003e "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "class. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eClearCommand\u003c/code\u003e object based on that user input."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eClearCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "4. \u003ccode\u003eClearCommand#execute()\u003c/code\u003e makes a call to \u003ccode\u003eShoppingList#clearList()\u003c/code\u003e."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "The following sequence diagram below shows how the clear list feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "omitted to emphasise the other classes:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "![alt text](../images/Clear_v1.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "#### 3.9.2 Design considerations"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "##### Aspect: Data structure to support the clear list feature"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eClearCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Pros: Easy to add the clear list feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   is treated as a black box"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "- Alternative 2: Implement clear list feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   - Cons: Handling the command under the \u003ccode\u003eDuke\u003c/code\u003e class results in longer methods. Thus, the code becomes "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   harder to navigate and understand. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "   "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "Reason for choosing alternative 1: With each command type having its own class, we could work better in parallel and"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "also be able to trace functionality bugs more easily if each command class deals with a different functionality."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "\u003c!-- @@author --\u003e"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 142
    }
  },
  {
    "path": "docs/team/kokjoon97.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "# Tan Kok Joon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## PROJECT: SHOCO v2.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "SHOCO is a command-line interface (CLI) application written in Java that is used for managing and planning shopping lists"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "and budgets, mainly targeting the inconveniences of unplanned grocery shopping."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- **Major enhancements**:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "   1. Added the **delete functionality**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      - What it does: Allows the user to remove an existing item from the shopping list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      - Justification: This feature makes the application more complete as the user might have added an item to the shopping"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      list by mistake and the application should allow the user to delete it easily."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "   2. Added the **set budget functionality**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      - What it does: Allows the user to specify a budget amount."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      - Justification: This achieves one of the key objectives of the product which is to help the user stay within budget."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "   3. Added the **search functionality**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      - What it does: Allows the user to find items by specifying keywords."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      - Justification: This improves user experience as it can be tedious to find something manually in a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "      long list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- **Minor enhancements**: Added a feature to display a warning message to the user if the total cost of the items in his list exceeds"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "his budget"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- **Code contributed**: [[Functional and test code](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dkokjoon97\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos)]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- **Other contributions**:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Wrote the sections outlining the use of the find, delete and set budget features (Pull request [#107](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/107))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Added an introduction, instructions on running the application and additional information (Pull request [#132](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/132))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Developer Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Wrote appendices A and C (Pull request [#93](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/93))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Added a description of the class diagram (Pull request [#140](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/140))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Wrote the sections for the find, delete and set budget features, with sequence diagrams (Pull request [#165](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/165))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Team-based tasks:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Managed release `v1.0` on Github"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Resolved Checkstyle violations in parts of the code (Pull request [#44](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/44))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Fixed issue with reading of multiple lines of user input (Pull request [#66](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/66))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Fixed issue with failing of CI tests by making changes to runtest file (Pull request [#68](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/68))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Setting up of Logger with console and file handlers (Pull request [#70](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/70))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Review/mentoring contributions:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - PRs reviewed (with changes suggested): [#35](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/35), [#38](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/38), [#39](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/39), [#40](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/40), [#42](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/42) ,[#139](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/139), [#163](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/163)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Beyond the project team:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    - Reported bugs and suggestions for other project teams: Issues [#1-#13](https://github.com/kokjoon97/ped/issues)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003e *Given below are sections I contributed to the User Guide. They showcase my ability to write documentation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003e targeting end-users*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Introduction"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Have you ever encountered the problem of having to make multiple trips to the supermarket"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "because you forgot to get something important? Have you ever gone to the supermarket just to realise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "you do not have enough cash on you?"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "If these problems sound familiar to you, fret not! With SHOCO, such troubles are now a thing of the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "past."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "SHOCO is a command-line interface (CLI) application that allows you to "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "manage and plan your shopping list and budget. With better organisation and also a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "budget tracker, we are here to enhance your grocery-shopping experience and make the woes of"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "grocery shopping disappear."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Quick Start"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. Ensure that you have Java 11 or above installed. Otherwise download it from"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "[here](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. Download the latest version of `SHOCO` from [here](https://github.com/AY1920S2-CS2113T-T13-1/tp/releases), named `CS2113T-T13-1.Shoco.jar` under version 2.1."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. Copy the JAR file into an empty folder"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "4. Open the command prompt in the empty folder and type in the following command:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "   `java -jar CS2113T-T13-1.Shoco.jar`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "5. You are now all set to plan your shopping list!"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Setting a budget: `SET`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Sets a budget for the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Format: `SET b/AMOUNT`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `AMOUNT` can be any decimal number that is between 0 to 5000."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `b/` phrase should be present in the command.  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "`SET b/3.00`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Finding an item: `FIND`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Filters the shopping list according to a keyword specified by the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Format: `FIND KEYWORD`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `KEYWORD` can be any word or phrase."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `KEYWORD` field should not be left empty.  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "`FIND apple`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Deleting an item: `DEL`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Removes an item from the list at the specified index."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Format: `DEL INDEX`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `INDEX` should be a **positive whole number**."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* The `INDEX` should not be out of bounds of the shopping list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  * Out of bounds indices include negative indices \u0026 indices that are greater than the size of the shopping list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "* Indices that are not numbers or are out of bounds will produce an error message indicating the error of the index."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "`DEL 3`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### Additional information"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 1. Loading and saving your shopping list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "All your shopping list and budget data are saved to JSON files after you"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "exit the application. This data is also retrieved from the same JSON files the next time you boot up"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Shoco. No further action is required from you as this is an automatic process."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 2. Automated budget tracker"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "When the total cost of the items in your shopping list exceeds the stored budget amount, a message will be"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "displayed which states by how much you have overrun your current budget. This message will only"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "stop appearing when you increase your budget amount sufficiently or remove enough items from your list to keep within"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "your budget."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003e *Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003e and the technical depth of my contributions to the project.*"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "### 2. Overview of the SHOCO application"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The \u003ccode\u003eDuke\u003c/code\u003e class manages all required resources in the execution of the application. These include"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "a \u003ccode\u003eShoppingList\u003c/code\u003e object to keep track of the \u003ccode\u003eItem\u003c/code\u003e objects the user has added to his list and"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "a \u003ccode\u003eBudget\u003c/code\u003e object to store the user\u0027s budget."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eDuke\u003c/code\u003e also has a \u003ccode\u003eStorage\u003c/code\u003e object for saving and loading data from the disk - this data is stored as JSON files"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "and consists of the latest saved \u003ccode\u003eShoppingList\u003c/code\u003e and \u003ccode\u003eBudget\u003c/code\u003e."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "There is a dependency from \u003ccode\u003eDuke\u003c/code\u003e to \u003ccode\u003eParser\u003c/code\u003e as it only creates an instance of the \u003ccode\u003eParser\u003c/code\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "every time user input is received by the \u003ccode\u003eUi\u003c/code\u003e and does not keep track of the \u003ccode\u003eParser\u003c/code\u003e which is deleted"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "after it is done parsing the current user input. The \u003ccode\u003eParser\u003c/code\u003e determines what command is being invoked by the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "user before creating a new \u003ccode\u003eCommand\u003c/code\u003e object. It then returns the reference to the new \u003ccode\u003eCommand\u003c/code\u003e object "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "to \u003ccode\u003eDuke\u003c/code\u003e. "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "At any point in time, \u003ccode\u003eDuke\u003c/code\u003e only stores up to one \u003ccode\u003eCommand\u003c/code\u003e and no more. This"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e has to be executed before \u003ccode\u003eDuke\u003c/code\u003e can receive more user input."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.3 Set budget feature"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### 3.3.1 Current implementation"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The set budget feature is implemented using a \u003ccode\u003eSetBudgetCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with a variable representing the budget amount. The process is as follows:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eSetBudgetCommand\u003c/code\u003e object based on that user input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eSetBudgetCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "4. \u003ccode\u003eSetBudgetCommand#execute()\u003c/code\u003e makes another call to \u003ccode\u003eBudget#setBudget()\u003c/code\u003e."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "5. The amount in the \u003ccode\u003eBudget\u003c/code\u003e object is set to the amount specified by the user."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The following sequence diagram below shows how the set budget feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](../images/Set_v2.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### 3.3.2 Design considerations"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Aspect: Data structure to support the set budget feature"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eSetBudgetCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Easy to add the set budget feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 2: Implement set budget feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Reason for choosing alternative 1: By implementing each command type in a separate class, any bugs associated with a"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "particular functionality will not affect other functionalities that significantly. It would also make it easier for us to "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "work in parallel."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.7 Find feature"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### 3.7.1 Current implementation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The find feature is implemented using a \u003ccode\u003eFindCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with a String representing the keyword specified by the user. The process is as follows:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eFindCommand\u003c/code\u003e object based on"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "that user input."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eFindCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "4. \u003ccode\u003eFindCommand#execute()\u003c/code\u003e makes various calls to \u003ccode\u003eShoppingList#getItem()\u003c/code\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "to check whether the \u003ccode\u003eItem\u003c/code\u003e at each specified index contains the given keyword."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "5. Each \u003ccode\u003eItem\u003c/code\u003e that contains the keyword is then added to a new \u003ccode\u003eArrayList\u003c/code\u003e named"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " \u003ccode\u003efilteredItems\u003c/code\u003e that is maintained by the \u003ccode\u003eFindCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "6. This list of matching results is then printed to standard output."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The following sequence diagram below shows how the \u003ccode\u003eDuke\u003c/code\u003e object creates the \u003ccode\u003eFindCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Note the \u003ccode\u003eUi\u003c/code\u003e class is omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](../images/Find_v2.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "This next sequence diagram will show how the \u003ccode\u003eFindCommand\u003c/code\u003e creates the \u003ccode\u003efilteredItems\u003c/code\u003e list:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](../images/Find_SD_v2.png)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### 3.7.2 Design considerations"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Aspect: Data structure to support the find feature"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eFindCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Easy to add the find feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 2: Implement find feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Reason for choosing alternative 1: With each command type having its own class, we could work better in parallel and"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "also be able to trace functionality bugs more easily if each command class deals with a different functionality."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### 3.8 Delete feature"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### 3.8.1 Current implementation"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The delete feature is implemented using a \u003ccode\u003eDeleteCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with an index representing that of the item to be deleted from the shopping"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "list. The process is as follows:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e to instantiate a \u003ccode\u003eDeleteCommand\u003c/code\u003e object based"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "on that user input."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls \u003ccode\u003eDeleteCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "4. \u003ccode\u003eDeleteCommand#execute()\u003c/code\u003e makes another call to \u003ccode\u003eShoppingList#deleteItem()\u003c/code\u003e."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "5. The \u003ccode\u003eItem\u003c/code\u003e at the specified index is then removed from the \u003ccode\u003eShoppingList\u003c/code\u003e object."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "The following sequence diagram below shows how the delete feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "![alt text](../images/Delete_v2.png)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### 3.8.2 Design considerations"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Aspect: Data structure to support the delete feature"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eDeleteCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Easy to add the delete feature without having to change the logic of the code much as each command object"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  is treated as a black box"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Alternative 2: Implement delete feature in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "Reason for choosing alternative 1: By abstracting out different command types as separate classes, this allowed us"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "to work better in parallel and also be able to spot bugs more easily as each class deals with a different functionality."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### Appendix A: Product Scope"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "This section talks about who this product is specially designed for and what it aims to achieve."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Target user profile"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Likes to cook at home and requires help keeping track of complex grocery shopping lists and"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "staying within budget"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Prefers to use command line interface applications as opposed to other kinds of applications or"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "paper"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Can type fast"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "##### Value proposition"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "- Make grocery shopping a breeze by offering greater flexibility in managing"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "shopping lists and also providing helpful features like budget tracking"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "#### Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "1. Should work on any OS that has Java 11 or later installed."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "2. Should respond to any user commands within 2 seconds."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "3. Should be easy to use even for people who have never used a command line interface before."
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 281
    }
  },
  {
    "path": "docs/team/shannonwje.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author Shannonwje --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "# ShannonWong - Project Portfolio"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "# PROJECT: SHOCO "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "SHOCO is a desktop application used for the managing and planning of shopping lists and budget. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Users interact with it through the use of a command-line interface (CLI) and the program is written in Java."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* **Major enhancement 1:** Included the **ability to mark and unmark items** in the shopping lists."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * What it does: Allows the users to mark items that are listed as unbought in the list. Allows users to unmark items that are listed as bought in the list as well."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Justification: This feature allows the user to see the items that have bought and thus filter out "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Highlights: This features allows the user mark or unmark any item in the list based on index, making it easy to navigate. Even if the item is marked already, using the marked feature will still show the success message, providing the user assurance that it has been marked as bought already. This applies to the unmark feature."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* **Minor enhancement 1:** Negative indexes or indexes greater than the size of the list are not accepted. This is for a realistic approach as items that do not exist in the list cannot be marked as done in real life, neither do negative indexes exist in real life. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* **Major enhancement 2:** Included the **ability to reset the budget**."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * What it does: Allows the users to set their budget back to the default value of $0.00"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Justification: This helps the user to be able to start over in their budgeting so that they are better able to plan their grocery trips with a clear organisational plan and budgeting."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Highlights: While set budget requires the user to know the amount of budget before using, resetting the budget back to $0.00 can allow the user to see and have a better idea of how much budget they will need approximately, assuming that the items needed are recorded in the list already."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* **Code contributed:** [[Functional code]](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dshannonwje\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* **Other contributions:** "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Documentation:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\t    * Wrote details about developer and user guide (creators \u0026 date) (Pull request [#167](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/167))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\t    * Rearranged and synced the order of both developer and user guide (Pull request [#167](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/167) and [#166](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/166))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\t    * Wrote the overview description for the developer guide (Pull request [#131](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/131))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * Wrote the sections outlining the interactions between different classes for the mark, unmark and reset budget features, including design considerations for the features mentioned (Pull request [#103](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/103) and [#166](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/166))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * Added sequence diagrams to mark, unmark and reset budget features (Pull request [#103](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/103) and [#166](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/166))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * Wrote to appendix B (Pull request [#103](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/103))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * Edited Help feature sequence diagram, removed activation bar. (Pull request [#166](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/166))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * Wrote test instructions for mark, unmark and reset budget features. (Pull request [#167](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/167))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Team-based tasks:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * Resolved Checkstyle violations in some parts of the code. (Pull request [#46](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/46))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * Added in the Display feature inside the Help Command. (Pull request [#81](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/81))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * Edited the expected output test file to reflect the change of the help command output. (Pull request [#81](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/81))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Review/Mentoring contribution:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        * PRs reviewed, some with suggestions for changes. (Pull requests [#38](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/38), [#92](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/92) and [#120](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/120))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    * Beyond the project team:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\t    * Reported feature flaws, documentation bugs and functionality bugs of varying severity for other project teams. (Pull requests [#1 - #7](https://github.com/Shannonwje/ped/issues))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003e *Shown below are the sections that I have contributed to the User Guide. They showcase my ability to write documentation targeting end-users.*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "By: `Team SHOCOTech`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Since: `Feb 2020`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Creators: `Tan Kok Joon`, `Labi Trisha Angelica Vergara`, `Loh Ching Wei, Joshua`, `Phoon Jia Juin`, `Wong Jin En, Shannon`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### Marking an item as bought: `MARK`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Marks an item from the list at the specified index as bought."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "When first added initially, the item will have the status `[X]` "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "to indicate that it is un-marked. After marking the item as bought, "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "the status of item becomes `[B]`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Format: `MARK INDEX`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* The `INDEX` should be a **positive whole number**."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* The `INDEX` should not be out of bounds of the shopping list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  * Out of bounds indices include negative indices \u0026 indices that are greater than the size of the shopping list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* Indices that are not numbers or are out of bounds will produce an error message indicating the error of the index."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* Marking an item whose status was previously `[B]` will be successful, assuring the success of the mark command executed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Example of the usage: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "1. `MARK 5`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   * This marks the 5th item in your list as bought."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   * The status of the 5th item is now `[B]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003cb\u003e\u003ca href\u003d\"#shoco-v21---user-guide\"\u003e\u0026#129053; back to top\u003c/a\u003e\u003c/b\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### Un-marking a marked item: `UNMARK`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Un-marks a marked-as-bought item from the list at the specified index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "After being marked as bought, the item will have the status `[B]`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "to indicate that it is marked as bought. After un-marking the marked-as-bought"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "item, the status of the item becomes `[X]`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Format: `UNMARK INDEX`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* The `INDEX` should be a **positive whole number**."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* The `INDEX` should not be out of bounds of the shopping list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  * Out of bounds indices include negative indices \u0026 indices that are greater than the size of the shopping list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* Indices that are not numbers or are out of bounds will produce an error message indicating the error of the index."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "* Un-marking an item whose status was previously `[X]` will be successful, assuring the success of the un-mark command executed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Example of the usage:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "1. `UNMARK 3`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   * This marks the 3rd item in your list as not bought yet."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   * The status of the 3rd item is now `[X]`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### Resetting a budget: `RES`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Resets the budget to be $0.00 for the user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Format: `RES`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "---"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003e *Shown below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003e and the technical depth of my contributions to the project.*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "By: `Team SHOCOTech`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Since: `Feb 2020`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Creators: `Tan Kok Joon`, `Labi Trisha Angelica Vergara`, `Loh Ching Wei, Joshua`, `Phoon Jia Juin`, `Wong Jin En, Shannon`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### 2. Overview of the SHOCO application"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "The overview of the main classes in the application are shown in the class diagram below."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Omitted are the classes for the features implemented, the \u003ccode\u003eLoadData\u003c/code\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "class, \u003ccode\u003eWriteData\u003c/code\u003e class, \u003ccode\u003eFileUtil\u003c/code\u003e class and"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003ccode\u003eCommandLineTable\u003c/code\u003e class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "#### 3.6 Mark and Unmark feature"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "##### 3.6.1 Current Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " The mark and unmark feature is implemented using the \u003ccode\u003eMarkCommand\u003c/code\u003e and \u003ccode\u003eUnmarkCommand\u003c/code\u003e class"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " which extends the main \u003ccode\u003eCommand\u003c/code\u003e class with an index representing that of the item to be marked or"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " unmarked as bought in the list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " The process is as follows:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " 1. \u003ccode\u003eDuke\u003c/code\u003e first receives user input from \u003ccode\u003eUi\u003c/code\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " 2. \u003ccode\u003eDuke\u003c/code\u003e creates a \u003ccode\u003eParser\u003c/code\u003e object and calls its"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " \u003ccode\u003eParser#parseCommand()\u003c/code\u003e method to instantiate a \u003ccode\u003eMarkCommand\u003c/code\u003e / \u003ccode\u003eUnmarkCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " object based on the user input"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " 3. \u003ccode\u003eDuke\u003c/code\u003e then calls the \u003ccode\u003eMarkCommand#execute()\u003c/code\u003e /"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " \u003ccode\u003eUnmarkCommand#execute()\u003c/code\u003e method. "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " 4. \u003ccode\u003eMarkCommand#execute()\u003c/code\u003e / \u003ccode\u003eUnmarkCommand#execute()\u003c/code\u003e makes a call to the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " \u003ccode\u003eShoppingList#markAsBought()\u003c/code\u003e / \u003ccode\u003eShoppingList#unmarkAsBought()\u003c/code\u003e method with the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " specified index."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " The following sequence diagram below shows how the Mark feature (Diagram 1) and Unmark feature (Diagram 2) works."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " Note the \u003ccode\u003eUi\u003c/code\u003e class is omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " Diagram 1:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![alt text](../images/Mark_v1.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Diagram 2:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![alt text](../images/Unmark_v1.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "##### 3.6.2 Design Considerations"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "###### Aspect: Data structure to support the Mark and Unmark Feature"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " - Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eMarkCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  and \u003ccode\u003eUnmarkCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   - Pros: Easy to edit and add the mark and unmark feature without having to change the logic of the code in"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    multiple files"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "- Alternative 2: Implement the mark and unmark feature in either the \u003ccode\u003eDuke\u003c/code\u003e or \u003ccode\u003eParser\u003c/code\u003e class"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    - Pros: Will have less code and classes to deal with, without having to create a whole new object to execute"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "      the command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    - Cons: Code becomes harder to navigate and understand since the command is all handled under one class, thus makes"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    having to edit the mark and unmark feature difficult."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Reasons for choosing alternative 1: By having an individual class on it\u0027s own, any bugs found in the mark and unmark"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "feature can be found easier and therefore helps to resolve the issue more efficiently. Also, with the feature being"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "implemented in an object-oriented style, reading and tracing the application code would be easier, thus making adding"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "future features to the mark and unmark feature easier as well."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "#### 3.10 Reset budget feature"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "##### 3.10.1 Current implementation"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "The reset budget feature is implemented using a \u003ccode\u003eResetBudgetCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class with a variable representing the budget amount."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e first receives user input from the \u003ccode\u003eUi\u003c/code\u003e class."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "2. \u003ccode\u003eDuke\u003c/code\u003e creates a \u003ccode\u003eParser\u003c/code\u003e object and calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e method to"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "instantiate a \u003ccode\u003eResetBudgetCommand\u003c/code\u003e object based on that user input."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e then calls the \u003ccode\u003eResetBudget#execute()\u003c/code\u003e method."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "4. \u003ccode\u003eResetBudget#execute()\u003c/code\u003e makes a call to the \u003ccode\u003eBudget#resetBudget()\u003c/code\u003e method to set the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "existing budget to $0.00."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "The following sequence diagram below shows how the reset budget feature works. Note the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "![alt text](../images/Res_v1.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "##### 3.10.2 Design considerations"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "###### Aspect: Data structure to support the reset budget feature"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eResetBudgetCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  - Pros: Easy to add the reset budget feature without having to change the logic of the code much as each command"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  object is treated as a black box."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "- Alternative 2: Implement reset budget feature in the \u003ccode\u003eDuke\u003c/code\u003e or \u003ccode\u003eParser\u003c/code\u003e class."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  - Pros: Will have less code to deal with as a new method is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "Reason for choosing alternative 1: By implementing each command type in a separate class, any bugs associated with a "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "particular functionality will not affect other functionalities that significantly. It would also make it easier for us"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "to work in parallel."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "### Appendix D: Instructions for Manual Testing"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "#### Set and Reset a budget"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "2. Reset the budget"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "       "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    i. Test case: \u003ccode\u003eRES\u003c/code\u003e "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: Budget has been reset to $0.00"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    ii. Other incorrect reset budget commands to try: \u003ccode\u003eRES xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                     "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: An error message and the correct usage of the RES command is shown."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "#### Mark and Un-mark an item"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "1. Marking an item"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    *Assumption: there are more than 5 but less than a hundred items in the list.*"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "          "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   i. Test case: \u003ccode\u003eMARK 5\u003c/code\u003e    "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: The fifth item in the list is mark as bought, denoted as [B]."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   ii. Test case: \u003ccode\u003eMARK -10\u003c/code\u003e "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: An error message stating that the item does not exist in the list is shown."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   iii. Test case: \u003ccode\u003eMARK 100\u003c/code\u003e "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: An error message stating that the item does not exist in the list is shown."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   iv. Other incorrect MARK commands to try: \u003ccode\u003eMARK xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "         Expected: An error message stating to provide a single numerical index number is shown."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "2. Un-marking an item"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   *Assumption: there are more than 5 and less than a hundred items in the list.*"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "       "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   i. Test case: \u003ccode\u003eUNMARK 5\u003c/code\u003e "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "         Expected: The fifth item in the list is marked as not bought yet, denoted as [X]."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   ii. Test case: \u003ccode\u003eUNMARK -10\u003c/code\u003e "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "       Expected: An error message stating that the item does not exist in the list is shown."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   iii. Test case: \u003ccode\u003eUNMARK 100\u003c/code\u003e "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "       Expected: An error message stating that the item does not exist in the list is shown."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "   iv. Other incorrect UNMARK commands to try: \u003ccode\u003eUNMARK xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Expected: An error message stating to provide a single numerical index number is shown."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "\u003c!-- @@author --\u003e"
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 307
    }
  },
  {
    "path": "docs/team/trishaangelica.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author trishaangelica --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "# Labi Trisha Angelica Vergara - Project Portfolio"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "## PROJECT: SHOCO "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SHOCO is a desktop application used for managing and planning of shopping lists and budgets. Users interact with it through the use of a command-line interface (CLI), the program is written in Java and has bout 5 kLoC."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **Major enhancement 1:** Included the **ability to edit items** in the shopping list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * What it does: Allows the user to update values of an item in the shopping list. Such values include the description, price and quantity of an item."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Justification: This feature improves the product significantly because a user may make mistakes when adding an item (e.g typos made) and the app should provide a convenient way to rectify such mistakes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Highlights: This enhancement allows the user to update any value of an item as the edit command does not require any order in its input (e.g alphabetical ordering of delimiters)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **Minor enhancement 1:** Negative values entered for price and quantity are not accepted. This is for a realistic approach as items will never have negative prices and/or quantities in a real life scenario."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **Major enhancement 2:** Added the **help function** for the SHOCO application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * What it does: Lists all acceptable commands, their purpose, valid parameters and examples of usage.   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Justification: This feature improves the product significantly because the user may forget how certain functions work and so, the app should provide a convenient way for them to check on the accepted command format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     With the help feature embedded in the application, users need not solely rely on the SHOCO User Guide for help when they are in doubt."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Highlights: This enhancement includes examples of command usages which makes the accepted command formats much more comprehensible to the user.  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **Code contributed:** [[Functional code]](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dtrishaangelica\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dtrishaangelica\u0026tabRepo\u003dAY1920S2-CS2113T-T13-1%2Ftp%5Bmaster%5D)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **Other contributions:** "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Project Management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Closed milestones v1.0 and v2.1 on GitHub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Assigned bugs and PRs to respective team members on GitHub. (Issues \u003cins\u003e[#145-#162](https://github.com/AY1920S2-CS2113T-T13-1/tp/issues?q\u003dis%3Aissue+is%3Aclosed+PE-D)\u003c/ins\u003e)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Included test cases for all commands in input.txt file (Pull Request \u003cins\u003e[#69](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/69)\u003c/ins\u003e)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Added SHOCO logo for the application (Pull request \u003cins\u003e[#88](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/88)\u003c/ins\u003e)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Changed original list display to pretty-printing in a table (*Reused code from logicbig*) (Pull request \u003cins\u003e[#54](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/54)\u003c/ins\u003e)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Added a navigable table of contents and \"back to top\" links for both SHOCO user guide and developer guide: \u003cins\u003e[#111](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/111)\u003c/ins\u003e , \u003cins\u003e[#112](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/112)\u003c/ins\u003e , \u003cins\u003e[#122](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/122)\u003c/ins\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Organized the \"skeletal\" base of the DG in order to provide the team with allocated sections for easier collaboration \u003cins\u003e[#114](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/114)\u003c/ins\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Standardized colour and font of all diagrams in the DG for comprehensibility \u003cins\u003e[#191](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/191)\u003c/ins\u003e , \u003cins\u003e[#210](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/210)\u003c/ins\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Added the Manual Testing Section of the DG \u003cins\u003e[#204](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/204)\u003c/ins\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * PRs reviewed (with non-trivial review comments): \u003cins\u003e[#38](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/38)\u003c/ins\u003e , \u003cins\u003e[#169](https://github.com/AY1920S2-CS2113T-T13-1/tp/pull/169)\u003c/ins\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    * Beyond the project team:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        * Reported feature flaws, documentation bugs and functionality bugs of varying severity for other project teams. (Pull requests \u003cins\u003e[#1 - #6](https://github.com/trishaangelica/ped/issues)\u003c/ins\u003e)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "## Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003e *Given below are sections that I have contributed to the User Guide. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users.*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Table of Contents"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[1. Introduction](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#introduction)**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[2. Quick Start](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#quick-start)**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[3. Features](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#features)**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.1 Adding an item: `ADD`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#adding-an-item-add)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.2 Editing an item: `EDIT`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#editing-an-item-edit)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.3 Deleting an item: `DEL`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#deleting-an-item-del)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.4 Finding an item: `FIND`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#finding-an-item-find)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.5 Marking an item as bought: `MARK`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#marking-an-item-as-bought-mark)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.6 Un-marking a marked item: `UNMARK`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#un-marking-a-marked-item-unmark)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.7 Displaying list and budget details: `DISPLAY`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#displaying-list-and-budget-details-display)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.8 Setting a budget: `SET`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#setting-a-budget-set)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.9 Resetting a budget: `RES`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#resetting-a-budget-res)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.10 Clearing the list: `CLEAR`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#clearing-the-list-clear)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.11 Viewing help: `HELP`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#viewing-help-help)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * [3.12 Exiting the Program: `BYE`](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#exiting-the-program-bye)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[4. Additional information](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#additional-information)**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[5. FAQ](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#faq)**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* **[6. Command Summary](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#command-summary)**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Editing an item: `EDIT`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " Edits the specified item in the shopping list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " Format: `EDIT INDEX [i/DESCRIPTION] [p/PRICE] [q/QUANTITY]`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * Edits the item at the specified `INDEX`. The `INDEX` refers to the index number "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " shown in the displayed shopping list. "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * You can view an item\u0027s `INDEX` number by using the `DISPLAY` command. More info [here](https://ay1920s2-cs2113t-t13-1.github.io/tp/UserGuide.html#displaying-list-and-budget-details-display)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * The `INDEX` and `[QUANTITY]` must be a **positive number**. *e.g 1, 2, 3 ..*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * The `[PRICE]` must be in **positive numerical** form (decimal form accepted)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * **At least one** of the three parameters (description/price/quantity) must be present in the command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003e :information_source: Note: You can rearrange the delimiters i/, p/ , q/ in \u003cem\u003eany\u003c/em\u003e order. e.g `i/.. p/.. q/..` or `q/.. i/.. p/..`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " Examples of usage: "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 1. `EDIT 3 i/potato p/5.00 q/3`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Edits the description, price and quantity of the 3rd item in the shopping list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 2. `EDIT 3 i/potato chips p/5.00`  **OR**  `EDIT 3 i/potato chips q/2`  **OR**  `EDIT 3 p/5.00 q/2`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Edits the description and price /  description and quantity /  price and quantity of the "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     3rd item in the shopping list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 3. `EDIT 3 i/potato chips` **OR** `EDIT 3 p/5.00` **OR** `EDIT 3 q/2`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Edits only description / only price / only quantity of the 3rd item in the shopping list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Viewing help: `HELP`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Shows the available commands, their purpose and how they are to be used."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Format: `HELP`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Command Summary"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Add item `ADD i/DESCRIPTION [p/PRICE] [q/QUANTITY]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Edit item `EDIT INDEX [i/DESCRIPTION] [p/PRICE] [q/QUANTITY]`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Delete item `DEL INDEX`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Find item `FIND KEYWORD`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Mark item `MARK INDEX`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Un-mark item `UNMARK INDEX`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Display list and budget details `DISPLAY`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Set budget `SET b/AMOUNT`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Reset budget `RES`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Clear list `CLEAR`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* View help `HELP`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "* Exit program `BYE`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "---"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "## Contributions to the Developer Guide"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003e *Given below are sections that I have contributed to the User Guide. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003e They showcase my ability to write documentation targeting end-users.*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "### Table of Contents"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * **[1. Introduction](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#1-introduction)**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * **[2. Overview of the SHOCO application](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#2-overview-of-the-shoco-application)**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * **[3. Implementation](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#3-implementation)**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.1 View help feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#31-view-help-feature)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.2 Display feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#32-display-feature)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.3 Set budget feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#33-set-budget-feature)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.4 Add feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#34-add-feature)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.5 Edit feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#35-edit-feature)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.6 Mark and Unmark feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#36-mark-and-unmark-feature)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.7 Find feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#37-find-feature)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.8 Delete feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#38-delete-feature)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.9 Clear list feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#39-clear-list-feature)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.10 Reset budget feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#310-reset-budget-feature)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [3.11 Exit program feature](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#311-exit-program-feature)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * **[Appendix A: Product Scope](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#appendix-a-product-scope)**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * **[Appendix B: User Stories](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#appendix-b-user-stories)**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * **[Appendix C: Non-Functional Requirements](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#appendix-c-non-functional-requirements)**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  * **[Appendix D: Instructions for Manual Testing](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#appendix-d-instructions-for-manual-testing)**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [Launch and Shutdown](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#launch-and-shutdown)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [Set and Reset a budget](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#set-and-reset-a-budget)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [Add and Edit an item](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#add-and-edit-an-item)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [Mark and Un-Mark an item](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#mark-and-un-mark-an-item)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [Find and Delete an item](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#find-and-delete-an-item)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     + [Display and Clear the shopping list](https://github.com/AY1920S2-CS2113T-T13-1/tp/blob/master/docs/DeveloperGuide.md#display-and-clear-the-shopping-list)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### 3.2 Edit feature"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### 3.2.1 Current implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The edit feature is implemented using an \u003ccode\u003eEditCommand\u003c/code\u003e class. This class extends from the main"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class. The \u003ccode\u003eItem\u003c/code\u003e object to be edited is identified by the index number provided "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "in the user input. In addition to the index number, the user input **must also contain at least one** of these parameters: "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "*description*, *price*, *quantity*. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The process is as follows:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. \u003ccode\u003eDuke\u003c/code\u003e class receives user input from the \u003ccode\u003eUi\u003c/code\u003e class. "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. A \u003ccode\u003eParser\u003c/code\u003e object is created."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "3. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e method to instantiate an \u003ccode\u003eEditCommand\u003c/code\u003e object based on the user input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "4. \u003ccode\u003eDuke\u003c/code\u003e class calls the \u003ccode\u003eEditCommand#execute()\u003c/code\u003e method."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "5. In the \u003ccode\u003eEditCommand#execute()\u003c/code\u003e method, the \u003ccode\u003eItem\u003c/code\u003e object is retrieved through"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003ccode\u003eShoppingList#getItem()\u003c/code\u003e. The original description / price / quantity of the item is overwritten "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "with the new values from the user input through the use of the \u003ccode\u003eItem\u003c/code\u003e class setter methods."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "6. The \u003ccode\u003eItem\u003c/code\u003e object with its new values is stored back to the \u003ccode\u003eShoppingList\u003c/code\u003e object."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The following sequence diagram below shows how the edit feature works. The details of updating the values of an item"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "have been omitted from the diagram. Those details are shown in a separate sequence diagram."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "![Edit Feature](../images/Edit_v1_PPP.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The separate sequence diagram below shows how an item is updated with new values."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "![Edit Feature SD](../images/Edit_SD_v1_PPP.png)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### 3.2.2 Design considerations"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### Aspect: Data structure to support the edit feature"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 1 (current choice): Only parameters present in user input are treated as values to update."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: User has the flexibility to choose which variables he/she wishes to update."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Might significantly increase the code base as there is a need to check for the "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    presence of the variable in user input."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 2: Require all values of an \u003ccode\u003eItem\u003c/code\u003e object to be updated and parameters must be in alphabetical"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "order."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: Will have less code to deal with having no additional parsing of the input string."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Less user flexibility; user must input all parameters even if he/she does not wish to update certain"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  variables."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Reason for choosing alternative 1: By allowing users to update any values they want, it provides them with greater convenience and freedom as they do not need to follow strict command \"rules/order\". Furthermore, having greater freedom on input values makes it a hassle-free process for the users."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### 3.10 View help feature"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### 3.10.1 Current implementation"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The help feature is implemented using a \u003ccode\u003eHelpCommand\u003c/code\u003e class which extends the main"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003ccode\u003eCommand\u003c/code\u003e class. The \u003ccode\u003eHelpCommand\u003c/code\u003e class shows the program usage instructions to the user."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " The process is as follows:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 1. \u003ccode\u003eDuke\u003c/code\u003e receives user input from \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 2. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eParser#parseCommand()\u003c/code\u003e. If the user input fails to match any of the "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " correct command keywords (\u003ccode\u003eADD\u003c/code\u003e, \u003ccode\u003eEDIT\u003c/code\u003e, \u003ccode\u003eDEL\u003c/code\u003e etc.), or if the input matches the "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  \u003ccode\u003eHELP\u003c/code\u003e command keyword, a \u003ccode\u003eHelpCommand\u003c/code\u003e object will be instantiated."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 3. \u003ccode\u003eDuke\u003c/code\u003e calls \u003ccode\u003eHelpCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " 4. \u003ccode\u003eHelpCommand#execute()\u003c/code\u003e lists all the accepted command format SHOCO recognizes, their purpose and 1 or more examples"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "of usage."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "The following sequence diagram below shows how the help feature works. Note, the \u003ccode\u003eUi\u003c/code\u003e class is"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "omitted in the sequence diagram to emphasise on the other classes:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "![Help Feature](../images/Help_v1_PPP.png)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### 3.10.2 Design considerations"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "##### Aspect: Data structure to support the help feature"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 1 (current choice): Object-oriented style with a separate class for \u003ccode\u003eHelpCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: Easy to add the help feature without having to change the logic of the code much as each command"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  object is treated as a black box"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Might significantly increase the code base with another class being added"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "- Alternative 2: Implement help feature in the \u003ccode\u003eDuke\u003c/code\u003e or \u003ccode\u003eParser\u003c/code\u003e class"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Pros: Will have less code to deal with as a new function is simply created in the \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  - Cons: Code becomes less organised since for every other command that we have implemented, \u003ccode\u003eDuke\u003c/code\u003e class"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  simply executes those commands as black boxes, without worrying about their internal details"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "Reason for choosing alternative 1: By abstracting out different command types as separate classes, we could work better in parallel and also be able to spot bugs more easily as each class deals with a different functionality"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u0026nbsp;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Appendix D: Instructions for Manual Testing"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003e :information_source: Note: These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing. "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Launch and Shutdown"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. Initial launch "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      i.    Download the [latest](https://github.com/AY1920S2-CS2113T-T13-1/tp/releases) version of `SHOCO`, named \u003ccode\u003eCS2113T-T13-1.Shoco.jar\u003c/code\u003e under version 2.1."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      ii.   Copy it into an empty folder on your desktop."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      iii.  While inside the empty folder, open a command prompt window by typing \u003ccode\u003eCMD\u003c/code\u003e in the address bar of the folder."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      iv.   Run the following command in the command prompt window: `java -jar CS2113T-T13-1.Shoco.jar`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      v.    If the font size of the command window is too big, you can decrease it by \u003ccode\u003eCTRL + scroll down\u003c/code\u003e on your mouse."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Shows a welcome message from SHOCO."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      i.    Enter the command \u003ccode\u003eBYE\u003c/code\u003e to exit the SHOCO application."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The program is terminated."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "   \u0026nbsp;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "   "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Set and Reset a budget"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. Set a budget"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eSET b/500.00\u003c/code\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       Expected: Budget is set to $500.00"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eSET b/10000\u003c/code\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Budget is set to $5000.00, which is the maximum budget SHOCO allows."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iii. Test case: \u003ccode\u003eSET b/-100\u003c/code\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Budget is reset to $0.00, which is the minimum budget SHOCO allows."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iv. Other incorrect set budget commands to try: \u003ccode\u003eSET b/xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the SET command is shown."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Reset the budget"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eRES\u003c/code\u003e "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Budget has been reset to $0.00"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Other incorrect reset budget commands to try: \u003ccode\u003eRES xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                     "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the RES command is shown."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Add and Edit an item"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. Add an item "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    \u003e:bulb: Tip: Before adding an item, you can run the \u003ccode\u003eDISPLAY\u003c/code\u003e command to prevent entering a duplicate description"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003e ADD i/apple p/3.00 q/2 \u003c/code\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       Expected: An item with the description - \"apple\", price - \"$3.00\" and quantity - \"2\"  is added."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u003e :bulb: Tip: You can run the \u003ccode\u003eDISPLAY\u003c/code\u003e command to check the newly added item."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                                           "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eADD p/3.00\u003c/code\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: No item is added. Error message and a correct usage of the ADD command is shown."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iii. Other incorrect ADD commands to try: \u003ccode\u003eADD\u003c/code\u003e, \u003ccode\u003eADD p/xxx\u003c/code\u003e, \u003ccode\u003eADD q/xxx\u003c/code\u003e (where xxx is not a number)."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: Similar to previous. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Edit an item"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    \u003e :bulb: Tip: You can run the \u003ccode\u003eDISPLAY\u003c/code\u003e command to check if the item has been correctly updated."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    *Assumption: Valid index and description is provided. (No duplicate description allowed)*"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eEDIT 1 i/banana\u003c/code\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The description of the first item is updated to \"banana\". "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eEDIT 1 p/5.60\u003c/code\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The price of the first item is updated to \"$5.60\". "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iii. Test case: \u003ccode\u003eEDIT 1 q/3\u003c/code\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The quantity of the first item is updated to \"3\". "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    iv. Other incorrect edit commands to try: \u003ccode\u003eEDIT p/xxx\u003c/code\u003e , \u003ccode\u003eEDIT q/xxx\u003c/code\u003e. (where xxx is not a number)."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the EDIT command is shown."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Find and Delete an item"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. Find an item based on keyword"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eFIND apple\u003c/code\u003e "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       Expected: A list of items that contains \"apple\" in their description is displayed."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eFIND xxx\u003c/code\u003e (where xxx is a keyword that is unmatched)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the FIND command is shown."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Delete an item"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u003e :bulb: Tip: You can run the \u003ccode\u003eDISPLAY\u003c/code\u003e command to check the index of an item."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "         "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    i. Test case: \u003ccode\u003eDEL 1\u003c/code\u003e "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       Expected: The first item (if it exists), is deleted."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ii. Test case: \u003ccode\u003eDEL xxx\u003c/code\u003e (where xxx is a not a number / the item does not exist yet)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "       "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: An error message and the correct usage of the DEL command is shown."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     \u0026nbsp;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "#### Display and Clear the shopping list"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "1. List all items in the shopping list"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     i. Test case: \u003ccode\u003eDISPLAY\u003c/code\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: A list of all the items and the current budget amount is displayed."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                                                            "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      \u0026nbsp;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "2. Clear all items in the shopping list"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     i. Test case: \u003ccode\u003eCLEAR\u003c/code\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "           "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Expected: The shopping list is cleared."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                                                            "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "      \u0026nbsp;        "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "---"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        "
      }
    ],
    "authorContributionMap": {
      "trishaangelica": 429
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.utils.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.utils.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static Budget myBudget \u003d new Budget();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"Logger.log\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final String LOG_FILE_ERROR \u003d \"Logging to file unsuccessful\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    //@@author trishaangelica"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        Duke.setUpLogger();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Sets up the logger to log to the console and a file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static void setUpLogger() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        ConsoleHandler console \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        console.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.addHandler(console);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        File logFile \u003d new File(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (!logFile.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                logFile.createNewFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            FileHandler logHandler \u003d new FileHandler(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            logHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.addHandler(logHandler);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.SEVERE,LOG_FILE_ERROR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    //@@author trishaangelica"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    //@@author JLoh579"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        items \u003d storage.loadShoppingList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        myBudget \u003d storage.loadBudget();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        LOGGER.log(Level.INFO,\"Application starting.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    //@@author Shannonwje"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Prints the goodbye message and exits."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        ui.bidFarewell();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        LOGGER.log(Level.INFO,\"Application shutting down\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Reads user commands and executes them, until the user issues the exit command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            ui.printline(\"\\nEnter command:\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            String userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert !userInput.isEmpty() : \"Input should not be empty\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            command \u003d new Parser().parseCommand(userInput);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert command !\u003d null : \"Command should have been initialised\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            executeCommand(command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert command.feedbackToUser !\u003d null : \"Result should have been initialised\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            storage.saveAll(items, myBudget);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            ui.printline(command.feedbackToUser);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } while (!command.isExit);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    //@@author jiajuinphoon"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    private void executeCommand(Command command) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            command.setData(items,myBudget);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            ui.printline(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 20,
      "kokjoon97": 57,
      "Shannonwje": 10,
      "jiajuinphoon": 17,
      "-": 7,
      "trishaangelica": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "//@@author jiajuinphoon"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ADD\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String SUCCESS_ACK \u003d System.lineSeparator() + \"Added this item: \" + \"%s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an item to the list.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: ADD i/[DESCRIPTION] p/[PRICE] q/[QUANTITY]\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + System.lineSeparator() + \"|| Example: ADD i/apple p/3.00 q/2\" + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String FAILURE_ACK \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"Error! Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"\\nExample: ADD i/apple p/4.50 q/2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String FAILURE_ACK_2 \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"Error! price should follow this format\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"\\nExample: p/4.50\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String FAILURE_ACK_3 \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \" - Quantity of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"|| Example: ADD i/apples p/9.90 q/9\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public static final String FAILURE_ACK_4 \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"Oops! It already exists\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            + \"Duplication is not allowed in the list.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    private Item add;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * Creates an AddCommand."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * Description is a compulsory input,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * while price is an optional input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * @param description description of item"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     * @param price       price of item"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public AddCommand(String description, double price, int quantity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        add \u003d new Item(description, price, quantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            if (items.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                items.add(add);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                assert add.getDescription() !\u003d null : \"(Add Command): Item must not be null.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                LOGGER.log(Level.INFO, \"(Add command)  Added item: \" + add);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                feedbackToUser \u003d String.format(SUCCESS_ACK,add);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            } else if (items.getSize() \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                boolean isAdd \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                for (int i \u003d 0; i \u003c items.getSize(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    if (items.getItem(i).getDescription().equals(add.getDescription())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        isAdd \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        feedbackToUser \u003d String.format(FAILURE_ACK_4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                if (!isAdd) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    items.add(add);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    assert add.getDescription() !\u003d null : \"(Add Command): Item must not be null.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    LOGGER.log(Level.INFO, \"(Add command)  Added item: \" + add);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    feedbackToUser \u003d String.format(SUCCESS_ACK,add);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            //@@author kokjoon97"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                LOGGER.log(Level.INFO,\"(Add command) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            LOGGER.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d String.format(FAILURE_ACK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Add command) Invoked with invalid price format: \u0027\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + add.getPrice() + \"\u0027\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d String.format(FAILURE_ACK_2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 8,
      "JLoh579": 2,
      "jiajuinphoon": 86,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " * Clears the shopping list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"CLEAR\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the list.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: CLEAR\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example: CLEAR\" + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d System.lineSeparator() + \"Your shopping list has been cleared.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assert  items.getList().size() \u003d\u003d 0 : \"Size of list should be zero.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Clear command) List of items is now empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        feedbackToUser \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 25,
      "trishaangelica": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author trishaangelica, jiajuinphoon, Shannonwje, kokjoon97, JLoh579"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    protected ShoppingList items;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    protected Budget myBudget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public boolean isExit \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        throw new UnsupportedOperationException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void setData(ShoppingList items,Budget myBudget) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.myBudget \u003d myBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 3,
      "trishaangelica": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"DEL\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an item in the list.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: DEL [INDEX]\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Example: DEL 1\" + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String DELETE_MESSAGE \u003d \"\\nGot it! I have removed the following item:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String DELETE_MESSAGE_FAILURE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + \"Please enter a valid index within the bounds\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Constructs the delete command with the user-specified index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param index Index of the item to be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Delete command) User entered index \" + index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Executes the command which deletes the item from the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            index -\u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            String feedback \u003d DELETE_MESSAGE + items.getItem(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            items.deleteItem(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Delete command) Item was removed from index: \" + index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser \u003d feedback;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                LOGGER.log(Level.INFO,\"(Delete command) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.WARNING,\"(Delete command) Invoked with invalid index: \" + this.index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser \u003d DELETE_MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DisplayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author JLoh579"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " * Displays the shopping list, cost of items, and budget details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class DisplayCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"DISPLAY\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String LIST_MESSAGE \u003d \"Your shopping list:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String TOTAL_COST_MESSAGE \u003d \"Cost of items:    $%.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String BUDGET_MESSAGE \u003d \"Budget:           $%.2f\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String REMAINING_BUDGET_MESSAGE \u003d \"Remaining budget: $%.2f\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all items in the list.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: DISPLAY\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + System.lineSeparator() + \"|| Example: DISPLAY\" + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        // Prepare info for printing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double totalCost \u003d items.getTotalCost();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        String budgetDetails \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                + String.format(BUDGET_MESSAGE, myBudget.getAmount())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                + String.format(TOTAL_COST_MESSAGE, totalCost)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                + String.format(REMAINING_BUDGET_MESSAGE, myBudget.getRemainingBudget(totalCost));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        // Printing gets done here"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(System.lineSeparator() + LIST_MESSAGE + System.lineSeparator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        items.showTableOfItems();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(budgetDetails);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        LOGGER.log(Level.INFO,\"(List command) Items, total cost, and budget have been displayed.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        // Feedback is empty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author trishaangelica"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"EDIT\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the specified item in the list.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: EDIT [INDEX] i/[DESCRIPTION] p/[PRICE] q/[QUANTITY]\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example 1: EDIT 1 i/apple p/3.00 q/4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example 2: EDIT 1 i/apple\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example 3: EDIT 1 p/3.00\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example 4: EDIT 1 q/4\" + System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"The item has been updated to: %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_FAILURE_DUPLICATE_DESCRIPTION \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"OOPS! I already have an item with that name. Perhaps try another description? :D\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_FAILURE_NOT_IN_LIST \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"OOPS! I don\u0027t have that item in the list yet. Try again? :D\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_FAILURE_INCORRECT_FORMAT \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \" - Index of item must be a positive number.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[NEW DESCRIPTION], \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"p/[NEW PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"|| Example: EDIT 2 i/lollipop p/2.50 q/5\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private int indexOfItem;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String newDescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String newPrice;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String newQuantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Creates an EditCommand and initialises the item index,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * description and price that needs to be edited."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param index       index of item to change"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param description new description of item to change"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param price       new price of item to change"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public EditCommand(int index, String description, String price, String quantity) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.indexOfItem \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.newDescription \u003d description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.newPrice \u003d price;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.newQuantity \u003d quantity;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        LOGGER.log(Level.INFO, \"(Edit command) User entered index: \" + indexOfItem"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" description: \u0027\" + newDescription + \"\u0027 price: \" + newPrice + \"\u0027 quantity: \" + newQuantity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            boolean duplicateDescription \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            indexOfItem -\u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            Item item \u003d items.getItem(indexOfItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (newDescription !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                duplicateDescription \u003d items.isSameItemDescription(newDescription);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                if (duplicateDescription) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    feedbackToUser \u003d String.format(MESSAGE_FAILURE_DUPLICATE_DESCRIPTION, item.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    item.setDescription(newDescription);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    assert item.getDescription().equals(newDescription);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (newPrice !\u003d null \u0026\u0026 !duplicateDescription) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                item.setPrice(Double.parseDouble(newPrice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                assert Double.parseDouble(newPrice) \u003e\u003d 0.0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                assert item.getPrice() \u003d\u003d Double.parseDouble(newPrice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (newQuantity !\u003d null \u0026\u0026 !duplicateDescription) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                item.setQuantity(Integer.parseInt(newQuantity));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                assert Integer.parseInt(newQuantity) \u003e\u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                assert item.getQuantity() \u003d\u003d Integer.parseInt(newQuantity);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (!duplicateDescription) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                LOGGER.log(Level.INFO, \"(Edit command)  Item has been updated to: \" + item.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                feedbackToUser \u003d String.format(MESSAGE_SUCCESS, item.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            //@@author kokjoon97"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                LOGGER.log(Level.INFO, \"(Edit command) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                feedbackToUser +\u003d String.format(EXCEED_WARNING, (-1) * remainder);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Edit command)  Item to edit is not found in list\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            feedbackToUser \u003d MESSAGE_FAILURE_NOT_IN_LIST;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            feedbackToUser \u003d MESSAGE_FAILURE_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 8,
      "JLoh579": 1,
      "-": 1,
      "trishaangelica": 101
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author JLoh579"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"BYE\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: BYE\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + System.lineSeparator() + \"|| Example: BYE\" + System.lineSeparator();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d System.lineSeparator() + \"Exiting SHOCO as requested ...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        feedbackToUser \u003d MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 15,
      "trishaangelica": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.ui.CommandLineTable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " * Displays the shopping list, cost of items, and budget details."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"FIND\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String FIND_MESSAGE \u003d System.lineSeparator() + \"Here are the matching items:\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all items that contain the keyword.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: FIND [KEYWORD]\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Example: FIND apples\" + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Constructs the find command with the user-specified keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param keyword The keyword specified by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Executes the command which displays to the user the matching results, if any."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        ArrayList\u003cItem\u003e filteredItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        int size \u003d items.getSize();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        int matches \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        int[] indexArray \u003d new int[size];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            Item unfilteredItem \u003d items.getItem(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert unfilteredItem !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            String descriptionToCheck \u003d unfilteredItem.getDescription().toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (descriptionToCheck.contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                filteredItems.add(unfilteredItem);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                indexArray[matches] \u003d i + 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                matches +\u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        int filteredListSize \u003d filteredItems.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Find command) Matches found: \" + filteredListSize);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        if (filteredListSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser \u003d \"Sorry, no results could be found!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert filteredListSize !\u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            System.out.println(FIND_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            CommandLineTable st \u003d new CommandLineTable();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            st.setShowVerticalLines(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            st.setHeaders(\"Item\", \"Price\",\"Qty\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            for (int i \u003d 0; i \u003c filteredItems.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                String itemLine \u003d indexArray[i] + \". [\" + filteredItems.get(i).getStatusIcon()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        + \"] \" + filteredItems.get(i).getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                st.addRow(itemLine, String.format(\"$%.2f\", filteredItems.get(i).getPrice()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        String.format(\"%d\",filteredItems.get(i).getQuantity()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            st.print();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Find command) Results displayed successfully\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 79
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author trishaangelica"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"HELP\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: HELP\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + System.lineSeparator() + \"|| Example: HELP\" + System.lineSeparator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        feedbackToUser \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + HelpCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + DisplayCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + SetBudgetCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + AddCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + EditCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + MarkCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + UnmarkCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + FindCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + DeleteCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + ClearCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + ResetBudgetCommand.MESSAGE_USAGE + System.lineSeparator()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + ExitCommand.MESSAGE_USAGE + System.lineSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "trishaangelica": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/IncorrectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "//@@author Shannonwje"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public IncorrectCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/MarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "//@@author Shannonwje"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class MarkCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"MARK\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + \"Yes! I\u0027ve marked this item as bought:\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"%s\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String FAIL_MESSAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + \"Oh No! This item does not exist in the list\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks an item as bought.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"|| Parameters: MARK [INDEX]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"|| Example: MARK 1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private int indexOfItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public MarkCommand(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.indexOfItem \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        LOGGER.log(Level.INFO, \"(Mark command) User entered index: \" + indexOfItem);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            Item markItem \u003d items.markAsBought(indexOfItem);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            assert markItem.getStatusIcon().equals(\"B\") : \"Item should be marked as bought\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.INFO, \"(Mark command)  Item has been marked: \" + markItem.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            feedbackToUser \u003d String.format(SUCCESS_MESSAGE, markItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Mark command)  index is out of bounds\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            feedbackToUser \u003d FAIL_MESSAGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ResetBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "//@@author Shannonwje"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class ResetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"RES\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String SUCCESS_RESET_BUDGET \u003d System.lineSeparator() + \"Budget has been reset to $0.00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Resets the budget to $0.00.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: RES\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            + System.lineSeparator() + \"|| Example: RES\" + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public ResetBudgetCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        myBudget.resetBudget();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        assert myBudget.getAmount() \u003d\u003d 0 : \"Budget should be zero\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Reset Budget command) Budget amount is set to zero: \" + myBudget.getAmount());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        feedbackToUser \u003d SUCCESS_RESET_BUDGET;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        //@@author kokjoon97"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Reset Budget command) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 9,
      "Shannonwje": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/SetBudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "public class SetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"SET\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String EXCEED_WARNING \u003d \"\\nNOTE: You have exceeded your budget by %.2f\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String SET_BUDGET_MESSAGE \u003d System.lineSeparator() + \"Setting budget to \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the budget based on user input.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Parameters: SET /b[BUDGET]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            + System.lineSeparator() + \"|| Example: SET /b 100.00\" + System.lineSeparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Constructs the set budget command with the user-specified budget."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param amount Budget specified by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public SetBudgetCommand(double amount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Set budget) User entered budget: \" + amount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Executes the command which sets the budget to the user-specified amount."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double correctBudget \u003d myBudget.setBudget(amount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Set budget) Budget was corrected to: \" + correctBudget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert correctBudget \u003c\u003d 5000 : \"Budget should not exceed $5000\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert correctBudget \u003e\u003d 0 : \"Budget should not be negative\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        LOGGER.log(Level.INFO,\"(Set budget) Budget amount: \" + correctBudget + \" did not fail assertions.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        String feedback \u003d SET_BUDGET_MESSAGE + \"$\" + correctBudget;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        feedbackToUser \u003d feedback;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert myBudget !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double remainder \u003d myBudget.getRemainingBudget(items.getTotalCost());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        if (remainder \u003c 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO,\"(Set budget) User exceeded budget by: \" + (-1) * remainder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            feedbackToUser +\u003d String.format(EXCEED_WARNING,(-1) * remainder);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/UnmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "//@@author Shannonwje"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class UnmarkCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"UNMARK\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + \"Yes! I\u0027ve unmarked this item as bought:\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"%s\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String FAIL_MESSAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + \"Oh No! This item does not exist in the list\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unmarks a bought item.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"|| Parameters: UNMARK [INDEX]\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                                    + System.lineSeparator() + \"|| UNMARK 1\" + System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private int indexOfItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public UnmarkCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.indexOfItem \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        LOGGER.log(Level.INFO, \"(Unmark command) User entered index: \" + indexOfItem);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            Item unmarkItem \u003d items.unmarkAsBought(indexOfItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            assert unmarkItem.getStatusIcon().equals(\"X\") : \"Item should be marked as unbought\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.INFO, \"(Unmark command)  Item has been marked: \" + unmarkItem.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            feedbackToUser \u003d String.format(SUCCESS_MESSAGE, unmarkItem);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Unmark command)  index is out of bounds\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            feedbackToUser \u003d FAIL_MESSAGE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final double MAX_BUDGET \u003d 5000;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final double MIN_BUDGET \u003d 0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Creates a new budget object with the smallest allowable amount."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        amount \u003d MIN_BUDGET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Sets the budget based on user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param amount The user supplied amount."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @return The correct budget amount in case the user-specified amount is too high or negative."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public double setBudget(double amount) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        amount \u003d Math.min(amount, MAX_BUDGET);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assert amount \u003c\u003d MAX_BUDGET : \"Amount should not be greater than 5000\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        amount \u003d Math.max(amount, MIN_BUDGET);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        assert amount \u003e\u003d MIN_BUDGET : \"Amount should not be negative\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Calculates the remaining budget based on the total cost of items."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param totalCost Total cost of items."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return The remaining budget."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public double getRemainingBudget(double totalCost) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return amount - totalCost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void resetBudget() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        amount \u003d MIN_BUDGET;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 33,
      "kokjoon97": 6,
      "Shannonwje": 2,
      "trishaangelica": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private double price;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private int quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private boolean isBought;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String BOUGHT \u003d \"B\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static final String NOT_BOUGHT \u003d \"X\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    //@@author trishaangelica"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Constructs an Item object with the provided description and price."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param description Name of the object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param price Price of the object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param quantity Quantity of the object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item(String description,double price,int quantity) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.isBought \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Constructs an Item object with the provided description and price."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param description Name of the object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param price Price of the object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item(String description,double price) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        this.quantity \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        this.isBought \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    //@@author JLoh579"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Returns the price of the \u003ccode\u003eItem\u003c/code\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @return Price of the \u003ccode\u003eItem\u003c/code\u003e."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Sets the price of the \u003ccode\u003eItem\u003c/code\u003e to the value provided as argument."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param price The new price of the \u003ccode\u003eItem\u003c/code\u003e."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void setPrice(double price) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    //@@author jiajuinphoon"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    //@@author Shannonwje"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Returns the status of the item to tell if it is bought or not bought yet."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @return Status of the item."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (isBought) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            return BOUGHT;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            return NOT_BOUGHT;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void markAsBought() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        isBought \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public void unmarkAsBought() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        isBought \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description + String.format(\" $%.2f\", price) + \" qty: \" + quantity;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 11,
      "kokjoon97": 24,
      "Shannonwje": 30,
      "jiajuinphoon": 9,
      "-": 1,
      "trishaangelica": 35
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/ShoppingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.ui.CommandLineTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import java.util.LinkedHashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class ShoppingList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private ArrayList\u003cItem\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public ArrayList\u003cItem\u003e getList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Returns the size of the items ArrayList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @return Size of the items ArrayList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        return items.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    //@@author JLoh579"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Prints a table representing the shopping list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void showTableOfItems() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        CommandLineTable st \u003d new CommandLineTable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        st.setShowVerticalLines(true);//if false (default) then no vertical lines are shown"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        st.setHeaders(\"Item\", \"Price\", \"Qty\");//optional - if not used then there will be no header and horizontal lines"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        int bulletNum \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        String itemLine;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        for (Item item : items) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            itemLine \u003d bulletNum + \". [\" + item.getStatusIcon() + \"] \" + item.getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            st.addRow(itemLine, String.format(\"$%.2f\", item.getPrice()), String.valueOf(item.getQuantity()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            bulletNum++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        st.print();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Calculates and returns the total cost of the items in the shopping list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @return Total cost of items in shopping list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public double getTotalCost() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double totalCost \u003d 0.0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        for (Item item : items) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            totalCost +\u003d item.getPrice() * item.getQuantity();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return totalCost;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Clears all items from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        items.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Marks item in index as bought."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param index index of item to mark"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @return item that is marked"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item markAsBought(int index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (index \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Item itemBought \u003d items.get(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        itemBought.markAsBought();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return itemBought;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Returns the item at the specified index."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param index Index of the item requested."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return Item at the specified index."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item getItem(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return items.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Unmarks item in index as bought."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param index index of item to unmark"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @return item that is unmarked"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Item unmarkAsBought(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (index \u003e\u003d items.size()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        Item itemNotBought \u003d items.get(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        itemNotBought.unmarkAsBought();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        return itemNotBought;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Removes an item at the specified index."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * @param index Index of the item to be removed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void deleteItem(int index) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Item unwantedItem \u003d items.get(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        items.remove(unwantedItem);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Adds item to list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @param item Item to add."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * @throws NullPointerException If there is no description."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public void add(Item item) throws NullPointerException, NumberFormatException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(item);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (item.getDescription() \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Returns true if an equivalent item exists in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public boolean isSameItemDescription(String descriptionToCheck) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        for (Item i : items) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (i.getDescription().equals(descriptionToCheck)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                result \u003d true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JLoh579": 47,
      "kokjoon97": 29,
      "Shannonwje": 43,
      "jiajuinphoon": 10,
      "trishaangelica": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/CommandLineTable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author logicbig-reused"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "//Reused from https://www.logicbig.com/how-to/code-snippets/jcode-java-cmd-command-line-table.html with minor modifications"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandLineTable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String HORIZONTAL_SEP \u003d \"-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String verticalSep;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String joinSep;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String[] headers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString[]\u003e rows \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandLineTable() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setShowVerticalLines(false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setShowVerticalLines(boolean showVerticalLines) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        verticalSep \u003d showVerticalLines ? \"|\" : \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        joinSep \u003d showVerticalLines ? \"+\" : \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setHeaders(String... headers) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.headers \u003d headers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addRow(String... cells) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        rows.add(cells);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints table."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int[] maxWidths \u003d headers !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? Arrays.stream(headers).mapToInt(String::length).toArray() : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String[] cells : rows) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (maxWidths \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                maxWidths \u003d new int[cells.length];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            if (cells.length !\u003d maxWidths.length) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalArgumentException(\"Number of row-cells and headers should be consistent\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c cells.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                maxWidths[i] \u003d Math.max(maxWidths[i], cells[i].length());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (headers !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            printLine(maxWidths);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            printRow(headers, maxWidths);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            printLine(maxWidths);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String[] cells : rows) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            printRow(cells, maxWidths);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (headers !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            printLine(maxWidths);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void printLine(int[] columnWidths) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c columnWidths.length; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            String line \u003d String.join(\"\", Collections.nCopies(columnWidths[i]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    + verticalSep.length() + 1, HORIZONTAL_SEP));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.print(joinSep + line + (i \u003d\u003d columnWidths.length - 1 ? joinSep : \"\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void printRow(String[] cells, int[] maxWidths) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c cells.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            String s \u003d cells[i];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            String verStrTemp \u003d i \u003d\u003d cells.length - 1 ? verticalSep : \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.printf(\"%s %-\" + maxWidths[i] + \"s %s\", verticalSep, s, verStrTemp);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "} //@@author logicbig"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "trishaangelica": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author JLoh579"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String GREET_MESSAGE \u003d \"\\n      HELLO! I\u0027m SHOCO. Your digital shopping list!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String SHOCO_LOGO \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "              \"\\n                                         __\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n                                        /__\\\\\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n                                       /\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n        ______________________________/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |     |     |     |    |      /\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |____ |____ |____ |____|_____/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |     |     |     |    |    /\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |____ |____ |____ |____|___/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |     |     |     |    |  /\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |____ |____ |____ |____|_/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"       |____ |____ |____ |___ |/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"                               \\\\\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"                                \\\\\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"                                /\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"        _______________________/\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n          /\\\\              /\\\\\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n          \\\\/              \\\\/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            + \"\\n Type \u0027HELP\u0027 to know more about the features of SHOCO ^^\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.print(GREET_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(SHOCO_LOGO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Prints the goodbye message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void bidFarewell() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(\"BYE\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Reads a non-empty input from the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return non-empty input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        while (input.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            input \u003d input.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void printline(String str) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/utils/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author JLoh579"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " * Performs tasks of a low level of abstraction involved in saving and loading."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Writes the JSON string to a file. File is created if it does not already exist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param jsonStr String containing the data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param filename String representing the file that would store the data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static void writeFile(String jsonStr, String filename) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        File file \u003d new File(filename);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            // Split into smaller strings for memory efficiency"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            for (String lineStr : jsonStr.split(\"\\n\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                bufferedWriter.write(lineStr);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                bufferedWriter.newLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Reads data from a file. Returns null if the file does not exist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param filename String representing the file to be read from."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return A buffered reader object containing the data."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public static BufferedReader readFile(String filename) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        File file \u003d new File(filename);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        BufferedReader bufferedReader \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            bufferedReader \u003d new BufferedReader(new FileReader(filename));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return bufferedReader;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 62
    }
  },
  {
    "path": "src/main/java/seedu/duke/utils/LoadData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author JLoh579"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " * Performs reading tasks which are one level of abstraction below that of the Storage class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class LoadData {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String SHOPPING_LIST_FILENAME \u003d \"shoppinglist.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String BUDGET_FILENAME \u003d \"budget.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Returns a shopping list object based on stored data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return The object containing the shopping list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public ShoppingList readShoppingList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        BufferedReader bufferedReader \u003d FileUtil.readFile(SHOPPING_LIST_FILENAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        if (bufferedReader \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            return new ShoppingList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        Type shoppingListType \u003d new TypeToken\u003cShoppingList\u003e(){}.getType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        ShoppingList shoppingList \u003d gson.fromJson(bufferedReader, shoppingListType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        if (shoppingList \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            return new ShoppingList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return shoppingList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Returns a budget object based on stored data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return The object containing the budget."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public Budget readBudget() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        BufferedReader bufferedReader \u003d FileUtil.readFile(BUDGET_FILENAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        if (bufferedReader \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            return new Budget();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        Type budgetType \u003d new TypeToken\u003cBudget\u003e(){}.getType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        Budget budget \u003d gson.fromJson(bufferedReader, budgetType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        if (budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            return new Budget();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/utils/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.commands.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.commands.DisplayCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.MarkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ResetBudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.UnmarkCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private static final String regex \u003d \"^(?\u003cindex\u003e[\\\\d ]*[^a-zA-Z\\\\/])\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"|i\\\\/(?\u003cdescription\u003e(?\u003d)(?:(?!p\\\\/)(?!q\\\\/).)+)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"|p\\\\/(?\u003cprice\u003e(?\u003d)(?:(?!i\\\\/)(?!q\\\\/).)+)+\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            + \"|q\\\\/(?\u003cquantity\u003e(?\u003d)(?:(?!p\\\\/)(?!i\\\\/).)+)|$;\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private static final Pattern EDIT_ITEM_ARGS_FORMAT \u003d Pattern.compile(regex, Pattern.MULTILINE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private static Command newCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String[] commandAndArgs \u003d splitCommandAndArgs(userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String commandWord \u003d commandAndArgs[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String arguments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            arguments \u003d commandAndArgs[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            arguments \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        //@@author jiajuinphoon"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            createAddCommand(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        //author"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        //@@author Shannonwje"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        case MarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            createMarkCommand(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        case UnmarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            createUnmarkCommand(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        //@@author trishaangelica"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            createEditCommand(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        //@@author kokjoon97"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            createDeleteCommand(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            createFindCommand(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        case SetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            createSetBudgetCommand(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        //@@author JLoh579"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        case DisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            createDisplayCommand(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            createClearCommand(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        //@@author Shannonwje"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        case ResetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            createResetBudgetCommand(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        //JLoh579"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            createExitCommand(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        //@@author trishaangelica"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            createHelpCommand(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            // @@author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assert newCommand !\u003d null : \"newCommand should have been initialised\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        return newCommand;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Splits Command and Args from full input string."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param userInput full input string."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String[] splitCommandAndArgs(String userInput) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return userInput.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    //@@author jiajuinphoon"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    private void createAddCommand(String arguments) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            final boolean iPresent \u003d arguments.contains(\"i/\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            final boolean pPresent \u003d arguments.contains(\"p/\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            final boolean qPresent \u003d arguments.contains(\"q/\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            boolean delimiterPresent \u003d iPresent | pPresent | qPresent;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            boolean hasSingleDelimiter \u003d singleDelimiterChecker(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            String[] args \u003d splitArgsForAddCommand(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            String prices;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            String quantity;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            if (delimiterPresent \u0026\u0026 hasSingleDelimiter) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                description \u003d args[0];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                prices \u003d args[1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                quantity \u003d args[2];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                if (description !\u003d null \u0026\u0026 description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            + \"|| Example: ADD i/apples p/9.90 q/9\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    if (prices \u003d\u003d null \u0026\u0026 quantity !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        int quantityInInteger \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        if (quantityInInteger \u003c 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"|| Example: ADD i/apples p/9.90 q/9\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            newCommand \u003d new AddCommand(description, 0.0, quantityInInteger);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    } else if (prices !\u003d null \u0026\u0026 quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        double price \u003d Double.parseDouble(prices);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        if (price \u003c 0.0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"|| Example: ADD i/apples p/9.90 q/9\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            newCommand \u003d new AddCommand(description, price,1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    } else if (prices \u003d\u003d null \u0026\u0026 quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        newCommand \u003d new AddCommand(description,0.0,1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        double price \u003d Double.parseDouble(prices);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        int quantityInInteger \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        if (quantityInInteger \u003c 0 || price \u003c 0.0) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + System.lineSeparator()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                                    + \"|| Example: ADD i/apples p/9.90 q/9\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                            newCommand \u003d new AddCommand(description, price, quantityInInteger);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                        + \"|| Example: ADD i/apples p/9.90 q/9\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        } catch (NullPointerException | StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                | NumberFormatException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \"|| Example: ADD i/apples p/9.90 q/9\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    private String[] splitArgsForAddCommand(String arguments) throws NullPointerException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String[] argsArray \u003d new String[]{};"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String descriptionDelimiter \u003d \"i/\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String priceDelimiter \u003d \"p/\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String quantityDelimiter \u003d \"q/\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String itemPrice;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String itemDescription;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String itemQuantity;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        int buffer \u003d 2;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        int indexOfiPrefix;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        int indexOfpPrefix;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        int indexOfqPrefix;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        boolean descriptionPresent \u003d arguments.contains(descriptionDelimiter);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        boolean pricePresent \u003d arguments.contains(priceDelimiter);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        boolean quantityPresent \u003d arguments.contains(quantityDelimiter);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String args \u003d arguments.trim();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            if (descriptionPresent \u0026\u0026 !pricePresent \u0026\u0026 !quantityPresent) { //eg args: ADD i/apple"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                indexOfiPrefix \u003d args.indexOf(descriptionDelimiter);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                itemDescription \u003d args.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                argsArray \u003d new String[]{itemDescription, null, null};"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            } else if (descriptionPresent \u0026\u0026 pricePresent \u0026\u0026 !quantityPresent) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                indexOfiPrefix \u003d args.indexOf(descriptionDelimiter);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                indexOfpPrefix \u003d args.indexOf(priceDelimiter);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                if (indexOfpPrefix \u003c indexOfiPrefix) { //e.g args: ADD p/4.50 i/apple"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemPrice \u003d args.substring(indexOfpPrefix + buffer, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } else { //e.g args: ADD i/apple p/4.50"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer, indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemPrice \u003d args.substring(indexOfpPrefix + buffer).trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                argsArray \u003d new String[]{itemDescription, itemPrice, null};"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            } else if (descriptionPresent \u0026\u0026 !pricePresent \u0026\u0026 quantityPresent) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                indexOfiPrefix \u003d args.indexOf(descriptionDelimiter);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                indexOfqPrefix \u003d args.indexOf(quantityDelimiter);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                if (indexOfqPrefix \u003c indexOfiPrefix) { //e.g args: ADD q/1 i/apple"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemQuantity \u003d args.substring(indexOfqPrefix + buffer, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } else { //e.g args: ADD i/apple q/1"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer, indexOfqPrefix).trim();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemQuantity \u003d args.substring(indexOfqPrefix + buffer).trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                argsArray \u003d new String[]{itemDescription, null, itemQuantity};"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            } else if (descriptionPresent \u0026\u0026 pricePresent \u0026\u0026 quantityPresent) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                indexOfiPrefix \u003d args.indexOf(descriptionDelimiter);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                indexOfpPrefix \u003d args.indexOf(priceDelimiter);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                indexOfqPrefix \u003d args.indexOf(quantityDelimiter);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                if (indexOfqPrefix \u003c indexOfpPrefix \u0026\u0026 indexOfpPrefix \u003c indexOfiPrefix) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    //e.g args: ADD q/2 p/4.50 i/apple"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemPrice \u003d args.substring(indexOfpPrefix + buffer, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemQuantity \u003d args.substring(indexOfqPrefix + buffer, indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } else if (indexOfpPrefix \u003c indexOfqPrefix \u0026\u0026 indexOfqPrefix \u003c indexOfiPrefix) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    //e.g args: ADD p/2.5 q/4 i/apple"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer).trim();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemPrice \u003d args.substring(indexOfpPrefix + buffer, indexOfqPrefix).trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemQuantity \u003d args.substring(indexOfqPrefix + buffer, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } else if (indexOfpPrefix \u003c indexOfiPrefix \u0026\u0026 indexOfiPrefix \u003c indexOfqPrefix) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    //e.g args: ADD p/2.5 i/apple q/4"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer,indexOfqPrefix).trim();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemPrice \u003d arguments.substring(indexOfpPrefix + buffer, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemQuantity \u003d args.substring(indexOfqPrefix + buffer).trim();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } else if (indexOfqPrefix \u003c indexOfiPrefix \u0026\u0026 indexOfiPrefix \u003c indexOfpPrefix) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    //e.g args: ADD q/2 i/apple p/4.50"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer,indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemPrice \u003d args.substring(indexOfpPrefix + buffer).trim();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemQuantity \u003d args.substring(indexOfqPrefix + buffer, indexOfiPrefix).trim();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } else if (indexOfiPrefix \u003c indexOfqPrefix \u0026\u0026 indexOfqPrefix \u003c indexOfpPrefix) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    //e.g args: ADD i/apple q/4 p/2.5"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer,indexOfqPrefix).trim();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemQuantity \u003d args.substring(indexOfqPrefix + buffer, indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemPrice \u003d args.substring(indexOfpPrefix + buffer).trim();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                } else { //e.g args: ADD i/apple p/4.50 q/2"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemDescription \u003d args.substring(indexOfiPrefix + buffer, indexOfpPrefix).trim();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemPrice \u003d args.substring(indexOfpPrefix + buffer, indexOfqPrefix).trim();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    itemQuantity \u003d args.substring(indexOfqPrefix + buffer).trim();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                argsArray \u003d new String[]{itemDescription, itemPrice, itemQuantity};"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            } else if (!descriptionPresent \u0026\u0026 pricePresent || quantityPresent) { //ADD p/3.50"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                argsArray \u003d new String[]{null, null, null};"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            if (argsArray[0] \u003d\u003d null \u0026\u0026 argsArray[1] \u003d\u003d null \u0026\u0026 argsArray[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                    + \"|| Example: ADD i/apples p/9.90 q/9\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        return argsArray;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    } //@@author"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    //@@author Shannonwje"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Initialises the MarkCommand."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private void createMarkCommand(String arguments) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            String[] words \u003d arguments.trim().split(\" \");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                int index \u003d Integer.parseInt(words[0]) - 1;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                newCommand \u003d new MarkCommand(index);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                LOGGER.log(Level.WARNING, \"(Mark command) Rejecting user command, too many or no arguments.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                newCommand \u003d new IncorrectCommand(\"Please provide a single numerical index number!\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Mark command) Rejecting user command, invalid command format entered.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            newCommand \u003d new IncorrectCommand(\"Please provide a single numerical index number!\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Initialises the Unmark Command."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private void createUnmarkCommand(String arguments) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            String[] words \u003d arguments.trim().split(\" \");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                int index \u003d Integer.parseInt(words[0]) - 1;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                newCommand \u003d new UnmarkCommand(index);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                LOGGER.log(Level.WARNING,"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                        \"(Unmark command) Rejecting user command, too many or no arguments.\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                newCommand \u003d new IncorrectCommand(\"Please provide a single numerical index number!\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    \"(Unmark command) Rejecting user command, invalid command format entered.\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            newCommand \u003d new IncorrectCommand(\"Please provide a single numerical index number!\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    //@@author trishaangelica"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the EditCommand."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createEditCommand(String arguments) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            final Matcher matcher \u003d EDIT_ITEM_ARGS_FORMAT.matcher(arguments.trim());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            String[] newValues;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            final boolean iPresent \u003d arguments.contains(\"i/\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            final boolean pPresent \u003d arguments.contains(\"p/\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            final boolean qPresent \u003d arguments.contains(\"q/\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            boolean delimiterPresent \u003d iPresent | pPresent | qPresent;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            boolean hasSingleDelimiter \u003d singleDelimiterChecker(arguments);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newValues \u003d splitArgsForEditCommand(matcher);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            boolean validValues \u003d validValuesChecker(newValues, iPresent, pPresent, qPresent);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (delimiterPresent \u0026\u0026 hasSingleDelimiter \u0026\u0026 validValues) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                String newItemDescription \u003d null;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                String newItemPrice \u003d null;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                String newItemQuantity \u003d null;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                if (newValues[1] !\u003d null) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    newItemDescription \u003d newValues[1].trim();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                if (newValues[2] !\u003d null) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    newItemPrice \u003d newValues[2].trim();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                if (newValues[3] !\u003d null) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    newItemQuantity \u003d newValues[3].trim();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                int itemIndex \u003d Integer.parseInt(newValues[0].trim());"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                newCommand \u003d new EditCommand(itemIndex, newItemDescription, newItemPrice, newItemQuantity);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                LOGGER.log(Level.WARNING, \"(Edit command) Rejecting user command, invalid command format entered.\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                newCommand \u003d new IncorrectCommand(EditCommand.MESSAGE_FAILURE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } catch (NullPointerException | NumberFormatException e) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new IncorrectCommand(EditCommand.MESSAGE_FAILURE_INCORRECT_FORMAT);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Checks the input string for duplicate delimiter."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param stringToCheck full input string."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @return true if there is no duplicate delimiter found."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private boolean singleDelimiterChecker(String stringToCheck) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        boolean result;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String[] splitByDescription \u003d stringToCheck.split(\"i/\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String[] splitByPrice \u003d stringToCheck.split(\"p/\");"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String[] splitByQuantity \u003d stringToCheck.split(\"q/\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int countI \u003d splitByDescription.length - 1;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int countP \u003d splitByPrice.length - 1;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        int countQ \u003d splitByQuantity.length - 1;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        result \u003d countI \u003c 2 \u0026\u0026 countP \u003c 2 \u0026\u0026 countQ \u003c 2;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Split arguments for Edit Command."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param matcher matcher object to match the entire input sequence against the regex pattern."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @return an array of the found matches."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private String[] splitArgsForEditCommand(Matcher matcher) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String indexOfItem \u003d null;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String itemDescription \u003d null;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String itemPrice \u003d null;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String itemQuantity \u003d null;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (matcher.group(\"index\") !\u003d null) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                indexOfItem \u003d matcher.group(\"index\").trim();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (matcher.group(\"description\") !\u003d null) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemDescription \u003d matcher.group(\"description\").trim();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (matcher.group(\"price\") !\u003d null) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                itemPrice \u003d matcher.group(\"price\").trim();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (matcher.group(\"quantity\") !\u003d null) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                if (matcher.group(0).contains(\"-\")) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    throw new NumberFormatException();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    itemQuantity \u003d matcher.group(\"quantity\").trim();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return new String[]{indexOfItem, itemDescription, itemPrice, itemQuantity};"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Validates the previously found matches."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * E.g if \"i/\" was present in input sequence, it\u0027s found match should be a value and not null."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param arrToCheck         Array that contains the found matches."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param descriptionPresent indicator for presence of \"i/\" in input string."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param pricePresent       indicator for presence of \"p/\" in input string."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param quantityPresent    indicator for presence of \"q/\" in input string."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @return true if all values are valid."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private boolean validValuesChecker(String[] arrToCheck, Boolean descriptionPresent, Boolean pricePresent,"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                                       Boolean quantityPresent) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        boolean validIndex \u003d false;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        boolean validDescription \u003d false;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        boolean validPrice \u003d false;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        boolean validQuantity \u003d false;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (arrToCheck[0] !\u003d null) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            validIndex \u003d true;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (descriptionPresent) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (arrToCheck[1] !\u003d null) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                validDescription \u003d true;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (!descriptionPresent) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (arrToCheck[1] \u003d\u003d null) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                validDescription \u003d true;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (pricePresent) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (arrToCheck[2] !\u003d null) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                if (Double.parseDouble(arrToCheck[2]) \u003e 0) {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    validPrice \u003d true;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (!pricePresent) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (arrToCheck[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                validPrice \u003d true;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (quantityPresent) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (arrToCheck[3] !\u003d null) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                if (Integer.parseInt(arrToCheck[3]) \u003e 0) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    validQuantity \u003d true;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (!quantityPresent) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            if (arrToCheck[3] \u003d\u003d null) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                validQuantity \u003d true;"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return validIndex \u0026\u0026 validDescription \u0026\u0026 validPrice \u0026\u0026 validQuantity;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Initialises the DeleteCommand."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private void createDeleteCommand(String arguments) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            int index \u003d Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Delete command) Rejecting user command, \""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"user did not enter a number for index.\");"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Please enter an index\""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Example: DEL 3\");"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    //@@author JLoh579"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Initialises the ListCommand."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private void createDisplayCommand(String arguments) {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        if (arguments !\u003d null) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                    + \"Invalid command.\""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                    + \"To display your shopping list, just input \\\"DISPLAY\\\".\");"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            newCommand \u003d new DisplayCommand();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Initialises the ClearCommand."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private void createClearCommand(String arguments) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        if (arguments !\u003d null) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                    + \"Invalid command.\""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "                    + \"To clear your shopping list, just input \\\"CLEAR\\\".\");"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "            newCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     * Initialises the SetBudgetCommand."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private void createSetBudgetCommand(String arguments) {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            if (!arguments.contains(\"b/\")) {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                LOGGER.log(Level.WARNING, \"(Set budget) Rejecting user command, no \\\"b/\\\" substring.\");"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        + \"Please enter the amount after the \\\"b/\\\" divider\""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                        + \"Example: SET b/300\");"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                assert arguments.indexOf(\"b/\") !\u003d -1 : \"Substring \\\"b/\\\" should be present\";"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                double amount \u003d Double.parseDouble(arguments.trim().substring(2));"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                newCommand \u003d new SetBudgetCommand(amount);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } catch (NumberFormatException | NullPointerException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.WARNING, \"(Set budget) Rejecting user command, no number was specified for budget.\");"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Please enter an amount for your budget\""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Example: SET b/300\");"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    //@@author Shannonwje"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     * Initialises the ResetBudgetCommand."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    private void createResetBudgetCommand(String arguments) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        if (arguments !\u003d null) {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            LOGGER.log(Level.WARNING,"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    \"(Reset Budget command) Rejecting user command, should not have arguments.\");"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    + \"Invalid command.\""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                    + \"To reset your budget, just input \\\"RES\\\".\");"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "            newCommand \u003d new ResetBudgetCommand();"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the HelpCommand."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createHelpCommand(String arguments) {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (arguments !\u003d null) {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            LOGGER.log(Level.WARNING,"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    \"(Help command) Rejecting user command, should not have arguments.\");"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"Invalid command.\""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"For the help command, just input \\\"HELP\\\".\");"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        }"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Initialises the ExitCommand."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void createExitCommand(String arguments) {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        if (arguments !\u003d null) {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            LOGGER.log(Level.WARNING,"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    \"(Exit command) Rejecting user command, should not have arguments.\");"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"Invalid command.\""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                    + \"To exit SHOCO, just input \\\"BYE\\\".\");"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            newCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author kokjoon97"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    private void createFindCommand(String arguments) {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        if (arguments \u003d\u003d null) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new IncorrectCommand(System.lineSeparator()"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Please enter a keyword after FIND\""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + System.lineSeparator()"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                    + \"Example: FIND apples\");"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO, \"(Find command) User did not supply keyword for FIND\");"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            assert arguments !\u003d null;"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            LOGGER.log(Level.INFO, \"(Find command) User supplied keyword: \" + arguments);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "            newCommand \u003d new FindCommand(arguments.trim());"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 48,
      "kokjoon97": 85,
      "Shannonwje": 80,
      "jiajuinphoon": 227,
      "-": 1,
      "trishaangelica": 268
    }
  },
  {
    "path": "src/main/java/seedu/duke/utils/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author JLoh579"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " * Main class which handles the storage and retrieval of data from disk."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private WriteData writeData \u003d new WriteData();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private LoadData loadData \u003d new LoadData();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Saves the shopping list and budget information onto disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param shoppingList The object containing the shopping list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param budget The object containing the budget."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void saveAll(ShoppingList shoppingList, Budget budget) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        writeData.writeShoppingList(shoppingList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        writeData.writeBudget(budget);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Loads the shopping list into memory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return A shopping list object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public ShoppingList loadShoppingList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return loadData.readShoppingList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Loads the budget into memory."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @return A budget object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public Budget loadBudget() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        return loadData.readBudget();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/utils/WriteData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author JLoh579"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " * Performs writing tasks which are one level of abstraction below that of the Storage class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class WriteData {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String SHOPPING_LIST_FILENAME \u003d \"shoppinglist.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private static final String BUDGET_FILENAME \u003d \"budget.json\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Saves the shopping list in JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param shoppingList The object containing the shopping list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void writeShoppingList(ShoppingList shoppingList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        String jsonStr \u003d gson.toJson(shoppingList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        FileUtil.writeFile(jsonStr, SHOPPING_LIST_FILENAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * Saves the budget in JSON format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     * @param budget The object containing the budget."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void writeBudget(Budget budget) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        String jsonStr \u003d gson.toJson(budget);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        FileUtil.writeFile(jsonStr, BUDGET_FILENAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "// @@author jiajuinphoon"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    Budget myBudget \u003d new Budget();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    void testAdd_ItemDescriptionOnly_Success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command \u003d new AddCommand(\"apple\", 0.0, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String expectedFeedback \u003d System.lineSeparator() + \"Added this item: \" + items.getItem(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    void testAdd_ItemPriceAndDescription_Success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command \u003d new AddCommand(\"banana\", 5.50,1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String expectedFeedback \u003d System.lineSeparator() + \"Added this item: \" + items.getItem(0)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    public void testAdd_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String price \u003d \"5.00\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        double prices \u003d Double.parseDouble(price);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        int quantity \u003d Integer.parseInt(\"1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command \u003d new AddCommand(null,prices,quantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        String expectedFeedback3 \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                + \"Error! Description of an item cannot be empty.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "                + \"\\nExample: ADD i/apple p/4.50 q/2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "        assertEquals(expectedFeedback3, command.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiajuinphoon": 54
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    ShoppingList things;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    Item firstAddition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        things \u003d new ShoppingList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        firstAddition \u003d new Item(\"apple\",3.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        things.add(firstAddition);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_negativeIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new DeleteCommand(-1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(things,null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + \"Please enter a valid index within the bounds\", command.feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_zeroIndex() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(things,null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + \"Please enter a valid index within the bounds\", command.feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_tooLargeIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new DeleteCommand(100);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(things,null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(System.lineSeparator()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "                + \"Please enter a valid index within the bounds\",command.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 54
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author trishaangelica"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.data.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    Budget myBudget \u003d new Budget();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    Command command \u003d new Command();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    void testEdit_ItemDescriptionOnly_Success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0,1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0,1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50,1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(1, \"apples\", null, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback \u003d  String.format(EditCommand.MESSAGE_SUCCESS, items.getList().get(0).toString())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    void testEdit_ItemPriceOnly_Success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0,1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0,1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50,1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(2, null, \"3.5\", null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, myBudget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback1 \u003d  String.format(EditCommand.MESSAGE_SUCCESS, items.getList().get(1).toString())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedFeedback1, command.feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    void testEdit_ItemQuantityOnly_Success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0,1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0,1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50,1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(2, null, null, \"2\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback1 \u003d  String.format(EditCommand.MESSAGE_SUCCESS, items.getList().get(1).toString())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedFeedback1, command.feedbackToUser);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    void testEdit_ItemPriceAndDescription_Success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(3, \"banana\", \"5.00\",null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0,1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0,1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50,1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(3, \"cherry\", \"5.00\",\"1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback2 \u003d  String.format(EditCommand.MESSAGE_SUCCESS, items.getList().get(2).toString())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedFeedback2, command.feedbackToUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void testEdit_ItemToEditNotInList_exceptionThrown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0,1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0,1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50,1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(0, \"banana\", \"5.00\",\"2\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback3 \u003d EditCommand.MESSAGE_FAILURE_NOT_IN_LIST;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedFeedback3, command.feedbackToUser);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void testEdit_ItemPriceIncorrectFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0,1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0,1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50,1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(1, \"cherry\", \"QWERTY\",\"3\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback3 \u003d EditCommand.MESSAGE_FAILURE_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedFeedback3, command.feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void testEdit_ItemQuantityIncorrectFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0,1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0,1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50,1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(1, \"lollipop\", \"3\",\"QWERTY\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback3 \u003d EditCommand.MESSAGE_FAILURE_INCORRECT_FORMAT;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedFeedback3, command.feedbackToUser);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    void testEdit_ItemDuplicateDescription_FailureMessage() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(3, \"banana\", \"5.00\",null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"apple\", 2.0,1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"donut\", 3.0,1));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        items.add(new Item(\"banana\", 4.50,1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command \u003d new EditCommand(3, \"banana\", \"5.00\",\"1\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.setData(items,myBudget);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        String expectedFeedback2 \u003d  String.format(EditCommand.MESSAGE_FAILURE_DUPLICATE_DESCRIPTION,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                items.getList().get(2).toString())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + String.format(\"\\nNOTE: You have exceeded your budget by %.2f\",items.getTotalCost());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedFeedback2, command.feedbackToUser);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "trishaangelica": 138
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "//@@author kokjoon97"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    ShoppingList testList \u003d new ShoppingList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        testList.clearList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        testList.add(new Item(\"apple\",0.0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_nonMatchingKeyword() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new FindCommand(\"zzzzzzz\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(testList,null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(\"Sorry, no results could be found!\", command.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_nonMatchingCaseUppercaseKeyword() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new FindCommand(\"APPLE\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(testList,null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(\"\", command.feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_matchingLowercaseKeyword() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new FindCommand(\"apple\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(testList,null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(\"\",command.feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    void execute_nonMatchingRandomCaseKeyword() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        Command command \u003d new FindCommand(\"aPpLe\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.setData(testList,null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        assertEquals(\"\", command.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 52
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/MarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "//@@author Shannonwje"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class MarkCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    Command command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"banana\", 4.5));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testMark_unmarkedItem_Success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new MarkCommand(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + \"Yes! I\u0027ve marked this item as bought:\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + System.lineSeparator() + items.getList().get(1).toString()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testMark_outOfLimitIndex_Success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new MarkCommand(10);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback1 \u003d MarkCommand.FAIL_MESSAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        assertEquals(expectedFeedback1, command.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testMark_negativeIndex_Success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new MarkCommand(-5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback2 \u003d MarkCommand.FAIL_MESSAGE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        assertEquals(expectedFeedback2, command.feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 59
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/UnmarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "//@@author Shannonwje"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import seedu.duke.data.ShoppingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "public class UnmarkCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    ShoppingList items \u003d new ShoppingList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    Command command \u003d new Command();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"apple\", 2.0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"donut\", 3.0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.add(new Item(\"banana\", 4.5));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void tearDown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        items.clearList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testUnmark_MarkedItem_Success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new MarkCommand(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new UnmarkCommand(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + \"Yes! I\u0027ve unmarked this item as bought:\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + System.lineSeparator() + items.getList().get(1).toString()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        assertEquals(expectedFeedback, command.feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testUnmark_outOfLimitIndex_Success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new UnmarkCommand(10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback1 \u003d UnmarkCommand.FAIL_MESSAGE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        assertEquals(expectedFeedback1, command.feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    void testUnmark_negativeIndex_Success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command \u003d new UnmarkCommand(-5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.setData(items, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        String expectedFeedback2 \u003d UnmarkCommand.FAIL_MESSAGE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "        assertEquals(expectedFeedback2, command.feedbackToUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shannonwje": 66
    }
  },
  {
    "path": "src/test/java/seedu/duke/data/BudgetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    private Budget testBudget \u003d new Budget();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void getRemaining_zeroTotalCost_remainingEqualsBudget() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        testBudget.setBudget(50);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double totalCost \u003d 0.0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(testBudget.getAmount(),testBudget.getRemainingBudget(totalCost));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    public void getRemaining_totalCostExceedsBudget_remainingIsNegative() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        testBudget.setBudget(50);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double totalCost \u003d 60;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        double expectedResult \u003d -10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedResult,testBudget.getRemainingBudget(totalCost));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void setBudget_negativeInput_setToZero() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        testBudget.setBudget(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double testAmount \u003d -100;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double expectedResult \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        testBudget.setBudget(testAmount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedResult,testBudget.getAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    public void setBudget_tooLargeInput_setToMax() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "        testBudget.setBudget(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double testAmount \u003d 6000;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        double expectedResult \u003d 5000;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "        testBudget.setBudget(testAmount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertEquals(expectedResult,testBudget.getAmount());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JLoh579"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 26,
      "kokjoon97": 14,
      "trishaangelica": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/utils/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "package seedu.duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "import seedu.duke.commands.DisplayCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import seedu.duke.commands.ResetBudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author trishaangelica"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_unknownCommandWord_returnsHelp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"unknownCommandWord arguments\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for 0-argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_helpCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"HELP\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, HelpCommand.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_clearCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"CLEAR\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, ClearCommand.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_listCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"DISPLAY\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, DisplayCommand.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"BYE\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, ExitCommand.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_resetBudgetCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String input \u003d \"RES\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertCommandType(input, ResetBudgetCommand.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for single index argument commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_deleteCommandNoArgs_errorMessage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"DEL\", \"DEL \"};"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Please enter an index\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Example: DEL 3\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_deleteCommandArgsIsNotSingleNumber_errorMessage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"DEL notAnumber \", \"DEL 8*wh12\", \"DEL 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Please enter an index\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Example: DEL 3\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_markCommandNoArgs_errorMessage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"MARK\", \"MARK \"};"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d \"Please provide a single numerical index number!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_markCommandArgsIsNotSingleNumber_errorMessage() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"MARK notAnumber \", \"MARK 8*wh12\", \"MARK 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d \"Please provide a single numerical index number!\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_unMarkCommandNoArgs_errorMessage() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"UNMARK\", \"UNMARK \"};"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d \"Please provide a single numerical index number!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_unMarkCommandArgsIsNotSingleNumber_errorMessage() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"UNMARK notAnumber \", \"UNMARK 8*wh12\", \"UNMARK 1 2 3 4 5\"};"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d \"Please provide a single numerical index number!\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for add item command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_addCommandNoDescription_errorMessage() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"ADD p/0.0 q/1\", \"ADD p/2.5 q/1\", \"ADD p/2.50 q/2\"};"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"|| Example: ADD i/apples p/9.90 q/9\"; "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_addCommandIncorrectPriceFormat_errorMessage() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"ADD i/apple p/8*wh12 q/2\", \"ADD i/apple p/ q/2\"};"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[DESCRIPTION], \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"p/[PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"|| Example: ADD i/apples p/9.90 q/9\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for edit item command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_editCommandInvalidArgs_errorMessage() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"EDIT\", \"EDIT \", \"EDIT wrong args format\", \"EDIT i/apple\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            \"EDIT 1 i/\", \"EDIT 1 p/\", \"EDIT 1 q/\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            \"EDIT 1 i/p/q\", \"EDIT 1 i/p/\", \"EDIT 1 i/p/q\", \"EDIT 1 i/p/2.50\", \"EDIT 1 p/q/5\", \"EDIT 1 p/20/q/\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            \"EDIT 1 i/apple p/\", \"EDIT 1 i/apple p/WERT\", \"EDIT 1 i/apple p/23 q/QWERTY\" };"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Oops! Invalid Command. Check if these are met:\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Index of item must be a positive number.\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Price of an item should be in positive numerical form.\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - Quantity of an item should be in positive numerical form (no decimals).\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \" - If \u0027i/\u0027, \u0027p/\u0027 or \u0027q/\u0027 is present, i/[NEW DESCRIPTION], \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"p/[NEW PRICE] or q/[QUANTITY] must be present.\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"|| Example: EDIT 2 i/lollipop p/2.50 q/5\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Tests for add item command \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    public void parse_setBudgetCommandIncorrectFormat_errorMessage() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String[] inputs \u003d {\"SET\", \"SET \", \"SET b/ 8*wh12\", \"SET b/\"};"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final String resultMessage \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Please enter an amount for your budget\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "                + \"Example: SET b/300\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        parseAndAssertIncorrectWithMessage(resultMessage, inputs);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Utility methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private void parseAndAssertIncorrectWithMessage(String resultMessage, String[] emptyInputs) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        for (String input : emptyInputs) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            final IncorrectCommand result \u003d parseAndAssertCommandType(input, IncorrectCommand.class);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "            assertEquals(result.feedbackToUser, resultMessage);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * Parses input and asserts the class/type of the returned command object."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param input                to be parsed"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     * @return the parsed command object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    private \u003cT extends Command\u003e T parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        final Command result \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "        return (T) result;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 1,
      "Shannonwje": 1,
      "trishaangelica": 233
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD wrong args format"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD p/2.50"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "ADD i/apple p/8*wh12"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "ADD i/apple p/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD i/apple p/2.45 q/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "ADD i/apple p/2.45 q/1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "ADD i/banana p/3.00 q/3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajuinphoon"
        },
        "content": "ADD i/cherry p/5.60 q/2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "FIND CHERRY"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "FIND ChErRY"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "FIND cHErry"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "FIND cherry"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "FIND nothing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SET"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SET b/ 8*wh12"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SET b/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "SET b/500.00"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT wrong args format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT i/tomato p/3.40"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/p/q/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/apple i/apple"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/lollipops i/lollipop"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 p/QWERT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 p/2 i/banana"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 2 i/apple"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 i/lollipops p/2.50 q/5"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 p/1"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 q/4"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "EDIT 1 q/4 p/5.0 i/candies"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "MARK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "MARK 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "MARK 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "UNMARK"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "UNMARK 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "UNMARK notAnumber"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "UNMARK 8*wh12"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "UNMARK 1 2 3 4 5"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "DEL notAnumber"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "DEL 8*wh12"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JLoh579"
        },
        "content": "DEL 1 2 3 4 5"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "DEL 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "DEL"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "unknownCommandWord arguments"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "DISPLAY"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "RES"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "CLEAR"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "HELP 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "HELP"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "BYE 1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shannonwje"
        },
        "content": "BYE"
      }
    ],
    "authorContributionMap": {
      "JLoh579": 10,
      "kokjoon97": 5,
      "Shannonwje": 1,
      "jiajuinphoon": 2,
      "trishaangelica": 34
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kokjoon97"
        },
        "content": "    \u0027dir /b duke-0.0.1.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "kokjoon97": 1,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "trishaangelica"
        },
        "content": "cd \"../build/libs/\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "trishaangelica": 1
    }
  }
]
