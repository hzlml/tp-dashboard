[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "group \u0027jikan\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    mainClassName \u003d \"jikan.Jikan\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    archiveBaseName \u003d \"jikan\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 3,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ng Siu Hian | [Github](https://github.com/siuhian) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ananda Lye | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Beatrice Chan | [Github](https://github.com/btricec) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nigelle Leo | [Github](https://github.com/nigellenl) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Riccardo Di Maio | [Github](https://github.com/rdimaio) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 2,
      "rdimaio": 1,
      "siuhian": 1,
      "nigellenl": 1,
      "-": 4,
      "ananda-lye": 1
    }
  },
  {
    "path": "src/main/java/jikan/Jikan.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * Represents the Jikan time tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Jikan {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Constant file path of data file. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static final String DATA_FILE_PATH \u003d \"data/data.csv\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Storage object for data file. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Activity list to store current tasks in. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static ActivityList activityList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Ui to handle printing. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Parser to parse commands. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Creates ActivityList and loads data from data file if the data file previously existed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Otherwise, an empty task list is initialized."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static void createActivityList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (storage.loadFile()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                activityList \u003d new ActivityList(storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                activityList.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            System.out.println(\"Error loading/creating data file.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Main entry-point for the Jikan application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage \u003d new Storage(DATA_FILE_PATH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        createActivityList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        parser.parseUserCommands(in, activityList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 33,
      "btricec": 1,
      "siuhian": 11,
      "nigellenl": 1,
      "ananda-lye": 12
    }
  },
  {
    "path": "src/main/java/jikan/Log.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents a logger object to log user commands and outcomes to a logfile."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class Log {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static Logger logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static SimpleFormatter formatterTxt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public String logFilePath \u003d \"data/LogRecord.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static File logFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Constructor for a new logger."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Log() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        logger \u003d Logger.getLogger(Log.class.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        consoleHandler.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(\"data/LogRecord.txt\", true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        formatterTxt \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        fileHandler.setFormatter(formatterTxt);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new logger."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Log() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger \u003d Logger.getLogger(Log.class.getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        consoleHandler.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logFile \u003d new File(logFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!logFile.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // Create file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                logFile.getParentFile().mkdirs(); // Create data directory (does nothing if directory already exists)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                logFile.createNewFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        FileHandler fileHandler \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            fileHandler \u003d new FileHandler(\"data/LogRecord.txt\", true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "        formatterTxt \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileHandler.setFormatter(formatterTxt);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "        logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at FINE level."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the FINE message to be logged"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public void makeFineLog(String message) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.FINE, message);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at INFO level."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the INFO message to be logged"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public void makeInfoLog(String message) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.INFO, message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at WARNING level."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the WARNING warning message to be logged"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public void makeWarningLog(String message) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.WARNING, message);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 35,
      "rdimaio": 47,
      "ananda-lye": 21
    }
  },
  {
    "path": "src/main/java/jikan/activity/Activity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Represents an activity entry with a name and total time spent."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Activity {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new activity entry."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param name represents the name of the activity"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param startTime the time that the activity first started"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param tags activity tags"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param endTime the time that the activity ended"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Activity(String name, LocalDateTime startTime, LocalDateTime endTime, Set\u003cString\u003e tags)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (endTime.isBefore(startTime)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.name \u003d name.strip();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.date \u003d endTime.toLocalDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Ends an ongoing activity and updates the total time spent on the activity."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param endTime date and time when the activity ended"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return a confirmation message that the tracking of the activity has ended"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public String endActivity(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        return (\"You have ended \" + this.name + \" . Great job !\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public Set\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Returns true if the Activity\u0027s date is within the date range specified (inclusive)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param startDate Start date of range"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param endDate End date of range"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return True if Activity is within date range; false otherwise"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public boolean isWithinDateFrame(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!this.date.isBefore(startDate) \u0026\u0026 !this.date.isAfter(endDate)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Converts the jikan.activity.Activity object to data representation to be stored in a data file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * File format:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * name, startTime, endTime"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return String representing the Task object in comma-separated data format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Convert tags to a single space-separated"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String tagString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tagString \u003d tagsToString(tagString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String dataLine \u003d (this.name + \",\" + this.startTime + \",\" + this.endTime + \",\" + tagString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return dataLine;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private String tagsToString(String tagString) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Iterator i \u003d this.tags.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        while (i.hasNext()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            tagString +\u003d i.next() + \" \";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        return tagString;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 60,
      "btricec": 35,
      "ananda-lye": 24
    }
  },
  {
    "path": "src/main/java/jikan/activity/ActivityList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.StorageHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Represents the list of activities."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class ActivityList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public ArrayList\u003cActivity\u003e activities;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Storage storage; // Storage the list was loaded from"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "    //int size;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new activity list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public ActivityList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        //this.size \u003d activities.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Loads activityList from data file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param storage Storage to load from."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public ActivityList(Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        populateTaskList(storage.dataFile);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Activity get(int i) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return activities.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Adds activity to activity list and stores it in the data file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param activity Activity to add."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void add(Activity activity) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String dataLine \u003d activity.toData();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        updateFile(dataLine);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Updates data file with new task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataLine Line to write to file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void updateFile(String dataLine) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            storage.writeToFile(dataLine);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            System.out.println(\"Error saving task to data file.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.remove(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "        deleteUpdateFile(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void deleteUpdateFile(int index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "            StorageHandler.removeLine(index, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Error while deleting task from data file.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return activities.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Populates task list from file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFile Data file to populate from."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void populateTaskList(File dataFile) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Scanner dataScanner \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                parseDataLine(dataScanner.nextLine());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            System.out.println(\"Error: data file not found. Could not load into the current session\u0027s task list.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Parses the current line in the data file to an jikan.activity.Activity object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param s String to parse."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void parseDataLine(String s) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (!s.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            List\u003cString\u003e strings \u003d Arrays.asList(s.split(\",\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String[] tagStrings;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Set\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // if there are tags"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (strings.size() \u003e 3) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // remove square brackets surrounding tags"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                tagStrings \u003d strings.get(3).substring(0,strings.get(3).length() - 1).split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                tagStrings \u003d strings.get(3).split(\" \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String i : tagStrings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    tags.add(i);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // strings[0] \u003d name, strings[1] \u003d startDate, string[2] \u003d endDate"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Activity e \u003d null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                e \u003d new Activity(strings.get(0), LocalDateTime.parse(strings.get(1)),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btricec"
        },
        "content": "                        LocalDateTime.parse(strings.get(2)), tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } catch (InvalidTimeFrameException ex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            activities.add(e);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 78,
      "btricec": 43,
      "siuhian": 1,
      "ananda-lye": 19
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyNameException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * An exception that is thrown when the task name field is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EmptyNameException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyQueryException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * An exception that is thrown when the query for find or filter is not provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class EmptyQueryException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidTimeFrameException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * An exception that is thrown when the time frame is invalid (e.g., the end time comes before the start time)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class InvalidTimeFrameException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/NoSuchActivityException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * An exception that is thrown when the task name is unknown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class NoSuchActivityException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 7
    }
  },
  {
    "path": "src/main/java/jikan/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.EmptyQueryException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.Log;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents the object which parses user input to relevant functions for the execution of commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected LocalDateTime startTime \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected LocalDateTime endTime \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private String activityName \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private Set\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected String[] tokenizedInputs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    String instruction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    Log logger \u003d new Log();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private ActivityList lastShownList \u003d new ActivityList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Parses user commands to relevant functions to carry out the commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param scanner scanner object which reads user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList the list of activities"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void parseUserCommands(Scanner scanner, ActivityList activityList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "        logger.makeInfoLog(\"Starting to parse inputs.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        /*lastShownList is initialised here to facilitate subsequent delete and edit commands"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        referencing by index of this list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        lastShownList.activities.addAll(activityList.activities);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            tokenizedInputs \u003d userInput.split(\" \", 3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            instruction \u003d tokenizedInputs[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            switch (instruction) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                ui.exitFromApp();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            case \"start\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    parseStart();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } catch (EmptyNameException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    logger.makeInfoLog(\"Activity started without task name\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    ui.printDivider(\"Task name cannot be empty!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    logger.makeInfoLog(\"Activity started without task name\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    ui.printDivider(\"Task name cannot be empty!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    logger.makeInfoLog(\"Activity started without task name\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    ui.printDivider(\"Task name cannot be empty!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            case \"end\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    parseEnd(activityList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    logger.makeInfoLog(\"End command failed as no activity was ongoing\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    ui.printDivider(\"You have not started any activity!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    logger.makeInfoLog(\"End date must be before start date\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    ui.printDivider(\"End date must be before start date.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    parseList(activityList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    logger.makeInfoLog(\"Specified time range not valid\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    ui.printDivider(\"The time range specified is not valid.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    logger.makeInfoLog(\"Specified time range was not in the valid format\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    ui.printDivider(\"Please input your dates as either yyyy-MM-dd or dd/MM/yyyy.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "            case \"abort\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    parseAbort();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    ui.printDivider(\"You have not started any activity!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    logger.makeInfoLog(\"Abort command failed as no activity was ongoing\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    parseDelete(activityList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "                } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    ui.printDivider(\"Invalid index number.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btricec"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    parseFind(activityList, lastShownList, tokenizedInputs[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException | EmptyQueryException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            case \"filter\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    parseFilter(activityList, lastShownList, tokenizedInputs[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException | EmptyQueryException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                parseDefault();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Shows the user all past activities that has names which match the keyword queried by the user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList the activity list to search for matching activities"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param lastShownList the activity list to populate with matching activities only"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param keyword the keyword queried by the user"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void parseFind(ActivityList activityList, ActivityList lastShownList, String keyword)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throws EmptyQueryException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (keyword.length() \u003c 1) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new EmptyQueryException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            lastShownList.activities.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                if (i.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printResults(lastShownList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Shows the user all past activities that has tags which match the keywords queried by the user."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList the activity list to search for matching activities"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param lastShownList the activity list to populate with matching activities only"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param query the keywords queried by the user"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void parseFilter(ActivityList activityList, ActivityList lastShownList, String query)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throws EmptyQueryException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (query.length() \u003c 1) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new EmptyQueryException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            lastShownList.activities.clear();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String[] keywords \u003d query.split(\" \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            for (String keyword : keywords) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                populateLastShownList(activityList, lastShownList, keyword);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printResults(lastShownList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Populates the last shown list with activities that contain tags which match the given keyword."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList the list of activity to search"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param lastShownList the last shown list to populate"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param keyword the keyword to match"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void populateLastShownList(ActivityList activityList, ActivityList lastShownList, String keyword) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (!lastShownList.activities.contains(i) \u0026\u0026 i.getTags().contains(keyword)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Method to parse user inputs that are not recognised. */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void parseDefault() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String line \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.makeInfoLog(\"Invalid command entered\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        ui.printDivider(line);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Method to parse the abort command. */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void parseAbort() throws NoSuchActivityException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            logger.makeFineLog(\"Aborted \" + activityName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            startTime \u003d null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activityName \u003d null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String line \u003d \"You have aborted the current activity!\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            ui.printDivider(line);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Method to parse the start activity command. */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void parseStart() throws ArrayIndexOutOfBoundsException, EmptyNameException, NullPointerException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // check if an activity has already been started"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (startTime !\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String line \u003d activityName + \" is ongoing!\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            logger.makeInfoLog(\"Could not start activity due to already ongoing activity.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "btricec"
        },
        "content": "            ui.printDivider(line);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // tags should be reset"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assert tags.isEmpty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int delimiter \u003d tokenizedInputs[1].indexOf(\"/t\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (delimiter \u003d\u003d -1) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "btricec"
        },
        "content": "                activityName \u003d tokenizedInputs[1];"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (activityName.equals(\"\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyNameException();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "btricec"
        },
        "content": "                line \u003d \"Started: \" + activityName;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "btricec"
        },
        "content": "                activityName \u003d tokenizedInputs[1].substring(0, delimiter);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (activityName.equals(\"\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyNameException();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "btricec"
        },
        "content": "                line \u003d \"Started: \" + activityName;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                parseTags(delimiter);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "btricec"
        },
        "content": "            ui.printDivider(line);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.makeFineLog(\"Started: \" + activityName);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Inserts the tags into the activity object when it has ended."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param delimiter the index of the tag delimiter"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void parseTags(int delimiter) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String[] tagString \u003d tokenizedInputs[1].substring(delimiter + 3).split(\" \");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        for (String i :tagString) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            tags.add(i);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Method to parse the end activity command. */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void parseEnd(ActivityList activityList) throws NoSuchActivityException, InvalidTimeFrameException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String line \u003d \"Ended: \" + activityName;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            ui.printDivider(line);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            endTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Activity newActivity \u003d new Activity(activityName, startTime, endTime, tags);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityList.add(newActivity);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // reset activity info"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startTime \u003d null;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.makeFineLog(\"Ended: \" + activityName);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /** Deletes an activity from the activity list. */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void parseDelete(ActivityList activityList) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "btricec"
        },
        "content": "        int index \u003d Integer.parseInt(tokenizedInputs[1]) - 1;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line \u003d \"You have deleted \" + activityList.get(index).getName();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "btricec"
        },
        "content": "        ui.printDivider(line);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activityList.delete(index);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Parse a list command. The user can specify either a single date or a specific time frame."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param activityList The activity list to search for matching activities."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void parseList(ActivityList activityList) throws InvalidTimeFrameException, DateTimeParseException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // If no time frame is specified, print the entire list"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (tokenizedInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            lastShownList.activities.clear();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            ui.printList(activityList);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Can\u0027t do lastShownList \u003d activityList, otherwise we just copy"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        lastShownList.activities.clear();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Parse either format"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        DateTimeFormatter parser \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][yyyy-MM-dd]\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        LocalDate startDate \u003d LocalDate.parse(tokenizedInputs[1], parser);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Only one date is specified; return all entries with start date coinciding with that date"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (tokenizedInputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                if (i.getDate().equals(startDate)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            ui.printList(lastShownList);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Both start and end dates are specified"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } else if (tokenizedInputs.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            LocalDate endDate \u003d LocalDate.parse(tokenizedInputs[2], parser);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                if (i.isWithinDateFrame(startDate, endDate)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            ui.printList(lastShownList);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 77,
      "btricec": 47,
      "siuhian": 39,
      "nigellenl": 26,
      "ananda-lye": 137
    }
  },
  {
    "path": "src/main/java/jikan/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Class that holds the path and File object for the current data file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Path to current data file. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public String dataFilePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** File object for current data file. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public File dataFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructs a Storage object for the input file path."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFilePath The data file\u0027s file path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Storage(String dataFilePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.dataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Writes the input string to file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param s The input string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void writeToFile(String s) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dataFilePath, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        fw.write(s + System.lineSeparator());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Loads the data file. Creates file and directories if data file did not previously exist."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return True if file previously existed (and was not created); False if file did not exist and was created."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public boolean loadFile() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Create data file if it does not exist already"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            createDataFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            return false; // false \u003d file didn\u0027t previously exist, so it was created"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return true; // true \u003d file previously existed, and was not created"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Creates a file and any non-existing directories to that file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while creating the file or directories."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void createDataFile() throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile.getParentFile().mkdirs(); // Create data directory (does nothing if directory already exists)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile.createNewFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 64
    }
  },
  {
    "path": "src/main/java/jikan/storage/StorageHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Class containing useful functions for modifying the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageHandler {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Removes the line whose index matches lineNumber from file at dataFilePath."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Index of line to remove."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param storage Storage object which contains path to save file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void removeLine(int lineNumber, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Read file into list of strings, where each string is a line in the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(storage.dataFilePath),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "                StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        //int removedIndex \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileContent.remove(lineNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        saveNewList(fileContent, storage.dataFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Remove line from fileContent list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        removedIndex \u003d removeLineFromList(lineNumber, fileContent, removedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Rewrite list into data file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Files.write(Paths.get(dataFilePath), fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Update indexes of subsequent lines"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        updateIndexes(fileContent, removedIndex, dataFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Saves a the updated activity list to the csv file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param newList The list containing the updated data."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param dataFile The file to save to."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void saveNewList(List\u003cString\u003e newList, File dataFile) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "        FileOutputStream fileOutputStream \u003d new FileOutputStream(dataFile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(fileOutputStream);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (String s : newList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            printWriter.println(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileOutputStream.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Removes line from a list based on its index. Returns index at which the line was removed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Index of line to remove."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param list List of strings containing lines, each with a starting index."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param removedIndex Index at which line was removed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return Index of the removed line."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static int removeLineFromList(int lineNumber, List\u003cString\u003e list, int removedIndex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Iterate through the lines"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // If the current line matches the taskId"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (list.get(i).startsWith(String.valueOf(lineNumber))) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // Remove current line"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                removedIndex \u003d i; // Store index of removed line to use as initial index of next loop"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                list.remove(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return removedIndex;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * After a line has been removed, updates subsequent indexes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param fileContent List of strings from the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param removedIndex Index at which line was removed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFilePath Path to data file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing to file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static void updateIndexes(List\u003cString\u003e fileContent, int removedIndex, String dataFilePath)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Update indexes of subsequent tasks (e.g. if you remove task 2, task 3 becomes task 2)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d removedIndex; i \u003c fileContent.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Get current comma separated string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            String currString \u003d fileContent.get(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            String updatedString \u003d decrementIndex(currString, i);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Replace the line with the updated string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            replaceLine(i + 1, updatedString, dataFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Decrements index at beginning of string by 1."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param currString String whose index must be decremented."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param i Index that the currString\u0027s index must be set to."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return Original string with its index decremented by 1."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static String decrementIndex(String currString, int i) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Split into different cells"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        List\u003cString\u003e cells \u003d Arrays.asList(currString.split(\",\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Change first cell (taskID) to new ID (taskID-1)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Task 3 becomes task 2, task 4 becomes task 3, until end of list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        cells.set(0, String.valueOf(i));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Recombine the comma separated string"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return String.join(\",\", cells);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Replaces line in a data file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Index of the line to replace."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param newString String that replaces the original line."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFilePath Path to data file."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing to file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public static void replaceLine(int lineNumber, String newString, String dataFilePath) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Read file into list of strings, where each string is a line in the file"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(dataFilePath), StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Replace line in the list of strings"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        replaceLineInList(lineNumber, newString, fileContent);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Write new list of strings to file"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Files.write(Paths.get(dataFilePath), fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Replaces a line in a list of Strings."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Number at which line must be replaced."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param newString String that replaces the original string."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param list List of strings."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static void replaceLineInList(int lineNumber, String newString, List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Iterate through the lines"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // If the current line matches the taskId"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (list.get(i).startsWith(String.valueOf(lineNumber))) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // Replace it with the new task string"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                list.set(i, newString);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 135,
      "btricec": 34
    }
  },
  {
    "path": "src/main/java/jikan/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public static final String GREETING \u003d \"Jikan\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static final String DIVIDER \u003d \"-------------------------------------------\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints the logo and greeting so users know the app is working. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(GREETING);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints exit message and exits the app. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void exitFromApp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(\" Bye! See you again.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints divider between user input and app feedback. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static void printDivider(String line) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static void printTableFormat(ActivityList activityList, int index, boolean gotTags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "        long durationInNanos \u003d (activityList.get(index).getDuration()).toNanos();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String duration \u003d String.format(\"%02d:%02d:%02d\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toHours(durationInNanos),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toMinutes(durationInNanos)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                        - TimeUnit.HOURS.toMinutes(TimeUnit.NANOSECONDS.toHours(durationInNanos)),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toSeconds(durationInNanos)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                        - TimeUnit.MINUTES.toSeconds(TimeUnit.NANOSECONDS.toMinutes(durationInNanos)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (gotTags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(String.format(\"%d %s %-25s %s %-10s %s %-10s %s %-100s\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    index + 1, \"|\", activityList.get(index).getName(), \"|\", duration, \"|\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    activityList.get(index).getDate().toString(), \"|\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    activityList.get(index).getTags().toString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(String.format(\"%d %s %-25s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    index + 1, \"|\", activityList.get(index).getName(), \"|\", duration, \"|\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    activityList.get(index).getDate().toString(), \"|\", \"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Prints the results from a \u0027find\u0027 or \u0027filter\u0027 command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param lastShownList the list of activities to print"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static void printResults(ActivityList lastShownList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (lastShownList.activities.size() \u003e 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Here are the matching activities in your list:\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(String.format(\"  %s %-25s %s %-10s %s %-10s %s %-30s\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    \"|\", \"Name\", \"|\", \"Duration\", \"|\", \"Date\", \"|\", \"Tags\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            for (int i \u003d 0; i \u003c lastShownList.getSize(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                if (lastShownList.get(i).getTags() !\u003d null \u0026\u0026 !lastShownList.get(i).getTags().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    printTableFormat(lastShownList, i, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    printTableFormat(lastShownList, i, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"There are no activities matching that description.\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /** Prints all the activities in a list. */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static void printList(ActivityList activityList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(\"Your completed activities:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(String.format(\"  %s %-25s %s %-10s %s %-10s %s %-30s\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "                \"|\", \"Name\", \"|\", \"Duration\", \"|\", \"Date\", \"|\", \"Tags\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (int i \u003d 0; i \u003c activityList.getSize(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (activityList.get(i).getTags() !\u003d null \u0026\u0026 !activityList.get(i).getTags().isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "                printTableFormat(activityList, i, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "                printTableFormat(activityList, i, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 1,
      "btricec": 19,
      "siuhian": 42,
      "ananda-lye": 29
    }
  },
  {
    "path": "src/test/java/jikan/activity/ActivityListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "class ActivityListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    void getIndex() throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "        ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        HashSet\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", LocalDateTime.parse(\"2020-01-01T08:00:00\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "                LocalDateTime.parse(\"2020-01-01T10:00:00\"), tags);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", LocalDateTime.parse(\"2020-01-01T10:00:00\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "                LocalDateTime.parse(\"2020-01-01T11:00:00\"), tags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", LocalDateTime.parse(\"2020-01-01T05:00:00\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "                LocalDateTime.parse(\"2020-01-01T07:00:00\"), tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(activity2, activities.get(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        activities.storage.dataFile.delete();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 7,
      "btricec": 24,
      "ananda-lye": 4
    }
  },
  {
    "path": "src/test/java/jikan/activity/ActivityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "class ActivityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    //the tags is empty here as adding needs to be done in a method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    Activity activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            activity \u003d new Activity(\"Activity\", LocalDateTime.parse(\"2020-01-01T08:00:00\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    LocalDateTime.parse(\"2020-01-01T10:00:00\"), tags);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getDuration() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(\"PT2H\", activity.getDuration().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(\"Activity\", activity.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getTags() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(tags, activity.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 11,
      "btricec": 26,
      "ananda-lye": 3
    }
  },
  {
    "path": "src/test/java/jikan/parser/ExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "class ExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void testEmptyNameException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Assertions.assertThrows(EmptyNameException.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            parser.tokenizedInputs \u003d new String[]{\"start\", \"\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            parser.parseStart();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void testNoSuchActivityException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Assertions.assertThrows(NoSuchActivityException.class, () -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            parser.startTime \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            parser.parseEnd(activityList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            parser.parseAbort();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nigellenl": 35
    }
  },
  {
    "path": "src/test/java/jikan/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    void parseEnd() throws NoSuchActivityException, InvalidTimeFrameException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            parser.startTime \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            parser.parseEnd(activityList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assertTrue(activityList.activities.isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            parser.tokenizedInputs \u003d new String[]{\"start\", \"studying\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            parser.startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityList.storage \u003d new Storage(\"data/Parser_test.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            parser.parseEnd(activityList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assertFalse(activityList.activities.isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            ui.printDivider(\"There is no such task!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 2,
      "siuhian": 27,
      "nigellenl": 8
    }
  },
  {
    "path": "src/test/java/jikan/storage/StorageHandlerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageHandlerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void removeLine() throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with tests in StorageTest"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line1 \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line2 \u003d \"b\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line3 \u003d \"c\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String writtenString \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        StorageHandler.removeLine(1, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            writtenString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(line1, writtenString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(line3, writtenString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void test_replaceLine() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(\"1. a\", \"2. b\", \"10. c\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String replace \u003d \"This string has been replaced.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with tests in StorageTest)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            storage.writeToFile(list.get(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        StorageHandler.replaceLine(2, replace, storage.dataFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String replacedString \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            replacedString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Check second line"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (j \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(replace, replacedString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 77,
      "btricec": 4
    }
  },
  {
    "path": "src/test/java/jikan/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void loadFile_fileDoesNotExist() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // First time calling loadFile, so file does not exist yet"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertFalse(storage.loadFile());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void loadFile_fileExists() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // First time calling loadFile, so file does not exist yet"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // loadFile was called once already, so now file exists"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertTrue(storage.loadFile());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testCreateDataFile() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertTrue(storage.dataFile.exists());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testCreateDataFile_IoException() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"//\\\\-@#4/\\\\/**3\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        IOException thrown \u003d assertThrows("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                IOException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                storage::loadFile,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                \"IOException during file creation\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testWriteToFile() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with other tests)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String originalString \u003d \"This is a test string.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String writtenString \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(originalString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            writtenString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertEquals(originalString, writtenString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 74
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "start studying"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "end studying"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "start exercising"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "abort exercising"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "start"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "end"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "abort"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 8
    }
  }
]
