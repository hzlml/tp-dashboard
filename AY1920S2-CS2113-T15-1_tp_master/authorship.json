[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "group \u0027jikan\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    mainClassName \u003d \"jikan.Jikan\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    archiveBaseName \u003d \"jikan\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027jikan.Jikan\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 3,
      "siuhian": 6,
      "-": 38
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "| Name | Github Profile | Portfolio | Portfolio (web link) "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "|:----:|:--------------:|:---------:|:--------------------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Ng Siu Hian | [Github](https://github.com/siuhian) | [Portfolio](./team/siuhian.md) | [Portfolio (web link)](https://ay1920s2-cs2113-t15-1.github.io/tp/team/siuhian.html)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Ananda Lye | [Github](https://github.com/ananda-lye) | [Portfolio](./team/ananda-lye.md) | [Portfolio (web link)](https://ay1920s2-cs2113-t15-1.github.io/tp/team/ananda-lye.html)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Beatrice Chan | [Github](https://github.com/btricec) | [Portfolio](./team/btricec.md) | [Portfolio (web link)](https://ay1920s2-cs2113-t15-1.github.io/tp/team/btricec.html)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Nigelle Leo | [Github](https://github.com/nigellenl) | [Portfolio](./team/nigellenl.md) | [Portfolio (web link)](https://ay1920s2-cs2113-t15-1.github.io/tp/team/nigellenl.html)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Riccardo Di Maio | [Github](https://github.com/rdimaio) | [Portfolio](./team/rdimaio.md) | [Portfolio (web link)](https://ay1920s2-cs2113-t15-1.github.io/tp/team/rdimaio.html)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rdimaio": 7,
      "btricec": 1,
      "-": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "# Developer Guide \u003c!-- omit in toc --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- [1. Setting Up](#1-setting-up)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- [2. Design](#2-design)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- [3. Implementation](#3-implementation)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  - [3.1 Start Feature](#31-start-feature)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.1.1 Current Implementation](#311-current-implementation)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.1.2 Additional Implementation](#312-additional-implementation)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.1.3 Design Considerations](#313-design-considerations)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "  - [3.2 Clean Feature](#32-clean-feature)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    - [3.2.1 Current Implementation](#311-current-implementation)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.2.2 Additional Implementation](#322-additional-implementation)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.2.3 Design Considerations](#323-design-considerations)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  - [3.3 Storage feature](#33-storage-feature)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  - [3.4 Storage handler](#34-storage-handler)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  - [3.5 Edit feature](#35-edit-feature)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.5.1 Current Implementation](#351-current-implementation)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.5.2 Additional Implementations](#352-additional-implementations)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.5.3 Design Considerations](#353-design-considerations)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  - [3.6 Continue Feature](#36-continue-feature)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.6.1 Current Implementation](#361-current-implementation)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    - [3.6.3 Additional Implementations](#362-additional-implementations)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "    - [3.6.2 Design Considerations](#363-design-considerations)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  - [3.7 List feature](#37-list-feature)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "    - [3.7.1 Current implementation](#371-current-implementation)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "  - [3.8 Find and Filter Features](#38-find--filter-features)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "    - [3.8.1 Design Considerations](#381-design-considerations)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "    - [3.8.2a Current Implementation for Find](#382a-current-implementation-for-find)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "    - [3.8.2b Current Implementation for Filter](#382b-current-implementation-for-filter)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "  - [3.9 Graph Feature](#39-graph-feature)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [3.9.1 Current Implementation](#391-current-implementation)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "    - [3.9.2 Additional features](#392-additional-features)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- [4. Appendix](#4-appendix)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  - [Product Scope](#product-scope)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    - [Target user profile](#target-user-profile)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    - [Value proposition](#value-proposition)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  - [User Stories](#user-stories)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  - [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  - [Glossary](#glossary)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  - [Instructions for Manual Testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    - [Launch and Shutdown](#launch-and-shutdown)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    - [Listing activities](#listing-activities)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    - [Continuing activities](#continuing-activities)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    - [Graphing activities](#graphing-activities)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [Setting tag goals](#setting-tag-goals)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## 1. Setting Up"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "   * Prerequisites"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * JDK 11 or above"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * IntelliJ IDE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "   * Setting up the project in your computer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Open IntelliJ (if you are not in the welcome screen, click File \u003e Close Project to close the existing project dialog first)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click Configure \u003e Project Defaults \u003e Project Structure"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click New…​ and find the directory of the JDK"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click Import Project"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Locate the build.gradle file and select it. Click OK"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click Open as Project"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click OK to accept the default settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "   * Verifying the setup"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Run `jikan.jikan` and try a few commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Run the tests and ensure they all pass."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The section provides a high-level explanation of how the Jikan software is designed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### 2.1 High-Level Architecture"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The users interact with the Jikan software which modifies the local storage data file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Within the Jikan software, there are 5 main components:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Parser Component** - Parses the user inputs and calls the relevant `Command` object to execute the desired"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Ui Component** - Prints to the user the output of the desired `Commands`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Commands Component** - Contains all the `Commands` to be called by the `Parser` based on user inputs."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Activities Component** - Maintains the non-permanent state of all `Activities` in the `Activity List` to be accessed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "by the executing `Commands`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Storage Component** - Interacts with and modifies the local storage file, which contains the permanent (lasting"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "even after the program terminates) state of all activities. It retrieves this permanent state and populates the `Activity List` at the start of each session."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![image_info](./pictures/Architecture_Diagram.png)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### 2.2 Class Diagram"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The high-level class diagram describes the structure of the components"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![image_info](./pictures/Simplified_Class_Diagram.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "![image_info](./pictures/Commands.png)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "All the commands inherit from the abstract `Command` class. Each command has a protected `parameters` attribute from it\u0027s Parent class `command` and an overridden method `executeCommand` which is called in `main` to execute the relevant command. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.1 Start Feature"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.1.1 Current Implementation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![StartCD](./pictures/startCD2.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "With Jikan as the main entry point for our application, "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. Jikan will receive user input and pass it to the Parser class to get the corresponding command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. The Parser class will initialise and return a Command class object based on the command in user input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. In this case, Parser will return a StartCommand class object to Jikan."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. Then, Jikan will call the StartCommand#executeCommand method to start an activity."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Additionally, StartCommand also implements the following operations:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **StartCommand#checkActivity** Checks if the activity already exists in the activity list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **StartCommand#checkTime** Checks if the allocated time provided is valid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **StartCommand#continueActivity** Continue on an existing activity."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**checkActivity**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![checkActivity](./pictures/checkactivityv2.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how the StartCommand#checkActivity function works. This function is used to check "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "if the activity to be started exists in the activity list. If the activity exists in the list, that activity will be "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "continued and this way the user cannot start duplicate activities."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When checkActivity() is called, it will make a call to the ActivityList#findActivity method."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Once the findActivity() method finishes execution, it will return an integer index back to checkActivity()."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. If the index is not equals to -1, the activity to be started exists in the activity list and continueActivity() will be called."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. Else, the activity to be started is a brand new activity and addActivityToList() will be called."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**checkTime**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![checkTime](./pictures/checkTimev2.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how the StartCommand#checkTime function works. This function is used to check the validity of "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the allocated time provided by the user input. If the allocated time is valid, the activity will be added to activity"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When checkTime() is called, it will initialise two LocalTime objects called endTime and startTime respectively."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. startTime will be initialised to time 00:00:00 while endTime will be calculated based on the user input to the start"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "command (i.e `start activity name /a HH:MM:SS /t tags`)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. Then, the method Duration.between() will be used to get a Duration object that holds the time difference between startTime"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": "and endTime."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. If this Duration object is non zero (i.e user gave a valid non zero allocated time), then the activity will be added to the activity list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": "using the addActivity() method."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**continueActivity**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![continueActivity](./pictures/continueActivity.jpg)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how the StartCommand#continueActivity function works. This function is used when the current activity"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siuhian"
        },
        "content": "to be started already exists in the activity list. Thus, this function will check with the user whether to continue on that activity "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siuhian"
        },
        "content": "and prevent duplicate activities from being started."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When continueActivity() is called, it will make a call to the Scanner object to read in the next line of user input."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. If the user input is \"yes\", information about the activity (activity name, tags etc.) will be forwarded to parser and the parser"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siuhian"
        },
        "content": "will update the activity list (i.e when continue is used, activity duration is added on and needs to be updated)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. Else, if the user input is \"no\", continueActivity() will notify the parser to read in the next line of user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.1.2 Additional Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. `start` command have the ability to continue an activity if the activity to be started exists in activity list as discussed above. However, the second "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siuhian"
        },
        "content": "start command\u0027s tags and allocated time parameters will not be captured if the activity originally did have tags or allocated time."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `start activity 1`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `start activity 1 /a HH:MM:SS /t tags` (this command will continue activity 1 but won\u0027t add the tags and allocated time to it)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Thus, it would be best for `start` command to address this issue and allow the second `start` command to not only continue the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siuhian"
        },
        "content": "activity but also edit the fields of the activity."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Allows two activities to start at the same time. As a user, sometimes the activity we are doing may be linked to another activity (i.e activities like "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siuhian"
        },
        "content": "revising CS2106 and doing CS2106 Labs are similar as doing the labs can serve like a revision too)."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Thus, it would be good if more than one activity can be started at a particular time."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.1.3 Design Considerations"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The current design is centred around the Parser Class as all the relevant activity information (activity startTime, endTime, name, tags,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siuhian"
        },
        "content": "allocated time) are stored inside Parser."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Since Parser is a public class. There are some benefits to this design."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* All the command classes have access to activity information."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Makes the classes more lightweight as there is no need for local variables to store activity informations."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Reduces coupling between the commands as they interact through Parser."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siuhian"
        },
        "content": "However, there are some drawbacks to this design too."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Since all the activity information are public, every class in Jikan can access/modify activity information which is"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siuhian"
        },
        "content": "undesirable."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* This creates a lot of dependencies between Commands and Parser which makes unit testing harder to implement."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* As more commands is created to accommodate new features , Parser will be overloaded with new variables and classes."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.2 Clean Feature"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.2.1 Current Implementation"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Jikan provides a `clean` command where users can automate the cleaning of done activities (i.e activities with duration \u003e allocation) and logging data"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siuhian"
        },
        "content": "at application startup."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![CleanCD](./pictures/CleanCD.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siuhian"
        },
        "content": "With Jikan as the main entry for our application,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. Upon startup, Jikan will initialise a LogCleaner and StorageCleaner object."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Jikan will call upon LogCleaner#autoClean() and StorageCleaner#autoClean() functions."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. These two functions will check if the Storage and Log Cleaner are enabled respectively before cleaning."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. Thus, by the time the user can interact with Jikan (i.e send commands to Jikan), the activity list and log files would already be cleaned."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siuhian"
        },
        "content": "5. Using the `clean` command, users would be able to manage the cleaner\u0027s behaviour (switching it on/off, set number of done activities/logging data to clean)."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The cleanup mechanism is stored internally as a StorageCleaner and LogCleaner class. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siuhian"
        },
        "content": "These two classes have access to the data files of activity list and logs respectively and thus they are able to "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siuhian"
        },
        "content": "directly manipulate the activity list and logging data."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siuhian"
        },
        "content": "A status.txt file is initialised to keep track of the status (on/off) of the two cleaners and contains information on "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the number of done activities/logging data for cleaning."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Moreover, the CleanCommand also implements the following operation:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **CleanCommand#setStatus** Switch on/off the two cleaners respectively."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **CleanCommand#setValue** Set a value for the number of done activities/logging data to be cleaned."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Note: The two cleaners are independent, setting a value/status for one of the cleaner will not affect the other cleaner."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**setStatus**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![setStatus](./pictures/setStatusSD.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how CleanCommand#setStatus function works. This function is a generalized function that is used to"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siuhian"
        },
        "content": "switch on or off the cleaners by checking the parameters to the `clean` command. Thus, based on the return value of getStatus() and"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siuhian"
        },
        "content": "getCleaner(), there are four possible scenarios."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When setStatus() is called, the method will call its own class method getStatus() to check what is the status to set to."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. There are two valid return values for getStatus() method which is \"on\" and \"off\". The diagram shows the former."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. Upon receiving a valid return value from getStatus() which is \"on\" in the diagram, the setStatus() method will self invoke another"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siuhian"
        },
        "content": "of its own class method getCleaner()."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. The return result of the getCleaner() together with getStatus() will then be used to determine which cleaner are we setting and what is"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the status to set to. "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siuhian"
        },
        "content": "5. In other words, result of getCleaner() is used to determine whether are we calling StorageCleaner#setStatus or LogCleaner#setStatus while"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the result of getStatus() determines the parameter to setStatus(). (e.g \"on\" will call setStatus(\"true\") while \"off\" will call setStatus(\"false\"))."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**setValue**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram of setValue is omitted as it is similar to setStatus diagram. This function is a generalized function that is used to "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siuhian"
        },
        "content": "set a value for the number of done activities or the number of lines of logging data to be cleaned for the two cleaners respectively."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When setValue() is called, the method will call its own class method getNumber() that will return an integer value corresponding to the number "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siuhian"
        },
        "content": "to set to."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Upon receiving a valid return value (non negative), the setValue() method will self invoke another of its own class method getCleaner()."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. The return result of the getCleaner() together with getNumber() will then be used to determine which cleaner are we setting and what is "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the value to set to."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. In other words, result of getCleaner() is used to determine whether are we calling StorageCleaner#setNumberOfActivitiesToClean or LogCleaner#setNumberOfLogsToClean"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siuhian"
        },
        "content": "while the result of getNumber determines the parameter to these two functions."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Note that steps 2-4 of setValue() are similar to steps 3-5 of setStatus()."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siuhian"
        },
        "content": "On the other hand, the Storage/Log Cleaner class implements the following core operation of `clean` command."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **Cleaner#autoClean** This operation is called whenever Jikan is executed. Cleaning will only be done to the activity list/logging data if"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the two cleaners are enabled respectively."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**autoClean**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![autoClean](./pictures/ACSD.png)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how Cleaner#autoClean function works. This function is called whenever Jikan executes Jikan#main and is used to"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siuhian"
        },
        "content": "perform cleaning of the activity list and logging data if Storage Cleaner and Log Cleaner are enabled respectively. The number of done activities and"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siuhian"
        },
        "content": "lines of logging data to clean is set to 5 at default if user did not specify a value for both cleaners."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When main() is called, Jikan will first initialise both the StorageCleaner and LogCleaner object using StorageCleaner() and "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siuhian"
        },
        "content": "LogCleaner()."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Once both objects are initialised, Jikan will first call storageAutoClean() method of the StorageCleaner class."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. This method will invoke another method under the StorageCleaner class called checkStatus() which will return a boolean toClean variable."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. If toClean \u003d\u003d true, the storageAutoClean() method will proceed and clean up the activity list before returning control back to main()."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siuhian"
        },
        "content": "5. Else, the storageAutoClean() will not do any clean up and will immediately return control back to main()."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siuhian"
        },
        "content": "6. Steps 2 to 5 will then be repeated when Jikan call logAutoClean() method of the LogCleaner class. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.2.2 Additional Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. Currently, the data that is cleaned up by this command is sent to a recycled folder similar to how Windows recycle bin works. "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Thus, it would be good to have a feature to restore the data deleted in the event the user wishes to recover some of the activities/logs."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    On a similar note, it would also be good to have a permanent delete feature built into the recycled folder so that items that are too old (\u003e 6 months old) will"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    deleted away for good."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. The automated cleaning does not have a lot of flexibility as the current implementation only cleans up done activities starting from the oldest."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Thus, it would be good if the `clean` command is expanded to allow users more freedom in specifying what activities to clean."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `clean /n 3 /t CS2113` does cleaning on the 3 oldest done activities with CS2113 tag."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `clean /n 5 /i 1/4/2020 3/4/2020` does cleaning on the 5 oldest done activities with dates between 1 April 2020 and 3 April 2020."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.2.3 Design Considerations"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The current design uses the abstract cleaner class to create dedicated cleaners (i.e Storage and Log Cleaners) to perform"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siuhian"
        },
        "content": "cleaning for various data files (e.g activity list data file, logging data file)."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "siuhian"
        },
        "content": "There are some benefits to this design."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Creating an abstract class reduces the amount of repetitive code as common methods between cleaners are abstracted out."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Abstract classes produce a more OOP solution as different cleaners will handle different parts of the data."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siuhian"
        },
        "content": "However there are drawbacks to this design too."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* There are some very similar methods with key differences that cannot be abstracted out (for e.g different parameters, different printing)."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* This causes the CleanCommand class to have similar and repetitive methods to handle this difference. (for e.g setStorageCleanerOn(), setLogCleanerOn() etc)."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.3 Storage feature"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "The Storage class represents the back-end of Jikan, handling the creation, saving and loading of data. "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Jikan uses a `.csv` file to store its data, formatted in the following way:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`entry-name, start-time, end-time, duration, tags`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "All tags are saved in the same cell, separated by a white space; this design decision was taken to make sure that each entry occupies the same number of cells regardless of each entry’s number of tags. The tags are then separately parsed when the data is loaded."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Each Storage objects contains the path to the data file (`Storage.dataFilePath`), the File object representing the data file (`Storage.dataFile`), and an activityList populated with the data from the data file (`Storage.activityList`). Storage optionally supports multiple data files at the same time, allowing implementation of features like multiple sessions and multiple user profiles. "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Storage provides the following functions:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Constructing a Storage object via `Storage(String dataFilePath)`, which takes in the path to the desired data file (or the path where the user wants to create the data file) as a String object."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Creating a data file via `createDataFile`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Writing to a data file via `writeToFile`. This function takes a single string as parameter and writes it to the data file. It is recommended to only pass single-line strings to keep the file nicely formatted. "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Loading a pre-existing data file via `loadFile`. If a data file already exists for the provided data file path, the function will return `true`; if the specified data file did not previously exist, this function will call the `createDataFile` method and returns `false`. The return value is useful so that the application knows whether or not this is the first session with a specific data file or if data already exists."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Creating an ActivityList via `createActivityList`. This function calls `loadFile()` to check whether the file already existed or not; if the data file previously existed, it will construct an ActivityList object by passing the data from the data file to it, and return this populated ActivityList object; if the data file did not previously exist, it will return an empty activityList object."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.4 Storage handler"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "The StorageHandler class functions as a support to the main Storage class, allowing the Jikan application to manipulate the stored data file. Its main provided functions are:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Removing an entry from the data file via `removeLine`. This function takes in the number of the line to remove."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Replacing an entry in the data file via `replaceLine`. This function takes in the number of the line to replace, along with the String object that needs to be written to the data file in place of the replaced line."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.5 Edit feature"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The edit feature allows the user to make changes to activities that have been saved in the activity list. This is to allow the user to rectify any mistakes that may have been made during the initial recording of the activity. "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.5.1 Current Implementation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The following sequence diagram shows how the edit feature works."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The current implementation of the edit feature allows the user to edit the activity name as well as its allocated time."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The following sequence diagram shows how the edit feature works for editing the activity name. The diagram for the editing of allocated time is omitted as the sequence is relatively similar."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "![image_info](./pictures/EditSequenceDiagram.png)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The current implementation of the edit feature allows the user to edit only the name and allocated time parameter of the activity. When the user wants to edit an activity using the edit command, a new EditCommand object is created. The `executeCommand()` method of the EditCommand object is called and the specified parameters are updated accordingly."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The order of method calls to edit the activity details is as follows if the specified activity exists (meaning `index !\u003d -1`) else an exception is thrown:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "1. The `updateName()` method of the ActivityList class is called, with the user-specified parameters of the activity index and new activity name"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "2. The `get()` method is self-invoked by the ActivityList class to obtain the activity at the given index "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "3. The `setName()` method of the Activity class is called to edit the activity name to the user-specified name"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "4. The activity is updated with its new name in the activityList."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "5. The `fieldChangeUpdateFile()` method of the StorageHandler class is called to update the data file with the new activity name."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.5.2 Additional Implementations"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The current implementation of the edit feature only allows the user to edit the activity name and allocated time. Hence, additional implementations of the edit feature could allow the user to edit other parameters of the activity such as the tags and the start and end dates. "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "This will require the implementation of more update methods in the ActivityList class to allow for the changes to be updated in the activityList after it has been edited. Additionally, there may be more updates required if the tags were to be edited due to the tag goals feature."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The flowchart below shows the flow of activities if the feature of editing tags were to be implemented."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "![image_info](./pictures/EditTagFlowChart.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.5.3 Design Considerations"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "##### Current Design"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The user is able to edit only the name and allocated time of the activity, which are user input data.     "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Pros:**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The user is able to correct any mistake made during the recording of the activity."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The user is able to adjust their allocated time for the activity based on their needs."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Ensures that the record of activities is accurate and consistent in order for more efficient analysis of the time spent."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Cons:** "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The user is only able to edit 2 parameters of the activity, which may be restrictive for them.  "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "##### Possible Design"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The user is able to edit any parameters of the activity, including tags, start and end date/time. "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Pros:**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The user has more flexibility in modifying the record of activities based on their needs."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Cons:**  "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* By allowing the user to edit the date and time, there may be potential inaccuracies in the record of activities, defeating the purpose of the time tracking program. "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* By allowing the user to edit the tags, the tag goals command may become more complicated due to the need to keep track of the presence of the tags."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.6 Continue Feature"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "btricec"
        },
        "content": "The continue feature allows the user to continue a previously ended activity."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.6.1 Current Implementation"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "btricec"
        },
        "content": "![Continue command sequence diagram](./pictures/continue.png)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Continuing an activity:**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "btricec"
        },
        "content": "* When the user enters the command to continue an activity, a *ContinueCommand* object is created in *Parser*. The method `executeCommand()` of the *ContinueCommand* object is then called."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `executeCommand` checks if the given activity name exists in the activityList by calling `findActivity()` (if it doesn’t an exception is thrown, omitted in the sequence diagram above)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "btricec"
        },
        "content": "* It then gets the `name` and `tags` of the activity to be continued and saves it to a public static variable of *Parser* object."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "btricec"
        },
        "content": "* It also gets the current time and saves it to a public static variable of *Parser* object."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "btricec"
        },
        "content": " "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "btricec"
        },
        "content": " ![End command sequence diagram](./pictures/end.png)"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "btricec"
        },
        "content": " **Ending a continued activity:**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "btricec"
        },
        "content": "* When the user wants to end the continued activity, an *EndCommand* object is created in *Parser.* The method `executeCommand()` of the *ContinueCommand* object is then called and it in turn executes the `saveActivity()` method of the *ActivityList* class."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `saveActivity()` gets the current time and saves it to a public static variable of *Parser* object."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Then the elapsed time is calculated using the `between()` method of *Duration* class."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "btricec"
        },
        "content": "* The elapsed time is added with the previous duration of the activity to get the `newDuration` using the `plus()` method of Duration class."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `updateDuration()` method is called to update the `duration` attribute of the continued activity in the `activityList` as well as the `data.csv` file."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### 3.6.2 Additional Implementations"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "btricec"
        },
        "content": "As users can only have activities with unique names, when a user wants to start an activity which already exists in the activityList, they will be given the option to continue the stated activity."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "btricec"
        },
        "content": "![decision flowchart](./pictures/continue_flowchart.PNG)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### 3.6.3 Design Considerations"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Execution:**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Continue by activity name (current implementation)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "   * **Cons:** Activity names have to be unique."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "   * **Pros:** More versatile, resistant to changes in the activity list"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Continue by activity index"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "   * **Cons:** need to add an additional index field to the Activity class, "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "btricec"
        },
        "content": " index is not fixed, changes when an activity is deleted"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "   * **Pros:** Can reuse activity names."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "btricec"
        },
        "content": " "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Although the current implementation of the continue feature disallows users to have multiple activities with the same name, we felt that the versatility of this choice outweighed the cons. Firstly because if the activityList got too big, it would be hard for the user to get the index of the task they wanted to continue. Also, the index would constantly be changing when changes are made to the list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.7 List feature"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "This feature is used to list activities within a range specified by the user."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "If no parameter is passed to the `list` command, then all the stored activities will be displayed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "By passing a single date, the command returns all activities within that date."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "By passing two dates, the command returns all activities that took place within the two dates."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "(for an activity to be included in the range, both its start and end time must be within the specified time range)."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "The user can also provide a verbal command, such as `day`, `week`, or `month`, which"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "will return all the activities for that day, week or month respectively."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Additionally, the user can specify a specific week of month by including a date"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "(e.g. `list month 2020-03-01` returns all the activities in March 2020.)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.7.1 Current implementation"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* List all activities: `list`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List today\u0027s activities: `list day` or `list daily`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List this week\u0027s activities: `list week` or `list weekly`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * List a specific week\u0027s activities by day: `list week DATE` or `list weekly DATE`, "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List this month\u0027s activities: `list month` or `list monthly`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * List a specific month\u0027s activities by day: `list month DATE` or `list monthly DATE`, "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List a specific day\u0027s activities: `list DATE`, where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List activities within a time frame: `list DATE1 DATE2`, where both `DATE1` and `DATE2` are "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.8 Find \u0026 Filter Features"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### Find Feature"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This command accepts keyword(s) and searches either the entire activity list or the last shown list for activities with "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "names containing each keyword."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### Filter Feature"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This feature accepts space-separated keyword(s) to search either the entire list or the last shown list "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "for activities with tags matching each keyword. The keywords should be an exact-match with the tag names."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.8.1 Design Considerations"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "As the `find` and `filter` commands are important for the user to analyse and eventually graph time-spent on each "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "activity. The user should be allowed to query for all useful combinations of activities in the activity list. "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This entails:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The user should be allowed to match for multiple keywords at once."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The user should be allowed to exclude certain activities by limiting his search to a previously shown list as "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    opposed to the entire activity list."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    (chaining `list`, `find`, and `filter` commands)."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.8.2a Current Implementation for Find"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* This feature is called by the user when the `find` command is entered into the command line. "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The string following the command are the parameters:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * `-s` flag indicates that the searching should be limited to activities previously shown to the user."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * The remaining parameters are a string of keywords separated by ` / `. "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The Parser will create a FindCommand object."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* The FindCommand will invoke its own `executeCommand()` method."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * The Parser\u0027s `lastShownList` will be cleared."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * Then it will loop through `activityList` to find activities with names that contain the keyword."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * If one is found, it will be added to `lastShownList`."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * `printResults()` of the Ui will be called:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * If `lastShownList` is not empty, it will print the matching activities."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * Else, it will respond to the user that there are no tasks which match the given keyword."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### 3.8.2b Current Implementation for Filter "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* This feature is called by the user when the `filter` command is entered into the command line. The space separated strings following the command are the keywords to match activity tags with."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The Parser will create a FilterCommand object."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* The FindCommand will invoke its own `executeCommand()` method."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* The Parser\u0027s `lastShownList` will be cleared."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* For each keyword:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * Then it will loop through `activityList` to find activities with tags that contain the keyword."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * If one is found, it will be added to `lastShownList`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * `printResults()` method of the Ui will be called"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * If `lastShownList` is not empty, it will print the matching activities."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * Else, it will respond to the user that there are no tasks which match the given keyword."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.8.3 Sequence Diagram"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The following illustrates the execution sequence of a general use case. "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Note: Due to the sequence similarities between `find` and "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "      `filter`, the sequence diagram for `filter` is omitted."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![image_info](./pictures/Find_Sequence_Diagram.png)"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![image_info](./pictures/Find_Reference_Frame.PNG)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.8.4 Additional features"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "`find` and `filter` command supports the limiting of searches to activities in the last shown list. This"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "is done in 2 ways:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The `-s` flag following the command (eg. `find -s keyword`)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The `;` delimiter for a combination of `find` and `filter` in a single input (eg. `find KEYWORD ; filter TAGNAME`)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " ![Chaining_Activity_Diagram](./pictures/Chaining_Activity_Diagram.png)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### 3.9 Graph Feature"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "btricec"
        },
        "content": "This feature gives the user a visual representation of their activity duration and activity goals.  "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "btricec"
        },
        "content": "Graph can be used along with `list`, `find` and `filter` to sieve out the data to be graphed."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.9.1 Current Implementation"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "btricec"
        },
        "content": "![graph seq diagram](./pictures/graph_seqDiag.png)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "btricec"
        },
        "content": "* This feature is called by the user when the `graph` command is entered into the command line. The user will then have to specify what he would like to graph (goals progress bar / tag duration / activity duration)."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "btricec"
        },
        "content": "* The Parser will create a GraphCommand object."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "btricec"
        },
        "content": "* The GraphCommand will invoke its own `executeCommand()` method.  "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Graph allocations**  "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "btricec"
        },
        "content": "This displays the progress bar for the duration with respect to allocated time of activities in the `lastShownList`. "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "btricec"
        },
        "content": "* If the user indicated `targets`, Ui calss will be called to execute graphTargets."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Graph tags**  "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "btricec"
        },
        "content": "This displays a bar graph of the cumulative duration of the tags for each activity in the `lastShownList`."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "btricec"
        },
        "content": "E.g. if 3 activities in the `lastshownlist` are tagged `CS2113`, the durations of these 3 activities are added up and associated with the tag `CS2113` in the graph."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "btricec"
        },
        "content": "* If the user indicated `tags`, `GraphCommand` will call it\u0027s own `graphTags` method."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "btricec"
        },
        "content": "* A HashMap (`tags`) of tags to duration is created."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `graphTags` iterates through every activity in `lastshownlist` and in each loop, `extractTags` is called."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `extractTags` loops through the tags of that activity. Tag is added to the `tags` if it is not found. Else, the duration of the activity is added to the corresponding tag in `tags`."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `tags` and `interval` (how many minutes each point in the graph represents) is passed to the method printTagGraphs in Ui to print the graph."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Graph activities**  "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "btricec"
        },
        "content": "This displays a bar graph of the durations of each activity in the `lastShownList`."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "btricec"
        },
        "content": "* If the user indicated `activities`, `GraphCommand` will call it\u0027s own `graphDuration` method."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `graphDuration` calls `printActivityGraph` of the Ui class and passes the `interval` parameter, which is how many minutes each point in the graph represents."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.9.2 Additional features"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "btricec"
        },
        "content": "As graph gets it\u0027s data based on the `lastShownList`, users can pair the `graph` command with `find`, `filter`, and `list` to sieve out the activities to be graphed."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## 4. Appendix"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Product Scope"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### Target user profile"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* University students with poor time management skills who are struggling to allocate time efficiently for"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "siuhian"
        },
        "content": "  the numerous deadlines/tasks."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Users who are reasonably comfortable using CLI apps."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### Value proposition"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Allow users to record their daily activities and track their time usage in a user-friendly manner. "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v1.0|user|start a new activity|track the time spent on the activity|"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v1.0|user|end an activity|track the total time i spent on the activity|"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v1.0|user|abort an activity|record a different activity|"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v1.0|user|store the completed activities in a list|analyse how I spent my time|"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|delete an activity|remove activities that I do not want to track|"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|search by activity name|view similar activities|"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|filter activities by tags|view activities of the same category|"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|view the activities by date|see how much time I have spent on different activities|"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|continue my activities at another time|do other things between activities|"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|edit past activities|keep a more accurate record of activities|"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|automate the deletion of old activities|keep a more concise log of activities|"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The program should be usable by a novice who has never used a time management application."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The program should work on most mainstream OSes. "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The program should be portable to other systems. "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* *Mainstream OSes:* Windows, MacOS, Linux "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Instructions for Manual Testing  "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### Launch and Shutdown"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "btricec"
        },
        "content": "  1. Download the jar file and data.csv file."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "btricec"
        },
        "content": "  2. Copy both into an empty folder."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "btricec"
        },
        "content": "  3. Create a folder named `data` and put the data.csv file into this folder."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "btricec"
        },
        "content": "  4. Ensure the folder `data` and `jikan.jar` are in the same folder."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "btricec"
        },
        "content": "  5. Open command prompt and navigate to the folder. Run the jar file using `java -jar jikan.jar`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "btricec"
        },
        "content": "  It is important to include the data.csv file to have data for testing!  "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### Listing activities"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "btricec"
        },
        "content": "  Test case: `list month april`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  Expected: A list of activities completed in the month of April should be shown."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "btricec"
        },
        "content": "  Test case: `list 25/03/2020`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "btricec"
        },
        "content": "  Expected: A list of activities completed on 25th March 2020 should be shown.  "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### Continuing activities"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "btricec"
        },
        "content": "  Test case: `continue lab 4 ex2`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "btricec"
        },
        "content": "  Expected: Message \"lab 4 ex2 was continued\" will be displayed."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "btricec"
        },
        "content": "  Test case: `start lab 4 ex2`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "btricec"
        },
        "content": "  Expected: Option to continue will be given. If \u0027yes\u0027 is typed, activity will be continued.  "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### Graphing activities"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "btricec"
        },
        "content": "Test case: (to be done in succession)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "btricec"
        },
        "content": "`find tutorial` then `graph 10`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "btricec"
        },
        "content": "Expected: List of activities that contain \u0027tutorial\u0027 will be shown."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "btricec"
        },
        "content": "Then a chart of the duration of these activities will be shown."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "btricec"
        },
        "content": "Test case: (to be done in succession)"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "btricec"
        },
        "content": "`list week` then `graph tags`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "btricec"
        },
        "content": "Expected: List of activities completed this week will be shown. "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "btricec"
        },
        "content": "Then a chart of the duration of the tags of these activities will be shown.  "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### Setting tag goals"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Test case: `goal core /g 24:00:00`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Expected: Message \"The goal for core has been added!\" will be displayed."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Test case: `goal core /g 22:00:00`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Expected: Message \"The goal for this tag already exists, do you want to update the goal?\" will be displayed."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* If \u0027yes\u0027 is entered, the goal will be updated and the message \"The goal for core was updated\" will be displayed."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* If \u0027no\u0027 is entered, the message \"Okay then, what else can I do for you?\" will be displayed and the program will wait for user\u0027s next command."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Test case: `goal`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Expected: List of tags and their associated goals will be displayed. "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  "
      }
    ],
    "authorContributionMap": {
      "rdimaio": 83,
      "btricec": 113,
      "siuhian": 225,
      "nigellenl": 115,
      "-": 28,
      "ananda-lye": 69
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "# Jikan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "**Jikan** is a CLI time-tracker built in Java that aims to help manage tasks and projects. Users can set tags and goals for their entries, ultimately being able to keep track of what\u0027s left to do and maintain an overview of how time was spent."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* [User Guide](UserGuide.md) | [Web version](https://ay1920s2-cs2113-t15-1.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* [Developer Guide](DeveloperGuide.md) | [Web version](https://ay1920s2-cs2113-t15-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* [About Us](AboutUs.md) | [Web version](https://ay1920s2-cs2113-t15-1.github.io/tp/AboutUs.html)"
      }
    ],
    "authorContributionMap": {
      "btricec": 1,
      "rdimaio": 4,
      "-": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "- [1. Target User Profile](#target-user-profile)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "- [2. Introduction](#introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "- [3. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "- [4. Features](#features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [4.1 Usage](#usage)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [4.2 Basic Commands](#basic-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.2.1. Start Activity](#starting-an-activity-start)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.2.2. Continue Activity](#continuing-an-activity-continue)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.2.3. End Activity](#ending-an-activity-end)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.2.4. Abort Activity](#aborting-an-activity-abort)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.2.5. Delete Activity](#delete-an-activity-delete)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.2.6. List Activities](#listing-activities-list)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.2.7. Edit Activity](#editing-an-activity-edit)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [4.3. Find and Filter Activity](#finding-and-filtering)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.3.1. Find Activity by Name](#finding-activities-by-name-find)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.3.2. Filter Activity by Tag](#filtering-activities-by-tags-filter)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "        - [4.3.3. Chaining Lists, Find and Filter](#chaining-finds--filters--s)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [4.4. Graphs](#graphs)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.4.1. Activity Time Graph](#activity-time-graph-graph-activities)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.4.2. Tags Time Graph](#tags-time-graph-graph-tags)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        - [4.4.3. Activity Allocation Graph](#activity-allocation-graph-graph-allocations)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.4.4. Chaining List, Find, Filter with Graph](#chaining-list-find-and-filter-with-graph-command)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [4.5. Tag Goals](#tag-goals)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.5.1. Set Goal](#set-goal-goal-tag_name-g-duration)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.5.2. Delete Goal](#delete-goal-goal-tag_name-d)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.5.3. View Goal](#view-goals-goal)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [4.6. Automated Cleaning](#automated-cleaning)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.6.1. Activate Cleaning](#activate-cleaning-clean-on)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.6.2. Deactivate Cleaning](#deactivate-cleaning-clean-off)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.6.3. Set Number of Activities to Clean](#set-the-number-of-activities-to-clean-clean-n)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    - [4.7. Automated Cleaning for Logs](#automated-cleaning-for-logs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.7.1. Activate Log Cleaning](#activate-log-cleaning-clean-log-on)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.7.2. Deactivate Log Cleaning](#deactivate-log-cleaning-clean-log-off)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        - [4.7.3. Set Number of Logs to Clean](#set-the-number-of-logs-to-clean-clean-log-n)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "- [5. Command Guide](#command-guide)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "## Target user profile"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "University students with poor time management skills who are struggling to allocate time efficiently for"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the numerous deadlines/tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Jikan is a CLI time management tool that allows you to track the amount of time that you spend on different activities so as to ensure"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "that time is allocated more efficiently to the different activities (i.e spending too much/too little time on an activity) . "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "This user guide will show you how to use the program effectively. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "2. Download the jar file of the latest version of `Jikan` from [here](https://github.com/AY1920S2-CS2113-T15-1/tp/releases)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "3. Create an empty folder and put the Jikan.jar file inside."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "4. Open command prompt and navigate to the folder. Run the jar file using `java -jar jikan.jar`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Features "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Jikan lets you record how much time you spend on various activities so that you can easily see what took up the most time today / this week / this month."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "(In the example below, we use the example of a student tracking his/her schoolwork, but Jikan can be used for more than just that!)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "To start, record your first activity using the `start ACTIVITY_NAME` command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Add some tags to your activities to group similar activities together using `/t`. Tags help you group activities of the same type together, "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "in this example, we use the tags feature to label activities according to their module code. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**(Note that each activity can only store two tags at maximum.)**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Add allocated time to your activities using `/a`. This allows users to set aside how much time they would like to spend on an activity and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "keep track on whether they are spending too much or too little time for that particular activity."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "When you are done with the activity, or want to move onto something else, tell Jikan to `end` and the Activity time will be recorded and saved to your list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "You can view all your activities using the `list` command. Or view all your activities over a period of time by using `list` with extra parameters. For example `list week` will return a list of all activities this current week, as shown below."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "![list week](./pictures/list_week.PNG)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "The list still looks very cluttered, we can reduce it further! Want to find everything you did for CS2113 this week? Filter out the activities you want to see using the `find` or `filter` command. This is our list after filtering out all our activities tagged as `2113`. (the -s flag tells Jikan to search our last shown list, i.e. the list of activities this week in this case)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "![Continue command sequence diagram](./pictures/filter.PNG)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "To easily see what took up the most of your time out of all the 2113 activities, use the `graph` command to view a chart of your activities. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![Continue command sequence diagram](./pictures/graph.png)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "Curious about what module took up the most time this week? We can use the `graph tags` command on our weekly activity list to find out."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "![Continue command sequence diagram](./pictures/graphtags.PNG)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "Evidently, it was CS2105."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Not done with an activity and want to continue on it? Use the `continue` command to continue recording time for a previously started activity."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Finally, when you\u0027re done and want to close the app, simply say `bye` and Jikan will exit."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This is just a quick overview of what Jikan can do for you. For more details on each individual command, read the command guide below."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Basic Commands  "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Starting an activity: `start` "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Starts recording the time for a new activity.  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `start ACTIVITY_NAME /a ALLOCATED_TIME /t TAGS`    "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": " * `ACTIVITY_NAME` can contains spaces and must be less than 25 characters.     "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `ACTIVITY_NAME` must also be unique (should the user start an already existing activity, the option to `continue` will be given).  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `ALLOCATED_TIME` should be of the format [HH:MM:SS] and cannot exceed 23:59:59."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* `TAGS` must be single spaced separated and a maximum of 2 tags can be stored."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `ALLOCATED_TIME` and `TAGS` are optional.  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": "`start assignment /a 01:30:00 /t CS1010`   "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "`start GER1000 quiz /t GER GEmod`  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": "`start revision`  "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": " "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Discouraged Names:**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * The following strings are used as parameters for other commands, and hence should be avoided in the `ACTIVITY_NAME` and `TAGS` as it may interfere with Jikan running smoothly:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    *  `/`,`;`, `/a`, `/t`,`/a`,`-s`,`/en`,`/ea`, `/d`, `/n`, `/g`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Continuing an activity: `continue`  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Continues recording the time of an activity that you have previously started.  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `continue ACTIVITY_NAME`  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `ACTIVITY_NAME` must be an existing activity in the activity list.  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "`continue revision`  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Ending an activity: `end`  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Stops recording the time for an ongoing activity and stores it into the activity list.  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format:** `end` "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* An activity must be started or continued before it can be ended.  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Aborting an activity: `abort`  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Aborts the current activity and does not save it to the activity list.  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `abort`  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "* An activity must be started or continued before it can be ended.  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Delete an activity: `delete`  "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Deletes an activity in the activity list.  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `delete ACTIVITY_NAME`  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Listing activities: `list`  "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Displays a list of the completed activities.  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `list TIME_PERIOD` "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btricec"
        },
        "content": "* If no `TIME_PERIOD` is given, all activities will be listed.  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `TIME_PERIOD` can be `day` or `week`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "* To list activities in a specific month of the current year, use `list month MONTH_NAME` where `MONTH_NAME` must be spelled out in full (i.e. January and not Jan)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Otherwise, `TIME_PERIOD` should be of the format [dd/MM/yyyy] or [yyyy-MM-dd]  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `TIME_PERIOD` can either be a specific date or over a range.  "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `list` lists all activities.    "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `list month april` lists all activities in April.  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `list week` or `list weekly` lists all activities in the current week.  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `list week 01/01/2020` lists all activities in the week of 01/01/2020.  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `list day` or `list daily` lists all activities in the current day.  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `list yesterday` lists all activities completed the day before."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `list 01/01/2020` or `list 2020-01-01` lists all activities completed on 1 Jan 2020.  "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `list 01/01/2020 20/02/2020` lists all activities than fall within 1 Jan 2020 and 20 Feb 2020.  "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Editing an activity: `edit`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Usage:** Edits the name or allocated time of an activity in the activity list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format** "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* `edit ACTIVITY_NAME /en NEW_NAME`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* `edit ACTIVITY_NAME /ea NEW_ALLOCATED_TIME`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * `NEW_ALLOCATED_TIME` should be in the format [HH:MM:SS] "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "`edit CS1010 assignment /en CS1010 assignment 2` Activity name is edited to `CS1010 assignment 2`  "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "`edit CS1010 assignment /ea 10:00:00` Allocated time for activity is edited to `10:00:00` "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Finding and Filtering"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btricec"
        },
        "content": "By using `find` and `filter` commands, the user can reduce clutter and zoom-in to specific activities containing certain keywords or tags. The sub-query flag `-s` allows chaining any combination of `find` and `filter` commands to further reduce clutter. These features are particularly useful when the visualisation of time spent with minimal clutter is required."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Finding Activities by Name: `find`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** Users can request for a sub-list of activities that has names which contain any of the given keywords. If there are more than one keyword, each keyword should be separated with ` / `."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find KEYWORD`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find KEYWORD1 / KEYWORD2 / KEYWORD3`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Filtering Activities by Tags: `filter`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** Users can request for a sub-list of activities that has specific tags. Each tag should be space separated."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter TAGNAME`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter TAGNAME1 TAGNAME2`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Chaining Finds \u0026 Filters: `-s`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** Users can provide the `find` and `filter` command on the last shown list (also compatible after a `list` "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "command) by providing the `-s` flag after each `find` or `filter` command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Format:** "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find -s KEYWORD`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter -s TAGNAME`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter -s TAGNAME1 TAGNAME2`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find -s KEYWORD1 / KEYWORD2 / KEYWORD3`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "btricec"
        },
        "content": "If we want to find all CS2106 tutorials, we can first use `filter 2106` to filter out all activities tagged `2106`, then use the find command with the flag, `find -s Tutorial` to get a list of all 2106 Tutorials."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![chain graph activities](./pictures/filter-find_chain.PNG)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### Single Input Chaining: `;`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** Users can achieve the same outcome as multiple `-s` chaining with a single input. This is done by separating"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "`find` and `filter` commands with ` ; `."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter TAGNAME ; find KEYWORD1 ; find KEYWORD2`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter -s TAGNAME ; find KEYWORD1 ; find KEYWORD2`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Note: `-s` is only relevant in the first command of the entire input string, as subsequent commands are automatically chained."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Graphs"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "By using the following commands, users can get a visual representation of the time spent on each activity and their current progress. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The 3 types of graphs are :"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "btricec"
        },
        "content": " * *Activity time graph* - Total time spent on each activity: `graph activities SCALE`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "btricec"
        },
        "content": " * *Tags time graph* - Total time spent on each tag: `graph tags SCALE`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * *Activity allocation graph* - Progress of each activity in relation to its allocated time: `graph allocations`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "btricec"
        },
        "content": "Tip: Use `find`, `filter` and `list` commands to reduce clutter before graphing as the graphs are based on the last shown list of activities. "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Activity time graph: `graph activities`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** View a comparison of the absolute time spent on each activity in the last shown list. "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The parameter `SCALE` refers to the number of minutes represented by each point on the graph.  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "btricec"
        },
        "content": "Note: As the units of `SCALE` is minutes, if your activity is less than a minute, graph function will not show anything."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:**    `graph activities SCALE`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Example:**    "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "btricec"
        },
        "content": "`graph activities 10`    "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Tags time graph: `graph tags`  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** View a comparison of the absolute time spent on each tag in the last shown list. "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "btricec"
        },
        "content": "![graph tags](./pictures/graphtags_example.PNG)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "btricec"
        },
        "content": "For example, if we `graph tags 1` for the activity list above, we will get the following graph:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "btricec"
        },
        "content": "![graph tags](./pictures/graphtags_example2.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "btricec"
        },
        "content": "`activity 1` and `activity 2` are both tagged `tag1` and have a duration of 5 mins. "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "btricec"
        },
        "content": "`activity 3` and `activity 4` are both tagged `tag2` and have a duration of 2 and 3 mins respectively.   "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "btricec"
        },
        "content": "Adding up the durations for each tag, we get 10 mins for `tag1` and 5 mins for `tag2`. As we chose the graph to have a scale of 1 min, there are (10 asterisk representing 1 min each) for `tag1` and 5 asterisks for `tag2` in the graph.  "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "btricec"
        },
        "content": "As tags can be used to group activities of a similar nature together (i.e. same module), this feature can be used to easily see what type of activity took up the most time."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `graph tags SCALE`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Example:**    "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "btricec"
        },
        "content": "`graph tags 1` "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Activity allocation graph: `graph allocations`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** View the progress of activities to see how much time was spent on the activity relative to the allocated time."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Note: Only activities with an `ALLOCATED_TIME` will be shown."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![graph_allocations](./pictures/listforgraphallocations.png)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siuhian"
        },
        "content": "For example, if we `graph allocations` for the activity list above, we will get the following graph:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![graph_allocations](./pictures/graphallocations.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`activity 3` and `activity 5` does not have an allocated time, thus they do not appear in the graph. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The percentage shown in the graph represents the activity\u0027s progress relative to their allocated time. (`activity 4` have a duration of 2 seconds while its allocated time was 5 seconds, 2/5 * 100% \u003d 40%. Thus the progress of `activity 4` is 40%"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siuhian"
        },
        "content": "as shown in the graph)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `graph allocations`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Chaining `list`, `find` and `filter` with `graph` command:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "btricec"
        },
        "content": "Using `list`, `find` and `filter` commands you can sieve out the information you wish to be graphed."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Graph Activities Example:**  "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "btricec"
        },
        "content": "![chain graph activities](./pictures/filter-graph_chain.PNG)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "btricec"
        },
        "content": "`filter 2113` gives all activities tagged `2113`, then we can use `graph activities 5` to view a graph of the duration for each activity."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Graph Tags Example:**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "btricec"
        },
        "content": "![chain graph tags](./pictures/list-graphtags_chain.PNG) "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "btricec"
        },
        "content": "`list 25/03/2020` gives all activities completed on 25th March 2020, then we can use `graph tags 5` to view the graph of the tags. Each asterisk represents 5 minutes, as indicated by the `SCALE` parameter of the graph command."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Graph Allocations Example:**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "btricec"
        },
        "content": "![chain graph tags](./pictures/find-allocations_chain.PNG) "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`find Lab` gives us all `Lab` activities, then we can use `graph allocations` to view the progress bar of each of the activities to see how much time was spent on the activity relative to the time that was allocated. "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## Tag Goals"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "By using the `goal` command, users can set specific goals for how long they would like to spend on activities under a certain tags as well as view the amount of time they have spent in total for those activities as compared to their goal."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Set goal: `goal TAG_NAME /g DURATION`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Usage:** Sets a duration goal for a tag"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format:** `goal TAG_NAME /g DURATION`  "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The duration should be in the format [HH:MM:SS]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Example:** `goal core /g 24:00:00` a goal of `24:00:00` is added for the tag `core`  "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Delete goal: `goal TAG_NAME /d`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Usage:** Deletes the duration goal set for the tag."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format:** `goal TAG_NAME /d`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### View goals: `goal`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Usage:** Displays the tags with their goals, actual time spent on activities with these tags and the difference between the 2 timings."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format:** `goal`  "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "![goal display](./pictures/GoalDisplay.PNG)  "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "siuhian"
        },
        "content": "## Automated Cleaning"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Jikan provides a `clean` command where users can automate the cleaning of activities from the activity list at application startup."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Activate cleaning: `clean on`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Switch on automated cleaning."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean on`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Deactivate cleaning: `clean off`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Switch off automated cleaning. "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean off`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Set the number of activities to clean: `clean /n`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Set a number of activities to clean."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean /n NUMBER`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Note: Once cleaning is switched on, the automated cleaning persists (i.e cleaning will be done at every application startup) until it is switched off."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![CleanExample](./pictures/cleanlist.png)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Taking a look at this cluttered activity list, we can see that there are some activities which are done (i.e duration \u003e allocation)."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Thus, to reduce clutter, we would like to get rid of these done activities. "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "siuhian"
        },
        "content": "However, since the list is so huge, it would be troublesome to use the delete function as users will have to manually navigate through"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the list to identify the done activities and delete them."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siuhian"
        },
        "content": "This is where the `clean` command would be useful. See that activity 6, 7 and 10 are done."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![CleanExample](./pictures/cleanEg.png)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "siuhian"
        },
        "content": "By using the `clean` command. Users can choose how much of these done activities to clean, for the example here, the number is set to 2."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![CleanExample](./pictures/afterClean.png)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Upon the next startup, the automated cleaning will do its work and clean the 2 oldest done activities (i.e oldest here is based on date)."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Note that since the user specified to clean only 2 activities, only activity 6 and 7 are cleaned and activity 10 remains in the activity list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Automated Cleaning for Logs:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Jikan also provides cleaning for log file which are used to record important information during program execution. This feature will be useful"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "siuhian"
        },
        "content": "to users who are running this application on systems with limited hardware (small storage space)."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Activate log cleaning: `clean log on`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Switch on automated cleaning."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean log on`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Deactivate log cleaning: `clean log off`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Switch off automated cleaning. "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean log off`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Set the number of logs to clean: `clean log /n`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Set number of lines of logs to clean."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean log /n NUMBER`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## Command Guide"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Start an activity: `start ACTVITY_NAME` "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * optional: `start ACTIVITY_NAME /a ALLOCATED_TIME /t TAGS`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Abort an activity: `abort`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Stop an activity: `end`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Continue an activity: `continue ACTIVITY_NAME`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* List all activities: `list`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "btricec"
        },
        "content": "    * List today\u0027s activities: `list day` or `list daily` or `list today`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "btricec"
        },
        "content": "    * List yesterday\u0027s activities: `list yesterday`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List this week\u0027s activities: `list week` or `list weekly`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * List a specific week\u0027s activities by day: `list week DATE` or `list weekly DATE`, "
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List this month\u0027s activities: `list month` or `list monthly`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "btricec"
        },
        "content": "        * List a specific month\u0027s activities by day: `list month MONTH_NAME` where `MONTH_NAME` must be spelled out in full"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List a specific day\u0027s activities: `list DATE`, where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List activities within a time frame: `list DATE1 DATE2`, where both `DATE1` and `DATE2` are "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Edit an activity: `edit ACTIVITY_NAME [flag]`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * Edit activity name: `edit ACTIVITY_NAME /en NEW_NAME`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * Edit activity allocated time: `edit ACTIVITY_NAME /ea NEW_ALLOCATED_TIME`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Delete an activity: `delete ACTIVITY_NAME`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Find activities with keyword: `find KEYWORD`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * optional: `find KEYWORD1 / KEYWORD2` for multiple keywords"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * optional: `find -s KEYWORD` for more specific find"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Filter activities by tags: `filter TAG_NAME`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * optional: `filter TAG1 TAG2` for multiple tags"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * optional: `filter -s TAG_NAME` for more specific filter"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Set a goal for tags: `goal TAG_NAME /g DURATION`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Delete a goal for tags: `goal TAG_NAME /d`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* View goals for tags: `goal`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Display graph by tags: `graph tags INTERVAL`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Display graph by duration: `graph activities INTERVAL`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Display graph by targets: `graph targets`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Clean data files: `clean [command]`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Activate auto data cleaner: `clean on`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Activate auto log cleaner: `clean log on`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Deactivate auto data cleaner: `clean off`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Deactivate auto log cleaner: `clean log off`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Specify number of files to clean for data: `clean /n NUMBER`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Specify number of files to clean for logs: `clean log /n NUMBER`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Terminate the program: `bye`"
      }
    ],
    "authorContributionMap": {
      "btricec": 119,
      "rdimaio": 11,
      "siuhian": 108,
      "nigellenl": 92,
      "-": 23,
      "ananda-lye": 70
    }
  },
  {
    "path": "docs/team/ananda-lye.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "# Project Portfolio Page (PPP)  "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Project overview  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Jikan** is a CLI time-tracker built in Java that  aims to help manage tasks and projects.  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Users can set tags and goals for their entries,  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "ultimately being able to keep track of what\u0027s left to do and maintain an overview of how time was spent.  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Summary of contributions  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Code contributed  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "[Link to tP Code Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dananda-lye)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Find and Filter Activities"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Developed the `find` and `filter` commands for users to view a sub-list of activities, matching for name and "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    tag keywords respectively."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Both commands allow for multiple keywords to be matched with `find` accepting `/` separated keywords and `filter`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    accepting space-separated keywords. Activities which match either keyword will be included in the sub-list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Both commands can be limited to only searching activities in the last shown list by including the `-s` flag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    This is particularly helpful when used before graphing functions to omit undesired activities."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * This can also be included as a single-line user input, separating commands by `;` which reduces the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        number of user inputs and printing calls required to achieve the same results."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "\t"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Last Shown List Implementation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Proposed and implemented the last shown list which is used in `list`, `find`, `filter` and `graph` commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * This proposal sets the direction for how the Jikan software is used, as all analysis done by the user revolves"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    around this functionality (combining `list` by date range, `find` and `filter` chaining, to allow `graph` to be "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    clutter-free)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Activity Progress and Ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Proposed and implemented the progress percentage based user messages, allowing for the progress bars in `end` and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    `graph` commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Implemented and de-conflicted the high-level flow of the User Guide, distinguishing from Basic to Advanced features for "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "improved format standardisation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Provided instructions and examples for `find` and `filter` commands and their multiple variations."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Contributions to the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Drafted write-ups and diagrams in the design section, mainly the overall architecture diagram and class diagram."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Drafted the `find` and `filter` sections, including the sequence diagram, design considerations, and proposed features."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Generated ideas with the team on the set of features for the Jikan application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Made use of the issue tracker extensively to track enhancement and bugs found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Developed jUnit tests for `find`, `filter` and `list` commands."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Review/mentoring contributions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Provided feedback to teammates before and after implementation to ensure that everyone is on the same page."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Provided feedback to the developer guide of another team."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * [Reviewing of DG on Week 11](https://github.com/nus-cs2113-AY1920S2/tp/pull/14)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* Reported bugs in other team\u0027s product in PE dry run."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * [PED](https://github.com/ananda-lye/ped/issues)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Finding Activities by Name: `find`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** Users can request for a sub-list of activities that has names which contain any of the given keywords. If there are more than one keyword, each keyword should be separated with ` / `."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find KEYWORD`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find KEYWORD1 / KEYWORD2 / KEYWORD3`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Filtering Activities by Tags: `filter`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** Users can request for a sub-list of activities that has specific tags. Each tag should be space separated."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Format:**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter TAGNAME`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter TAGNAME1 TAGNAME2`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Chaining Finds \u0026 Filters: `-s`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** Users can provide the `find` and `filter` command on the last shown list (also compatible after a `list` "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "command) by providing the `-s` flag after each `find` or `filter` command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Format:** "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find -s KEYWORD`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter -s TAGNAME`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter -s TAGNAME1 TAGNAME2`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find -s KEYWORD1 / KEYWORD2 / KEYWORD3`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "If we want to find all CS2106 tutorials, we can first use `filter 2106` to filter out all activities tagged `2106`, then use the find command with the flag, `find -s Tutorial` to get a list of all 2106 Tutorials."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### Single Input Chaining: `;`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Usage:** Users can achieve the same outcome as multiple `-s` chaining with a single input. This is done by separating"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "`find` and `filter` commands with ` ; `."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter TAGNAME ; find KEYWORD1 ; find KEYWORD2`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter -s TAGNAME ; find KEYWORD1 ; find KEYWORD2`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Note: `-s` is only relevant in the first command of the entire input string, as subsequent commands are automatically chained."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Contributions to the Developer Guide (Extracts)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The section provides a high-level explanation of how the Jikan software is designed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### 2.1 High-Level Architecture"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The users interact with the Jikan software which modifies the local storage data file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Within the Jikan software, there are 5 main components:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Parser Component** - Parses the user inputs and calls the relevant `Command` object to execute the desired"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Ui Component** - Prints to the user the output of the desired `Commands`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Commands Component** - Contains all the `Commands` to be called by the `Parser` based on user inputs."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Activities Component** - Maintains the non-permanent state of all `Activities` in the `Activity List` to be accessed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "by the executing `Commands`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* **Storage Component** - Interacts with and modifies the local storage file, which contains the permanent (lasting"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "even after the program terminates) state of all activities. It retrieves this permanent state and populates the `Activity List` at the start of each session."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### 3.8 Find \u0026 Filter Features"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### Find Feature"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This command accepts keyword(s) and searches either the entire activity list or the last shown list for activities with "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "names containing each keyword."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### Filter Feature"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This feature accepts space-separated keyword(s) to search either the entire list or the last shown list "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "for activities with tags matching each keyword. The keywords should be an exact-match with the tag names."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.8.1 Design Considerations"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "As the `find` and `filter` commands are important for the user to analyse and eventually graph time-spent on each "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "activity. The user should be allowed to query for all useful combinations of activities in the activity list. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This entails:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The user should be allowed to match for multiple keywords at once."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The user should be allowed to exclude certain activities by limiting his search to a previously shown list as "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    opposed to the entire activity list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    (chaining `list`, `find`, and `filter` commands)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.8.2a Current Implementation for Find"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* This feature is called by the user when the `find` command is entered into the command line. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "The string following the command are the parameters:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * `-s` flag indicates that the searching should be limited to activities previously shown to the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * The remaining parameters are a string of keywords separated by ` / `. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The Parser will create a FindCommand object."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The FindCommand will invoke its own `executeCommand()` method."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * The Parser\u0027s `lastShownList` will be cleared."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Then it will loop through `activityList` to find activities with names that contain the keyword."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * If one is found, it will be added to `lastShownList`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * `printResults()` of the Ui will be called:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * If `lastShownList` is not empty, it will print the matching activities."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * Else, it will respond to the user that there are no tasks which match the given keyword."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.8.2b Current Implementation for Filter "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* This feature is called by the user when the `filter` command is entered into the command line. The space separated strings following the command are the keywords to match activity tags with."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The Parser will create a FilterCommand object."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The FindCommand will invoke its own `executeCommand()` method."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The Parser\u0027s `lastShownList` will be cleared."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* For each keyword:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Then it will loop through `activityList` to find activities with tags that contain the keyword."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * If one is found, it will be added to `lastShownList`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * `printResults()` method of the Ui will be called"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * If `lastShownList` is not empty, it will print the matching activities."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * Else, it will respond to the user that there are no tasks which match the given keyword."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "\t"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.8.4 Additional features"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "`find` and `filter` command supports the limiting of searches to activities in the last shown list. This"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "is done in 2 ways:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The `-s` flag following the command (eg. `find -s keyword`)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The `;` delimiter for a combination of `find` and `filter` in a single input (eg. `find KEYWORD ; filter TAGNAME`)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 166
    }
  },
  {
    "path": "docs/team/btricec.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": "# Project Portfolio Page (PPP)  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "## Project overview  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Jikan** is a CLI time-tracker built in Java that  aims to help manage tasks and projects.  Users can set tags and goals for their entries,  ultimately being able to keep track of what\u0027s left to do and maintain an overview of how time was spent.  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "## Summary of contributions  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Code contributed  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "[Link to tP Code Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dbtricec)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Enhancements implemented  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Starting and ending activities "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * Implemented the basic `start` and `end` commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * `start` allows the user to start an activity and add tags to that activity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * `end` ends the started activity and saves it to the activity list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * `abort` stops the current activity and does not save it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * Implemented an additional feature that gives the user the option to end an activity when the user exits the app after starting an activity."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Continue"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * Allows the user to continue an activity in the activity list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * Implemented an additional feature that gives the user the option to continue an activity if they used the `start` command to start an activity already in the activity list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Graph activities and tags"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * `graph activities` displays a graph of the duration of each activity based on the `lastShownList`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * `graph tags` calculates the duration of activity tags in the `lastShownList` and displays a graph of the cumulative duration for each tag."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "  * Allows the user to delete an activity from the activity list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Contributions to documentation  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Did the *Usage* section to give an overall example of how Jikan can be used in logical flow of commands, providing examples of expected outputs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Provided syntax and usage examples for some commands (namely, start, end, continue, abort and delete)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Contributions to the DG  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Drew command class diagram"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Explained the implementation of the `continue` command (under section 3.5) using Sequence Diagrams "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Explained the implementation of the `graph` command (under section 3.9) using Sequence Diagrams"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Gave instructions for manual testing and included sample test cases for `list`, `continue` and `graph` commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Contributions to team-based tasks  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Set up the issue tracker with relevant labels and milestones."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Made extensive use of the issue tracker to manage enhancements and bugs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Released v1.0 and v2.0 of Jikan, and also provided a set of sample data for v2.0 for testing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Did more extensive refactoring for commands, moving the command execution to the command class itself."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Review contributions  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Contributed to ideation and implementation discussion of new features offline."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "* Although I did not explicitly review PRs on github, I actively tried to help with text-ui issues which were a big problem for our group. (text-ui file had to be updated every day to reflect the current date for it to pass)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "## Contributions to the User Guide (extracts)  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "Jikan lets you record how much time you spend on various activities so that you can easily see what took up the most time today / this week / this month."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "(In the example below, we use the example of a student tracking his/her schoolwork, but Jikan can be used for more than just that!)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "To start, record your first activity using the `start ACTIVITY_NAME` command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "Add some tags to your activities to group similar activities together using `/t`. Tags help you group activities of the same type together, "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "in this example, we use the tags feature to label activities according to their module code. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "**(Note that each activity can only store two tags at maximum.)**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "Add allocated time to your activities using `/a`. This allows users to set aside how much time they would like to spend on an activity and"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "keep track on whether they are spending too much or too little time for that particular activity."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "When you are done with the activity, or want to move onto something else, tell Jikan to `end` and the Activity time will be recorded and saved to your list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "You can view all your activities using the `list` command. Or view all your activities over a period of time by using `list` with extra parameters. For example `list week` will return a list of all activities this current week, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "![list week](./pictures/list_week.PNG)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "The list still looks very cluttered, we can reduce it further! Want to find everything you did for CS2113 this week? Filter out the activities you want to see using the `find` or `filter` command. This is our list after filtering out all our activities tagged as `2113`. (the -s flag tells Jikan to search our last shown list, i.e. the list of activities this week in this case)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "![Continue command sequence diagram](./pictures/filter.PNG)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "To easily see what took up the most of your time out of all the 2113 activities, use the `graph` command to view a chart of your activities. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "![Continue command sequence diagram](./pictures/graph.png)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "Curious about what module took up the most time this week? We can use the `graph tags` command on our weekly activity list to find out."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "![Continue command sequence diagram](./pictures/graphtags.PNG)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "Evidently, it was CS2105."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "Not done with an activity and want to continue on it? Use the `continue` command to continue recording time for a previously started activity."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "Finally, when you\u0027re done and want to close the app, simply say `bye` and Jikan will exit."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "This is just a quick overview of what Jikan can do for you. For more details on each individual command, read the command guide below."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Starting an activity: `start` "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Starts recording the time for a new activity.  "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `start ACTIVITY_NAME /a ALLOCATED_TIME /t TAGS`    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": " * `ACTIVITY_NAME` can contains spaces and must be less than 25 characters.     "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `ACTIVITY_NAME` must also be unique (should the user start an already existing activity, the option to `continue` will be given).  "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `ALLOCATED_TIME` should be of the format [HH:MM:SS] and cannot exceed 23:59:59."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `TAGS` must be single spaced separated and a maximum of 2 tags can be stored."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `ALLOCATED_TIME` and `TAGS` are optional.  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "`start assignment /a 01:30:00 /t CS1010`   "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "`start GER1000 quiz /t GER GEmod`  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "`start revision`  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Continuing an activity: `continue`  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Continues recording the time of an activity that you have previously started.  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `continue ACTIVITY_NAME`  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "* `ACTIVITY_NAME` must be an existing activity in the activity list.  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btricec"
        },
        "content": "`continue revision`  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Ending an activity: `end`  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Stops recording the time for an ongoing activity and stores it into the activity list.  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `end` "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "* An activity must be started or continued before it can be ended.  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Aborting an activity: `abort`  "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Aborts the current activity and does not save it to the activity list.  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `abort`  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "* An activity must be started or continued before it can be ended.  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "### Delete an activity: `delete`  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Usage:** Deletes an activity in the activity list.  "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Format:** `delete ACTIVITY_NAME`  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btricec"
        },
        "content": "  "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "## Contributions to the Developer Guide (extracts)  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btricec"
        },
        "content": "### 3.5 Continue Feature"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btricec"
        },
        "content": "The continue feature allows the user to continue a previously ended activity."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### 3.5.1 Current Implementation"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btricec"
        },
        "content": "(diagrams are omitted) "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Continuing an activity:**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   When the user enters the command to continue an activity, a  _ContinueCommand_  object is created in  _Parser_. The method  `executeCommand()`  of the  _ContinueCommand_  object is then called."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   `executeCommand`  checks if the given activity name exists in the activityList by calling  `findActivity()`  (if it doesn’t an exception is thrown, omitted in the sequence diagram above)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   It then gets the  `name`  and  `tags`  of the activity to be continued and saves it to a public static variable of  _Parser_  object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   It also gets the current time and saves it to a public static variable of  _Parser_  object."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Ending a continued activity:**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   When the user wants to end the continued activity, an  _EndCommand_  object is created in  _Parser._  The method  `executeCommand()`  of the  _ContinueCommand_  object is then called and it in turn executes the  `saveActivity()`  method of the  _ActivityList_  class."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   `saveActivity()`  gets the current time and saves it to a public static variable of  _Parser_  object."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   Then the elapsed time is calculated using the  `between()`  method of  _Duration_  class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   The elapsed time is added with the previous duration of the activity to get the  `newDuration`  using the  `plus()`  method of Duration class."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   `updateDuration()`  method is called to update the  `duration`  attribute of the continued activity in the  `activityList`  as well as the  `data.csv`  file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### 3.5.2 Design Considerations"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Execution:**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   Continue by activity name (current implementation)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btricec"
        },
        "content": "    -   **Cons:**  Activity names have to be unique."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btricec"
        },
        "content": "    -   **Pros:**  More versatile, resistant to changes in the activity list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   Continue by activity index"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btricec"
        },
        "content": "    -   **Cons:**  need to add an additional index field to the Activity class, index is not fixed, changes when an activity is deleted"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btricec"
        },
        "content": "    -   **Pros:**  Can reuse activity names."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btricec"
        },
        "content": "Although the current implementation of the continue feature disallows users to have multiple activities with the same name, we felt that the versatility of this choice outweighed the cons. Firstly because if the activityList got too big, it would be hard for the user to get the index of the task they wanted to continue. Also, the index would constantly be changing when changes are made to the list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### 3.5.3 Additional Features"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btricec"
        },
        "content": "As users can only have activities with unique names, when a user wants to start an activity which already exists in the activityList, they will be given the option to continue the stated activity."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "btricec"
        },
        "content": "### 3.9 Graph Feature"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "btricec"
        },
        "content": "This feature gives the user a visual representation of their activity duration and activity goals.  "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "btricec"
        },
        "content": "Graph can be used along with  `list`,  `find`  and  `filter`  to sieve out the data to be graphed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### 3.9.1 Current Implementation"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btricec"
        },
        "content": "(diagrams are omitted) "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   This feature is called by the user when the  `graph`  command is entered into the command line. The user will then have to specify what he would like to graph (goals progress bar / tag duration / activity duration)."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   The Parser will create a GraphCommand object."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   The GraphCommand will invoke its own  `executeCommand()`  method."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Graph targets**  "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "btricec"
        },
        "content": "This displays the progress bar for the duration with respect to allocated time of activities in the  `lastShownList`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   If the user indicated  `targets`, Ui calss will be called to execute graphTargets."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Graph tags**  "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "btricec"
        },
        "content": "This displays a bar graph of the cumulative duration of the tags for each activity in the  `lastShownList`. E.g. if 3 activities in the  `lastshownlist`  are tagged  `CS2113`, the durations of these 3 activities are added up and associated with the tag  `CS2113`  in the graph."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   If the user indicated  `tags`,  `GraphCommand`  will call it\u0027s own  `graphTags`  method."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   A HashMap (`tags`) of tags to duration is created."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   `graphTags`  iterates through every activity in  `lastshownlist`  and in each loop,  `extractTags`  is called."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   `extractTags`  loops through the tags of that activity. Tag is added to the  `tags`  if it is not found. Else, the duration of the activity is added to the corresponding tag in  `tags`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   `tags`  and  `interval`  (how many minutes each point in the graph represents) is passed to the method printTagGraphs in Ui to print the graph."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Graph activities**  "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "btricec"
        },
        "content": "This displays a bar graph of the durations of each activity in the  `lastShownList`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   If the user indicated  `activities`,  `GraphCommand`  will call it\u0027s own  `graphDuration`  method."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "btricec"
        },
        "content": "-   `graphDuration`  calls  `printActivityGraph`  of the Ui class and passes the  `interval`  parameter, which is how many minutes each point in the graph represents."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "btricec"
        },
        "content": "#### 3.9.2 Additional features"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "btricec"
        },
        "content": "As graph gets it\u0027s data based on the  `lastShownList`, users can pair the  `graph`  command with  `find`,  `filter`, and  `list`  to sieve out the activities to be graphed."
      }
    ],
    "authorContributionMap": {
      "btricec": 203
    }
  },
  {
    "path": "docs/team/nigellenl.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "# Project Portfolio Page (PPP)  "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## Project overview  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Jikan** is a CLI time-tracker built in Java that  aims to help manage tasks and projects.  Users can set tags and goals for their entries,  ultimately being able to keep track of what\u0027s left to do and maintain an overview of how time was spent.  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## Summary of contributions  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Code contributed  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "[Link to tP Code Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dnigellenl)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Enhancements implemented  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Edit activities"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * Ensures that the activity record is accurate by giving the user the ability to update certain parameters of the activities that have been recorded."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * Allow the user to edit the name of existing activities in the activity list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * Allow the user to edit the allocated time of existing activities in the activity list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * `edit ACTIVITY_NAME /en NEW_NAME` allows the user to edit the activity name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * `edit ACTIVITY_NAME /ea NEW_ALLOCATED_TIME` allows the user to edit the allocated time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Goal setting"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * Allow the user to set and delete goals based on existing tags."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * `goal TAG_NAME /g GOAL_TIME` allows the user to set the goal for that tag."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * `goal TAG_NAME /d` allows the user to delete the goal set for that tag."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* View goals "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * Allow the user to view the goals easily in a table format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * `goal` displays all the goals that have been set together with the actual time spent on the activities under the tags and the amount of time left to meet the goal. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Contributions to documentation  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Provided syntax and usage examples for some commands (edit, set goal, view goal)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Added command summary with command name and syntax in the User Guide."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Contributions to the DG  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Added setting up instructions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Explained the implementation of the `edit` command (under section 3.4) using Sequence Diagram. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Gave instructions for manual testing and included sample test cases for `goal` command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Added the user stories for the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Added the non-functional requirements for the program. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Contributions to team-based tasks  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Made extensive use of the issue tracker to manage enhancements and bugs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Did refactoring for commands by creating command classes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Generate table of content for user guide."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Review contributions  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Discussed with team on how to further enhance existing features (e.g. allowing user to edit allocated time)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## Contributions to the User Guide (extracts)  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Editing an activity: `edit`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Usage:** Edits the name or allocated time of an activity in the activity list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format** "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* `edit ACTIVITY_NAME /en NEW_NAME`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* `edit ACTIVITY_NAME /ea NEW_ALLOCATED_TIME`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    * `NEW_ALLOCATED_TIME` should be in the format [HH:MM:SS] "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "`edit CS1010 assignment /en CS1010 assignment 2` Activity name is edited to `CS1010 assignment 2`  "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "`edit CS1010 assignment /ea 10:00:00` Allocated time for activity is edited to `10:00:00` "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Tag Goals"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "By using the `goal` command, users can set specific goals for how long they would like to spend on activities under a certain tags as well as view the amount of time they have spent in total for those activities as compared to their goal."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Set goal: `goal TAG_NAME /g DURATION`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Usage:** Sets a duration goal for a tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format:** `goal TAG_NAME /g DURATION`  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The duration should be in the format [HH:MM:SS]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Example:** `goal core /g 24:00:00` a goal of `24:00:00` is added for the tag `core`  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Delete goal: `goal TAG_NAME /d`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Usage:** Deletes the duration goal set for the tag."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format:** `goal TAG_NAME /d`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### View goals: `goal`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Usage:** Displays the tags with their goals, actual time spent on activities with these tags and the difference between the 2 timings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Format:** `goal`  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## Contributions to the Developer Guide (extracts)  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### 3.5 Edit feature"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The edit feature allows the user to make changes to activities that have been saved in the activity list. This is to allow the user to rectify any mistakes that may have been made during the initial recording of the activity. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.5.1 Current Implementation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The following sequence diagram shows how the edit feature works."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The current implementation of the edit feature allows the user to edit the activity name as well as its allocated time."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The following sequence diagram shows how the edit feature works for editing the activity name. The diagram for the editing of allocated time is omitted as the sequence is relatively similar.  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "_[The sequence diagram has been omitted in this section]_"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The current implementation of the edit feature allows the user to edit only the name and allocated time parameter of the activity. When the user wants to edit an activity using the edit command, a new EditCommand object is created. The `executeCommand()` method of the EditCommand object is called and the specified parameters are updated accordingly."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The order of method calls to edit the activity details is as follows if the specified activity exists (meaning `index !\u003d -1`) else an exception is thrown:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "1. The `updateName()` method of the ActivityList class is called, with the user-specified parameters of the activity index and new activity name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "2. The `get()` method is self-invoked by the ActivityList class to obtain the activity at the given index "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "3. The `setName()` method of the Activity class is called to edit the activity name to the user-specified name"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "4. The activity is updated with its new name in the activityList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "5. The `fieldChangeUpdateFile()` method of the StorageHandler class is called to update the data file with the new activity name."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.5.2 Additional Implementations"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The current implementation of the edit feature only allows the user to edit the activity name and allocated time. Hence, additional implementations of the edit feature could allow the user to edit other parameters of the activity such as the tags and the start and end dates. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "This will require the implementation of more update methods in the ActivityList class to allow for the changes to be updated in the activityList after it has been edited. Additionally, there may be more updates required if the tags were to be edited due to the tag goals feature."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The flowchart below shows the flow of activities if the feature of editing tags were to be implemented.   "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "_[The flowchart diagram has been omitted in this section]_"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.5.3 Design Considerations"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "##### Current Design"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The user is able to edit only the name and allocated time of the activity, which are user input data.     "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Pros:**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The user is able to correct any mistake made during the recording of the activity."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The user is able to adjust their allocated time for the activity based on their needs."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Ensures that the record of activities is accurate and consistent in order for more efficient analysis of the time spent."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Cons:** "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The user is only able to edit 2 parameters of the activity, which may be restrictive for them.  "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "##### Possible Design"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The user is able to edit any parameters of the activity, including tags, start and end date/time. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Pros:**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* The user has more flexibility in modifying the record of activities based on their needs."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "**Cons:**  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* By allowing the user to edit the date and time, there may be potential inaccuracies in the record of activities, defeating the purpose of the time tracking program. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* By allowing the user to edit the tags, the tag goals command may become more complicated due to the need to keep track of the presence of the tags."
      }
    ],
    "authorContributionMap": {
      "nigellenl": 132
    }
  },
  {
    "path": "docs/team/rdimaio.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "# Project Portfolio Page (PPP)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "## Project overview"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "**Jikan** is a CLI time-tracker built in Java that"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "aims to help manage tasks and projects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Users can set tags and goals for their entries,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "ultimately being able to keep track of what\u0027s left to do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "and maintain an overview of how time was spent."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Code contributed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "[Link to tP Code Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#\u003dundefined\u0026search\u003drdimaio)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * Storage handles saving, creating and accessing files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    This is a necessary feature, given the nature of Jikan as a timetracker"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    that needs to retain information across multiple sessions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* StorageHandler"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * Higher-level interface to Storage objects; "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    StorageHandler provides functions to retrieve and manipulate data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    for the rest of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* List"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * The `list` command allows the user to list all the activities for a specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    date or range of dates. In many cases, the user does not want to specify"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    the exact dates; that is why the user can simply ask to `list day`, `list week`,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "    `list month april` etc. to list entries belonging in the specified time frame."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Provided information on how to use the `list` command, including"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "all the possible parameters (`day`, `week`, `month`)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Contributions to the DG"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Provided information on the `Storage` object,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "including how to use it for multiple concurring data files"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Provided information on the `StorageHandler` object,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "specifically which functions can be used to write/edit/remove data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Provided information on the possibilities of the `list` command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Generating tables of content automatically for documentation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Made extensive use of the issue tracker"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * Labelled each PR and issue with severity and type"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * Linked PRs to close their respective issues automatically"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Review contributions"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Provided comments on possible ways to solve issues,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "e.g. [#162](https://github.com/AY1920S2-CS2113-T15-1/tp/issues/162)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Community"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * Reported bugs:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * [\"Submit post-lecture quiz\" missing from Week 12 Admin info section](https://github.com/nus-cs2113-AY1920S2/forum/issues/96)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * [Arrow pointing the wrong way in the new UML video?](https://github.com/nus-cs2113-AY1920S2/forum/issues/75)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * Helped other students:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * [Problem when importing contacts project to Intellij](https://github.com/nus-cs2113-AY1920S2/forum/issues/23#issuecomment-581352650)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * [Markdown syntax](https://github.com/nus-cs2113-AY1920S2/forum/issues/88#issuecomment-603329337)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "## Contributions to the User Guide (extracts)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Listing activities: `list`  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "**Usage:** Displays a list of the completed activities.  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "**Format:** `list TIME_PERIOD` "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* If no `TIME_PERIOD` is given, all activities will be listed.  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* `TIME_PERIOD` can be `day` or `week`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* To list activities in a specific month of the current year, use `list month MONTH_NAME` where `MONTH_NAME` must be spelled out in full (i.e. January and not Jan)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* Otherwise, `TIME_PERIOD` should be of the format [dd/MM/yyyy] or [yyyy-MM-dd]  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* `TIME_PERIOD` can either be a specific date or over a range.  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "**Example:**  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`list` List all activities.    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`list month april` Lists all activities in April.  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`list week` or `list weekly` List all activities in the current week.  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`list day` or `list daily` List all activities in the current day.  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`list 01/01/2020` or `list 2020-01-01` List all activities on 1 Jan 2020.  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`list 01/01/2020 20/02/2020` List all activities than fall within 1 Jan 2020 and 20 Feb 2020.  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### Command Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* List all activities: `list`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List today\u0027s activities: `list day` or `list daily`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List this week\u0027s activities: `list week` or `list weekly`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * List a specific week\u0027s activities by day: `list week DATE` or `list weekly DATE`, "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List this month\u0027s activities: `list month` or `list monthly`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * List a specific month\u0027s activities by day: `list month DATE` or `list monthly DATE`, "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List a specific day\u0027s activities: `list DATE`, where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List activities within a time frame: `list DATE1 DATE2`, where both `DATE1` and `DATE2` are "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    in either `yyyy-MM-dd` or `dd/MM/yyyy` format "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "## Contributions to the Developer Guide (extracts)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### 3.2 Storage feature"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "The Storage class represents the back-end of Jikan, handling the creation, saving and loading of data. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Jikan uses a `.csv` file to store its data, formatted in the following way:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`entry-name, start-time, end-time, duration, tags`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "All tags are saved in the same cell, separated by a white space; this design decision was taken to make sure that each entry occupies the same number of cells regardless of each entry’s number of tags. The tags are then separately parsed when the data is loaded."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Each Storage objects contains the path to the data file (`Storage.dataFilePath`), the File object representing the data file (`Storage.dataFile`), and an activityList populated with the data from the data file (`Storage.activityList`). Storage optionally supports multiple data files at the same time, allowing implementation of features like multiple sessions and multiple user profiles. "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Storage provides the following functions:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Constructing a Storage object via `Storage(String dataFilePath)`, which takes in the path to the desired data file (or the path where the user wants to create the data file) as a String object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Creating a data file via `createDataFile`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Writing to a data file via `writeToFile`. This function takes a single string as parameter and writes it to the data file. It is recommended to only pass single-line strings to keep the file nicely formatted. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Loading a pre-existing data file via `loadFile`. If a data file already exists for the provided data file path, the function will return `true`; if the specified data file did not previously exist, this function will call the `createDataFile` method and returns `false`. The return value is useful so that the application knows whether or not this is the first session with a specific data file or if data already exists."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Creating an ActivityList via `createActivityList`. This function calls `loadFile()` to check whether the file already existed or not; if the data file previously existed, it will construct an ActivityList object by passing the data from the data file to it, and return this populated ActivityList object; if the data file did not previously exist, it will return an empty activityList object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### 3.3 Storage handler"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "The StorageHandler class functions as a support to the main Storage class, allowing the Jikan application to manipulate the stored data file. Its main provided functions are:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Removing an entry from the data file via `removeLine`. This function takes in the number of the line to remove."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Replacing an entry in the data file via `replaceLine`. This function takes in the number of the line to replace, along with the String object that needs to be written to the data file in place of the replaced line."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "### 3.6 List feature"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "This feature is used to list activities within a range specified by the user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "If no parameter is passed to the `list` command, then all the stored activities will be displayed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "By passing a single date, the command returns all activities within that date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "By passing two dates, the command returns all activities that took place within the two dates."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "(for an activity to be included in the range, both its start and end time must be within the specified time range)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "The user can also provide a verbal command, such as `day`, `week`, or `month`, which"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "will return all the activities for that day, week or month respectively."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Additionally, the user can specify a specific week of month by including a date"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "(e.g. `list month 2020-03-01` returns all the activities in March 2020.)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "#### 3.6.1 Current implementation"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "* List all activities: `list`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List today\u0027s activities: `list day` or `list daily`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List this week\u0027s activities: `list week` or `list weekly`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * List a specific week\u0027s activities by day: `list week DATE` or `list weekly DATE`, "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List this month\u0027s activities: `list month` or `list monthly`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        * List a specific month\u0027s activities by day: `list month DATE` or `list monthly DATE`, "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List a specific day\u0027s activities: `list DATE`, where `DATE` is in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    * List activities within a time frame: `list DATE1 DATE2`, where both `DATE1` and `DATE2` are "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    in either `yyyy-MM-dd` or `dd/MM/yyyy` format"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 138,
      "btricec": 1
    }
  },
  {
    "path": "docs/team/siuhian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "# Project Portfolio Page (PPP)  "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": "## Project overview  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Jikan** is a CLI time-tracker built in Java that aims to help manage tasks and projects.  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Users can set tags and goals for their entries, ultimately being able to keep track of what\u0027s left to do and maintain an overview of how time was spent.  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "## Summary of contributions  "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Code contributed  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "[Link to tP Code Dashboard](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003dsiuhian)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Start activities"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Added new feature on top of the existing `start` command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `start` command now allows users to allocate a certain amount of time for that activity using the /a flag."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Fix bugs in the `start` command with inputs from the peer testing results."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Added more flexibility to the `start` command, `start cs2113 /a 10:30:00 /t tP` now works the same way as "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    `start cs2113 /t tP /a 10:30:00` meaning the positions of /a and /t flags can now be used interchangeably."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Added some more test cases to the Junit for StartCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* User interface"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Sourced and implemented the existing Jikan logo that greets the user upon execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Created a standard template to print lines to stdout. This feature is used to print error, acknowledgement and "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    reply messages from Jikan to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Implemented the `bye` command which makes use of Ui to exit from the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Automated cleaning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Built a automated cleaner that performs a batch delete on data and log files upon application execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * This batch delete on data works by deleting a number of completed activities (specified by user) starting from the oldest"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    completed activity (e.g completed activities are activities that have met its allocated time)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Implemented `clean` command which allows the user to switch on/off the automated cleaner."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Allows the user to specify how much completed activities/logs to delete for each round of automated cleaning. This"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    is done through the /n flag in the clean command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Did a Junit for CleanCommand to further test and improve the reliability of `clean` command. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Graph allocations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * Provides the user with a graphical representation on the progress of all the activities. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * The function is provided by the `graph allocations` command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Provided syntax and usage examples for these commands. (`clean`,`graph allocations` and `start`)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Edited the command summary and usage section to ensure consistency with the features under my implementation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Contributions to the DG"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Explained the implementation of the start feature (Under Section 3.1) using a mixture of sequence diagrams with class diagrams."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Explained the implementation of the clean feature (Under Section 3.2) using a mixture of sequence diagram with class diagrams."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Generated ideas with the team on the set of features for the Jikan application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Made use of the issue tracker extensively to track enhancement and bugs found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Enabled assertions in the build.gradle file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Created the project repository and set up the team organization."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Helped create the Parser and Ui class to make the code more OOP."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Documented the target user profile for UG and DG."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Helped out in resolving the text-ui-issues (date sensitive need to update everyday) that caused many commits to fail the checks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Fixed the bug that made our PPP links broken."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Review/mentoring contributions"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Provided feedback to peers on how certain features can be improved (e.g progress message for activities,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": " store tag goals in separate data file so as to not overload the main data file for activities)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Provided feedback to the developer guide of another team."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * [Reviewing of DG on Week 11](https://github.com/nus-cs2113-AY1920S2/tp/pull/7)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Reported bugs in other team\u0027s product in PE dry run."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * [PED](https://github.com/siuhian/ped/issues)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Activity allocation graph: `graph allocations`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** View the progress of activities to see how much time was spent on the activity relative to the allocated time."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Note: Only activities with an `ALLOCATED_TIME` will be shown."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "For example, if we `graph allocations` for the activity list above, we will get the following graph:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`activity 3` and `activity 5` does not have an allocated time, thus they do not appear in the graph. "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The percentage shown in the graph represents the activity\u0027s progress relative to their allocated time. (`activity 4` have a duration of 2 seconds while its allocated time was 5 seconds, 2/5 * 100% \u003d 40%. Thus the progress of `activity 4` is 40%"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "as shown in the graph)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:**   "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`graph allocations`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "## Automated Cleaning"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Jikan provides a `clean` command where users can automate the cleaning of activities from the activity list at application startup."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Activate cleaning: `clean on`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Switch on automated cleaning."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean on`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Deactivate cleaning: `clean off`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Switch off automated cleaning. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean off`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Set the number of activities to clean: `clean /n`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Set a number of activities to clean."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean /n NUMBER`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Note: Once cleaning is switched on, the automated cleaning persists (i.e cleaning will be done at every application startup) until it is switched off."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Taking a look at this cluttered activity list, we can see that there are some activities which are done (i.e duration \u003e allocation)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Thus, to reduce clutter, we would like to get rid of these done activities. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "However, since the list is so huge, it would be troublesome to use the delete function as users will have to manually navigate through"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the list to identify the done activities and delete them."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "This is where the `clean` command would be useful. See that activity 6, 7 and 10 are done."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "By using the `clean` command. Users can choose how much of these done activities to clean, for the example here, the number is set to 2."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Upon the next startup, the automated cleaning will do its work and clean the 2 oldest done activities (i.e oldest here is based on date)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Note that since the user specified to clean only 2 activities, only activity 6 and 7 are cleaned and activity 10 remains in the activity list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Automated Cleaning for Logs:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Jikan also provides cleaning for log file which are used to record important information during program execution. This feature will be useful"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": "to users who are running this application on systems with limited hardware (small storage space)."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Activate log cleaning: `clean log on`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Switch on automated cleaning."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean log on`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Deactivate log cleaning: `clean log off`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Switch off automated cleaning. "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean log off`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Set the number of logs to clean: `clean log /n`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Usage:** Set number of lines of logs to clean."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**Format:** `clean log /n NUMBER`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### Contributions to the Developer Guide (Extracts)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.1 Start Feature"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.1.1 Current Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siuhian"
        },
        "content": "With Jikan as the main entry point for our application, "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. Jikan will receive user input and pass it to the Parser class to get the corresponding command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. The Parser class will initialise and return a Command class object based on the command in user input."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. In this case, Parser will return a StartCommand class object to Jikan."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. Then, Jikan will call the StartCommand#executeCommand method to start an activity."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Additionally, StartCommand also implements the following operations:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **StartCommand#checkActivity** Checks if the activity already exists in the activity list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **StartCommand#checkTime** Checks if the allocated time provided is valid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **StartCommand#continueActivity** Continue on an existing activity."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**checkActivity**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how the StartCommand#checkActivity function works. This function is used to check "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siuhian"
        },
        "content": "if the activity to be started exists in the activity list. If the activity exists in the list, that activity will be "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siuhian"
        },
        "content": "continued and this way the user cannot start duplicate activities."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When checkActivity() is called, it will make a call to the ActivityList#findActivity method."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Once the findActivity() method finishes execution, it will return an integer index back to checkActivity()."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. If the index is not equals to -1, the activity to be started exists in the activity list and continueActivity() will be called."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. Else, the activity to be started is a brand new activity and addActivityToList() will be called."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**checkTime**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how the StartCommand#checkTime function works. This function is used to check the validity of "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the allocated time provided by the user input. If the allocated time is valid, the activity will be added to activity"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siuhian"
        },
        "content": "list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When checkTime() is called, it will initialise two LocalTime objects called endTime and startTime respectively."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. startTime will be initialised to time 00:00:00 while endTime will be calculated based on the user input to the start"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siuhian"
        },
        "content": "command (i.e `start activity name /a HH:MM:SS /t tags`)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. Then, the method Duration.between() will be used to get a Duration object that holds the time difference between startTime"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siuhian"
        },
        "content": "and endTime."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. If this Duration object is non zero (i.e user gave a valid non zero allocated time), then the activity will be added to the activity list"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siuhian"
        },
        "content": "using the addActivity() method."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**continueActivity**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how the StartCommand#continueActivity function works. This function is used when the current activity"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siuhian"
        },
        "content": "to be started already exists in the activity list. Thus, this function will check with the user whether to continue on that activity "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siuhian"
        },
        "content": "and prevent duplicate activities from being started."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When continueActivity() is called, it will make a call to the Scanner object to read in the next line of user input."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. If the user input is \"yes\", information about the activity (activity name, tags etc.) will be forwarded to parser and the parser"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siuhian"
        },
        "content": "will update the activity list (i.e when continue is used, activity duration is added on and needs to be updated)."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. Else, if the user input is \"no\", continueActivity() will notify the parser to read in the next line of user input."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.1.2 Additional Implementation"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. `start` command have the ability to continue an activity if the activity to be started exists in activity list as discussed above. However, the second "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siuhian"
        },
        "content": "start command\u0027s tags and allocated time parameters will not be captured if the activity originally did have tags or allocated time."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `start activity 1`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `start activity 1 /a HH:MM:SS /t tags` (this command will continue activity 1 but won\u0027t add the tags and allocated time to it)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Thus, it would be best for `start` command to address this issue and allow the second `start` command to not only continue the"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siuhian"
        },
        "content": "activity but also edit the fields of the activity."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Allows two activities to start at the same time. As a user, sometimes the activity we are doing may be linked to another activity (i.e activities like "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siuhian"
        },
        "content": "revising CS2106 and doing CS2106 Labs are similar as doing the labs can serve like a revision too)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Thus, it would be good if more than one activity can be started at a particular time."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.1.3 Design Considerations"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The current design is centred around the Parser Class as all the relevant activity information (activity startTime, endTime, name, tags,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siuhian"
        },
        "content": "allocated time) are stored inside Parser."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Since Parser is a public class. There are some benefits to this design."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* All the command classes have access to activity information."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Makes the classes more lightweight as there is no need for local variables to store activity informations."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Reduces coupling between the commands as they interact through Parser."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siuhian"
        },
        "content": "However, there are some drawbacks to this design too."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Since all the activity information are public, every class in Jikan can access/modify activity information which is"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siuhian"
        },
        "content": "undesirable."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* This creates a lot of dependencies between Commands and Parser which makes unit testing harder to implement."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* As more commands is created to accommodate new features , Parser will be overloaded with new variables and classes."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.2 Clean Feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.2.1 Current Implementation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Jikan provides a `clean` command where users can automate the cleaning of done activities (i.e activities with duration \u003e allocation) and logging data"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siuhian"
        },
        "content": "at application startup."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siuhian"
        },
        "content": "With Jikan as the main entry for our application,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. Upon startup, Jikan will initialise a LogCleaner and StorageCleaner object."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Jikan will call upon LogCleaner#autoClean() and StorageCleaner#autoClean() functions."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. These two functions will check if the Storage and Log Cleaner are enabled respectively before cleaning."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. Thus, by the time the user can interact with Jikan (i.e send commands to Jikan), the activity list and log files would already be cleaned."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siuhian"
        },
        "content": "5. Using the `clean` command, users would be able to manage the cleaner\u0027s behaviour (switching it on/off, set number of done activities/logging data to clean)."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The cleanup mechanism is stored internally as a StorageCleaner and LogCleaner class. "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siuhian"
        },
        "content": "These two classes have access to the data files of activity list and logs respectively and thus they are able to "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siuhian"
        },
        "content": "directly manipulate the activity list and logging data."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siuhian"
        },
        "content": "A status.txt file is initialised to keep track of the status (on/off) of the two cleaners and contains information on "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the number of done activities/logging data for cleaning."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Moreover, the CleanCommand also implements the following operation:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **CleanCommand#setStatus** Switch on/off the two cleaners respectively."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **CleanCommand#setValue** Set a value for the number of done activities/logging data to be cleaned."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Note: The two cleaners are independent, setting a value/status for one of the cleaner will not affect the other cleaner."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**setStatus**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how CleanCommand#setStatus function works. This function is a generalized function that is used to"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "siuhian"
        },
        "content": "switch on or off the cleaners by checking the parameters to the `clean` command. Thus, based on the return value of getStatus() and"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "siuhian"
        },
        "content": "getCleaner(), there are four possible scenarios."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When setStatus() is called, the method will call its own class method getStatus() to check what is the status to set to."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. There are two valid return values for getStatus() method which is \"on\" and \"off\". The diagram shows the former."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. Upon receiving a valid return value from getStatus() which is \"on\" in the diagram, the setStatus() method will self invoke another"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "siuhian"
        },
        "content": "of its own class method getCleaner()."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. The return result of the getCleaner() together with getStatus() will then be used to determine which cleaner are we setting and what is"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the status to set to. "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "siuhian"
        },
        "content": "5. In other words, result of getCleaner() is used to determine whether are we calling StorageCleaner#setStatus or LogCleaner#setStatus while"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the result of getStatus() determines the parameter to setStatus(). (e.g \"on\" will call setStatus(\"true\") while \"off\" will call setStatus(\"false\"))."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**setValue**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram of setValue is omitted as it is similar to setStatus diagram. This function is a generalized function that is used to "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "siuhian"
        },
        "content": "set a value for the number of done activities or the number of lines of logging data to be cleaned for the two cleaners respectively."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When setValue() is called, the method will call its own class method getNumber() that will return an integer value corresponding to the number "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siuhian"
        },
        "content": "to set to."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Upon receiving a valid return value (non negative), the setValue() method will self invoke another of its own class method getCleaner()."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. The return result of the getCleaner() together with getNumber() will then be used to determine which cleaner are we setting and what is "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the value to set to."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. In other words, result of getCleaner() is used to determine whether are we calling StorageCleaner#setNumberOfActivitiesToClean or LogCleaner#setNumberOfLogsToClean"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "siuhian"
        },
        "content": "while the result of getNumber determines the parameter to these two functions."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Note that steps 2-4 of setValue() are similar to steps 3-5 of setStatus()."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "siuhian"
        },
        "content": "On the other hand, the Storage/Log Cleaner class implements the following core operation of `clean` command."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* **Cleaner#autoClean** This operation is called whenever Jikan is executed. Cleaning will only be done to the activity list/logging data if"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "siuhian"
        },
        "content": "the two cleaners are enabled respectively."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "siuhian"
        },
        "content": "**autoClean**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "siuhian"
        },
        "content": "(Diagram omitted)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The diagram above shows how Cleaner#autoClean function works. This function is called whenever Jikan executes Jikan#main and is used to"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "siuhian"
        },
        "content": "perform cleaning of the activity list and logging data if Storage Cleaner and Log Cleaner are enabled respectively. The number of done activities and"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "siuhian"
        },
        "content": "lines of logging data to clean is set to 5 at default if user did not specify a value for both cleaners."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. When main() is called, Jikan will first initialise both the StorageCleaner and LogCleaner object using StorageCleaner() and "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siuhian"
        },
        "content": "LogCleaner()."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. Once both objects are initialised, Jikan will first call storageAutoClean() method of the StorageCleaner class."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "siuhian"
        },
        "content": "3. This method will invoke another method under the StorageCleaner class called checkStatus() which will return a boolean toClean variable."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "siuhian"
        },
        "content": "4. If toClean \u003d\u003d true, the storageAutoClean() method will proceed and clean up the activity list before returning control back to main()."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "siuhian"
        },
        "content": "5. Else, the storageAutoClean() will not do any clean up and will immediately return control back to main()."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siuhian"
        },
        "content": "6. Steps 2 to 5 will then be repeated when Jikan call logAutoClean() method of the LogCleaner class. "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.2.2 Additional Implementation"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siuhian"
        },
        "content": "1. Currently, the data that is cleaned up by this command is sent to a recycled folder similar to how Windows recycle bin works. "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Thus, it would be good to have a feature to restore the data deleted in the event the user wishes to recover some of the activities/logs."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    On a similar note, it would also be good to have a permanent delete feature built into the recycled folder so that items that are too old (\u003e 6 months old) will"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    deleted away for good."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "siuhian"
        },
        "content": "2. The automated cleaning does not have a lot of flexibility as the current implementation only cleans up done activities starting from the oldest."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Thus, it would be good if the `clean` command is expanded to allow users more freedom in specifying what activities to clean."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `clean /n 3 /t CS2113` does cleaning on the 3 oldest done activities with CS2113 tag."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    * `clean /n 5 /i 1/4/2020 3/4/2020` does cleaning on the 5 oldest done activities with dates between 1 April 2020 and 3 April 2020."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.2.3 Design Considerations"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The current design uses the abstract cleaner class to create dedicated cleaners (i.e Storage and Log Cleaners) to perform"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "siuhian"
        },
        "content": "cleaning for various data files (e.g activity list data file, logging data file)."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siuhian"
        },
        "content": "There are some benefits to this design."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Creating an abstract class reduces the amount of repetitive code as common methods between cleaners are abstracted out."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* Abstract classes produce a more OOP solution as different cleaners will handle different parts of the data."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "siuhian"
        },
        "content": "However there are drawbacks to this design too."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* There are some very similar methods with key differences that cannot be abstracted out (for e.g different parameters, different printing)."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "siuhian"
        },
        "content": "* This causes the CleanCommand class to have similar and repetitive methods to handle this difference. (for e.g setStorageCleanerOn(), setLogCleanerOn() etc)."
      }
    ],
    "authorContributionMap": {
      "siuhian": 355
    }
  },
  {
    "path": "src/main/java/jikan/Jikan.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.cleaner.LogCleaner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.cleaner.StorageCleaner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static java.lang.System.exit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * Represents the Jikan time tracker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Jikan {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Constant file path of data file. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static final String DATA_FILE_PATH \u003d \"data/data.csv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static final String TAG_FILE_PATH \u003d \"data/tag/tag.csv\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Storage object for data file. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static Storage tagStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Activity list to store current tasks in. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static ActivityList activityList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static ActivityList lastShownList \u003d new ActivityList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Ui to handle printing. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Parser to parse commands. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** CLeaner to delete entries in data.csv when it gets too long */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static StorageCleaner storageCleaner;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static LogCleaner logCleaner \u003d new LogCleaner();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static final Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Main entry-point for the Jikan application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage \u003d new Storage(DATA_FILE_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tagStorage \u003d new Storage(TAG_FILE_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        storageCleaner \u003d new StorageCleaner(storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            storageCleaner.storageAutoClean();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logCleaner.logAutoClean();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityList \u003d storage.createActivityList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Error while preparing application.\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"If any data files are open, please close them and try again.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "            exit(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "        lastShownList.activities.addAll(activityList.activities);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        parser.cleaner \u003d storageCleaner;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        parser.logcleaner \u003d logCleaner;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        parser.tagStorage \u003d tagStorage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Command command \u003d parser.parseUserCommands(in);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (ByeCommand.isExit(command)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    command.executeCommand(activityList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                command.executeCommand(activityList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // This block should theoretically never be entered (if command is empty, it just continues)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // However, you never know.."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } catch (EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                Ui.printDivider(\"Error parsing command. Please try again.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 24,
      "btricec": 11,
      "siuhian": 24,
      "nigellenl": 24,
      "ananda-lye": 9
    }
  },
  {
    "path": "src/main/java/jikan/activity/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Represents an activity entry with a name and total time spent."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Activity {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private Duration allocatedTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static final int MAX_PERCENT \u003d 100;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new activity entry."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param name represents the name of the activity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param startTime the time that the activity first started"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param tags activity tags"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param endTime the time that the activity ended"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Activity(String name, LocalDateTime startTime, LocalDateTime endTime, Duration duration,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                    Set\u003cString\u003e tags, Duration allocatedTime) throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (endTime.isBefore(startTime)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "            throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (name.strip().length() \u003c\u003d 25) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "            this.name \u003d name.strip();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            throw new NameTooLongException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.date \u003d endTime.toLocalDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.allocatedTime \u003d allocatedTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.name \u003d name.strip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public Set\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public String getTagsAsString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return String.join(\",\", tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void setTags(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void setEndTime(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public Duration getAllocatedTime() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return this.allocatedTime;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void setAllocatedTime(Duration allocatedTime) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.allocatedTime \u003d allocatedTime;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Gets the percentage completed of the allocated time."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @return percent completed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public double getProgressPercent() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        double percent \u003d ((double)this.duration.toMillis() / this.allocatedTime.toMillis()) * MAX_PERCENT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        return Math.min(percent, 100);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Returns true if the Activity\u0027s date is within the date range specified (inclusive)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param startDate Start date of range"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param endDate End date of range"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return True if Activity is within date range; false otherwise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public boolean isWithinDateFrame(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!this.date.isBefore(startDate) \u0026\u0026 !this.date.isAfter(endDate)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Converts the jikan.activity.Activity object to data representation to be stored in a data file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * File format:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * name, startTime, endTime"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return String representing the Task object in comma-separated data format."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Convert tags to a single space-separated"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String tagString \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tagString \u003d tagsToString(tagString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String dataLine \u003d (this.name + \",\" + this.startTime + \",\" + this.endTime + \",\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                + this.duration.toString() + \",\" + this.allocatedTime + \",\" + tagString);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return dataLine;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private String tagsToString(String tagString) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Iterator i \u003d this.tags.iterator();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        while (i.hasNext()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            tagString +\u003d i.next() + \" \";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        return tagString;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 52,
      "btricec": 52,
      "siuhian": 10,
      "nigellenl": 9,
      "ananda-lye": 32
    }
  },
  {
    "path": "src/main/java/jikan/activity/ActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.StorageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Represents the list of activities."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class ActivityList {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public ArrayList\u003cActivity\u003e activities;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Storage storage; // Storage the list was loaded from"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public StorageHandler storageHandler;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new activity list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public ActivityList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new activity list to be saved to a file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param storage the storage object to use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public ActivityList(Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert storage !\u003d null : \"Input Storage must not be a null pointer\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.storageHandler \u003d new StorageHandler(storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Loads activityList from data file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param storage the storage object to use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param dataFile the datafile to be read from."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public ActivityList(Storage storage, File dataFile) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert storage !\u003d null : \"Input Storage must not be a null pointer\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.storageHandler \u003d new StorageHandler(storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        populateTaskList(dataFile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Activity get(int i) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return activities.get(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Adds activity to activity list and stores it in the data file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param activity Activity to add."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void add(Activity activity) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String dataLine \u003d activity.toData();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        updateFile(dataLine);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Updates the duration of an activity."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param duration The new duration."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param endTime Thew new end time."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param index Index of the activity to be updated."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void updateDuration(Duration duration, LocalDateTime endTime, int index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.get(index).setDuration(duration);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.get(index).setEndTime(endTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fieldChangeUpdateFile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Searches for an activity in activityList by name."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param name Name of the activity to search for."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @return Index of activity with that name."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public int findActivity(String name) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (activities.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Updates data file with new task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataLine Line to write to file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void updateFile(String dataLine) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            storage.writeToFile(dataLine);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Error saving task to data file.\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"Your changes have not been saved in the data file.\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"If the data file is open, please close it, restart the app and try again.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void updateName(int index, String newName) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.get(index).setName(newName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fieldChangeUpdateFile();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void updateAlloc(int index, Duration newAllocTime) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.get(index).setAllocatedTime(newAllocTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fieldChangeUpdateFile();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.remove(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "        deleteUpdateFile(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Deletes the line in the file."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param index the index of the line in the file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void deleteUpdateFile(int index) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            storageHandler.removeLine(index, storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Error while deleting activity from data file.\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"Your changes have not been saved in the data file.\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"If the data file is open, please close it, restart the app and try again.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void fieldChangeUpdateFile() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            storageHandler.updateField(activities, storage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Error while updating activity from data file.\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"Your changes have not been saved in the data file.\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"If the data file is open, please close it, restart the app and try again.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return activities.size();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Saves a new activity to the list of activities."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws InvalidTimeFrameException if start time is before end time"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void saveActivity() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (Parser.continuedIndex !\u003d -1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(Parser.activityName + \" was ended.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.endTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d Duration.between(Parser.startTime, Parser.endTime);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration oldDuration \u003d this.get(Parser.continuedIndex).getDuration();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration newDuration \u003d duration.plus(oldDuration);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration allocatedTime \u003d this.get(Parser.continuedIndex).getAllocatedTime();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btricec"
        },
        "content": "            this.updateDuration(newDuration, Parser.endTime, Parser.continuedIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (allocatedTime !\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printProgressMessage(this.get(Parser.continuedIndex).getProgressPercent());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.continuedIndex \u003d -1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.resetInfo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert (Parser.tags \u003d\u003d null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert (Parser.activityName \u003d\u003d null);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert (Parser.startTime \u003d\u003d null);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(Parser.activityName + \" was ended.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.endTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d Duration.between(Parser.startTime, Parser.endTime);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Activity newActivity \u003d new Activity(Parser.activityName, Parser.startTime,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    Parser.endTime, duration, Parser.tags, Parser.allocatedTime);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "btricec"
        },
        "content": "            this.add(newActivity);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (newActivity.getAllocatedTime() !\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printProgressMessage(newActivity.getProgressPercent());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // reset activity info"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.resetInfo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert (Parser.tags \u003d\u003d null);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert (Parser.activityName \u003d\u003d null);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert (Parser.startTime \u003d\u003d null);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Populates task list from file."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFile Data file to populate from."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void populateTaskList(File dataFile) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Scanner dataScanner \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                parseDataLine(dataScanner.nextLine());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: data file not found. Could not load into the current session\u0027s task list.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: Invalid time frame.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Parses the current line in the data file to an jikan.activity.Activity object."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param s String to parse."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void parseDataLine(String s) throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (!s.isEmpty()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            List\u003cString\u003e strings \u003d Arrays.asList(s.split(\",\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String[] tagStrings;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Set\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // if there are tags"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (strings.size() \u003e 5) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // remove square brackets surrounding tags"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                tagStrings \u003d strings.get(5).split(\" \");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String i : tagStrings) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    tags.add(i);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Activity e;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime startTime \u003d LocalDateTime.parse(strings.get(1));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime endTime \u003d LocalDateTime.parse(strings.get(2));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d Duration.parse(strings.get(3));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Duration allocatedTime \u003d Duration.parse(strings.get(4));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            e \u003d new Activity(strings.get(0), startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            activities.add(e);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 86,
      "btricec": 118,
      "siuhian": 12,
      "nigellenl": 15,
      "ananda-lye": 21
    }
  },
  {
    "path": "src/main/java/jikan/cleaner/Cleaner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.cleaner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public abstract class Cleaner {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected String statusFilePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected String dataFilePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected File status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected File recycledData;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** toClean acts as a switch to switch on/off the cleaner. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public boolean toClean;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final int DEFAULT_LINES_TO_CLEAN \u003d 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Initialise a data file containing the deleted logs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected void initialiseDataFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            loadFile(recycledData);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error loading/creating recycled file\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Activates/De-activates the auto clean up by checking the status file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return the number of lines of data to automatically clean."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected int initialiseCleaner() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return getDataFromStatusFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error loading/creating cleaning file.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error with loading status file. Please delete status file.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Scans the status file if it exists to initialise toClean and get data on"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * the number of lines to clean."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return the number of lines of data to automatically clean."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if status file could not be loaded/created."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private int getDataFromStatusFile() throws IOException, NumberFormatException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (loadCleaner(status)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Scanner sc \u003d new Scanner(status);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String status \u003d sc.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int value \u003d Integer.parseInt(status);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assert value \u003d\u003d 0 || value \u003d\u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (value \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                this.toClean \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                this.toClean \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return Integer.parseInt(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            FileWriter fw \u003d new FileWriter(status);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            fw.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            fw.write(\"5\" + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return DEFAULT_LINES_TO_CLEAN;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Loads the status file and checks if it exists or not."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file status file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return true if the file exists and false otherwise."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation/loading of the status file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected boolean loadCleaner(File file) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Loads the data file that contains deleted logs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file data file with the deleted logs."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation/loading of the data file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected void loadFile(File file) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Creates a new file if the specified file cannot be found in the given path."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file the file to be created if it does not exist."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation of the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    protected void createFile(File file) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to activate/de-activate the auto cleanup."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param status a boolean specifying whether the cleaner should be activated or not."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param number an integer specifying the number of lines of data to automatically clean."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the status file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void setStatus(boolean status, int number) throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.toClean \u003d status;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File dataFile \u003d new File(statusFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(dataFile));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (this.toClean) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"1\" + \"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.write(number + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 132
    }
  },
  {
    "path": "src/main/java/jikan/cleaner/LogCleaner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.cleaner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * A log cleaner class that does automated cleaning"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * for log files under the user\u0027s request."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class LogCleaner extends Cleaner {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final String LOG_FILE_PATH \u003d \"data/LogRecord.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public int numberOfLogsToClean;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Constructor for the log cleaner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public LogCleaner() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        super.statusFilePath \u003d \"data/recycled/logStatus.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        super.status \u003d new File(statusFilePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        super.dataFilePath \u003d \"data/recycled/logData.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        super.recycledData \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        initialiseDataFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int value \u003d initialiseCleaner();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (value !\u003d -1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            this.numberOfLogsToClean \u003d value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Problem initialising cleaner\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"There is a problem initialising cleaner, please remove the status file\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to set a value for the number of logs to clean."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param value an integer representing the number to clean."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the status file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void setNumberOfLogsToClean(int value) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        boolean status \u003d this.toClean;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File dataFile \u003d new File(statusFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.numberOfLogsToClean \u003d value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter((dataFile)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"1\" + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.write(value + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to clear up the live log file and move them to the recycled log file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the live log file and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     *         recycled log file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void logAutoClean() throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        List\u003cString\u003e logsForRecycling \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        List\u003cString\u003e logsLeftInData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (this.toClean) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            File liveData \u003d recycleLog(logsForRecycling, logsLeftInData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            BufferedWriter recycledDataWriter \u003d new BufferedWriter(new FileWriter(recycledData));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            for (String line : logsForRecycling) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                recycledDataWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            recycledDataWriter.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            BufferedWriter liveDataWriter \u003d new BufferedWriter(new FileWriter(liveData));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            for (String line : logsLeftInData) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                liveDataWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            liveDataWriter.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to clean up log file and move them to the recycled folder."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param logsForRecycling an array list consisting of logs to be written to recycled folder."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param logsLeftInData an array list consisting of the logs left after clean up."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return a log file that holds all the logging at run time."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws FileNotFoundException if file could not be found at the filepath."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private File recycleLog(List\u003cString\u003e logsForRecycling, List\u003cString\u003e logsLeftInData) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File liveData \u003d new File(LOG_FILE_PATH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Scanner recycledDataScanner \u003d new Scanner(recycledData);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Scanner liveDataScanner \u003d new Scanner(liveData);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        while (recycledDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String line \u003d recycledDataScanner.nextLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logsForRecycling.add(line);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        while (numberOfLogsToClean !\u003d 0 \u0026\u0026 liveDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String line \u003d liveDataScanner.nextLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logsForRecycling.add(line);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            numberOfLogsToClean -\u003d 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        while (liveDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String line \u003d liveDataScanner.nextLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logsLeftInData.add(line);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return liveData;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 115
    }
  },
  {
    "path": "src/main/java/jikan/cleaner/StorageCleaner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.cleaner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * A storage cleaner class that does automated cleaning"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * for data files under the user\u0027s request."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class StorageCleaner extends Cleaner {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public int numberOfActivitiesToClean;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Constructor for the storage cleaner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param storage an object that holds the data on the list of activities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public StorageCleaner(Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        super.statusFilePath \u003d \"data/recycled/status.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        super.status \u003d new File(statusFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        super.dataFilePath \u003d \"data/recycled/data.csv\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        super.recycledData \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        initialiseDataFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int value \u003d initialiseCleaner();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (value !\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            this.numberOfActivitiesToClean \u003d value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Problem initialising cleaner\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"There is a problem initialising cleaner, please remove the status file\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to set a value for the number of activities to clean."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param value an integer representing the number to clean."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the status file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void setNumberOfActivitiesToClean(int value) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        boolean status \u003d this.toClean;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File dataFile \u003d new File(statusFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.numberOfActivitiesToClean \u003d value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(dataFile));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"1\" + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.write(value + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to clear up the live data file and move them to the recycled data file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the live data file and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     *         recycled data file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void storageAutoClean() throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        List\u003cString\u003e activitiesForRecycling \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        List\u003cString\u003e activitiesLeftInData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (this.toClean) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            File liveData \u003d recycleData(activitiesForRecycling, activitiesLeftInData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            BufferedWriter recycledDataWriter \u003d new BufferedWriter(new FileWriter(recycledData));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            for (String line : activitiesForRecycling) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                recycledDataWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            recycledDataWriter.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            BufferedWriter liveDataWriter \u003d new BufferedWriter(new FileWriter(liveData));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            for (String line : activitiesLeftInData) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                liveDataWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            liveDataWriter.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to clean up data file and move them to the recycled folder."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param listForRecycling an array list consisting of data to be written to recycled folder."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param listLeftInData an array list consisting of the data left after clean up."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return a storage file that holds the activity list at run time."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws FileNotFoundException if file could not be found at the filepath."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private File recycleData(List\u003cString\u003e listForRecycling, List\u003cString\u003e listLeftInData) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String filePath \u003d storage.dataFilePath;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File liveData \u003d new File(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Scanner recycledDataScanner \u003d new Scanner(recycledData);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Scanner liveDataScanner \u003d new Scanner(liveData);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        while (recycledDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String line \u003d recycledDataScanner.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            listForRecycling.add(line);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        parseLiveData(listForRecycling, listLeftInData, liveDataScanner);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return liveData;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to check the activities in storage line by line and see if they should be cleaned or not."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param listForRecycling an array list consisting of data to be written to recycled folder."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param listLeftInData an array list consisting of the data left after clean up."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param liveDataSc used to scan the activities in storage line by line."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void parseLiveData(List\u003cString\u003e listForRecycling, List\u003cString\u003e listLeftInData, Scanner liveDataSc) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanUpActivities(listForRecycling, listLeftInData, liveDataSc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        while (liveDataSc.hasNext()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String line \u003d liveDataSc.nextLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            listLeftInData.add(line);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Checks and clean up completed activities."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param listForRecycling an array list consisting of data to be written to recycled folder."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param listLeftInData an array list consisting of the data left after clean up."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param liveDataSc used to scan the activities in storage line by line."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void cleanUpActivities(List\u003cString\u003e listForRecycling, List\u003cString\u003e listLeftInData, Scanner liveDataSc) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        while (numberOfActivitiesToClean !\u003d 0 \u0026\u0026 liveDataSc.hasNext()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String line \u003d liveDataSc.nextLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String[] tokenizedLine \u003d line.split(\",\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Duration duration \u003d Duration.parse(tokenizedLine[3]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Duration allocatedTime \u003d Duration.parse(tokenizedLine[4]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int result \u003d duration.compareTo(allocatedTime);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (result \u003e\u003d 0 \u0026\u0026 allocatedTime !\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                listForRecycling.add(line);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                numberOfActivitiesToClean -\u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                listLeftInData.add(line);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 146
    }
  },
  {
    "path": "src/main/java/jikan/command/AbortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to abort a currently running activity."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class AbortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new abort command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public AbortCommand(String parameters) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.resetInfo();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String line \u003d \"You have aborted the current activity.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"You have not started any activity.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Abort command failed as no activity was ongoing\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 10,
      "siuhian": 1,
      "nigellenl": 25
    }
  },
  {
    "path": "src/main/java/jikan/command/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new exit command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public ByeCommand(String parameters) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Exits the app. If there is a ongoing activity, asks the user if the activity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * should be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // checks if there was an ongoing activity"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String line \u003d Parser.activityName + \" is still running! If you exit now it will be aborted.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "                        + \"Would you like to end this activity to save it?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "                if (userInput.equalsIgnoreCase(\"yes\") || userInput.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    activityList.saveActivity();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.exitFromApp();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"End date must be before start date\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: end date must be before start date.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return command instanceof ByeCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 5,
      "btricec": 18,
      "siuhian": 1,
      "nigellenl": 35
    }
  },
  {
    "path": "src/main/java/jikan/command/CleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.exception.NegativeNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidCleanCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.cleaner.LogCleaner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.cleaner.StorageCleaner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to clear previously saved log files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class CleanCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    StorageCleaner storageCleaner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    LogCleaner logCleaner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private boolean toCleanStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private boolean toCleanLog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new clean command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public CleanCommand(String parameters, StorageCleaner cleaner, LogCleaner logCleaner) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.storageCleaner \u003d cleaner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.logCleaner \u003d logCleaner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        boolean isEmpty \u003d isParameterEmpty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            stopExecution();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            continueExecution();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to check if user input is empty for clean command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return true if is empty and false otherwise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public boolean isParameterEmpty() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String parametersTrimmed \u003d this.parameters.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return parametersTrimmed.isEmpty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Stops execution when user input is empty."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void stopExecution() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Log.makeInfoLog(\"Clean command received empty parameters\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Ui.printDivider(\"No valid parameters to clean command found.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to continue execution given a non empty user input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void continueExecution() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        toCleanLog \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        toCleanStorage \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String parametersTrimmed \u003d this.parameters.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert !parametersTrimmed.isEmpty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String firstWord \u003d getFirstWord(parametersTrimmed);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            processCommand(firstWord);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (InvalidCleanCommandException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Invalid clean command\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Invalid format received for clean command.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to extract first word for a given line."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param line a string representing a line of information."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return the first word of the line."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public String getFirstWord(String line) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int delimiter \u003d line.indexOf(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String word;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (delimiter \u003d\u003d -1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return line;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            word \u003d line.substring(0, delimiter);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return word;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method that parses in a word and remove the word from the this.parameters string."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param word a word to remove."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return a this.parameters string without the word."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public String getRemainingParameter(String word) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int index \u003d this.parameters.indexOf(word);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int number \u003d word.length();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String remainingParameter \u003d this.parameters.substring(index + number);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        remainingParameter \u003d remainingParameter.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return remainingParameter;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Check if we are dealing with storage or log cleaner."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param firstWord indicative of whether the user is dealing with logs or storage."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void processCommand(String firstWord) throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert !toCleanLog \u0026\u0026 !toCleanStorage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (firstWord.equals(\"log\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            toCleanLog \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            processLogCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            toCleanStorage \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            handleCase(firstWord);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Handle the different functions on a case by case basis."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param firstWord indicative of the function being called."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void handleCase(String firstWord) throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"on\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            handleOnFunction();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"off\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            handleOffFunction();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"/n\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            handleSetFunction();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Use to process log commands, thus all the function called in this method"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * will only deal with log cleaner."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void processLogCommand() throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String remainingCommand \u003d getRemainingParameter(\"log\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (remainingCommand.isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String firstWord \u003d getFirstWord(remainingCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            handleCase(firstWord);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * A general purpose function to handle the \"on\" command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void handleOnFunction() throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String remainingParameter \u003d getRemainingParameter(\"on\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (remainingParameter.isEmpty()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setStatusOn();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Forwards the \"on\" command to the appropriate cleaner (either storage or log cleaner)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setStatusOn() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert !toCleanStorage || !toCleanLog;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (toCleanStorage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setStorageCleanerOn();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (toCleanLog) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setLogCleanerOn();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to switch on the storage cleaner."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setStorageCleanerOn() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            storageCleaner.setStatus(true, storageCleaner.numberOfActivitiesToClean);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Error in loading/writing to storage status file\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Error in accessing the storage status file\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert storageCleaner.toClean;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Ui.printDivider(\"Auto cleaning enabled for storage.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Log.makeInfoLog(\"User has turned on automated cleaning for storage.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to switch on the log cleaner."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setLogCleanerOn() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logCleaner.setStatus(true, logCleaner.numberOfLogsToClean);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Error in loading/writing to log status file\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Error in accessing the log status file\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert logCleaner.toClean;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Ui.printDivider(\"Auto cleaning enabled for logs.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Log.makeInfoLog(\"User has turned on automated cleaning for logs.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * A general purpose function to handle the \"off\" command."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void handleOffFunction() throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String remainingParameter \u003d getRemainingParameter(\"off\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (remainingParameter.isEmpty()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setStatusOff();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Forwards the \"off\" command to the appropriate cleaner (either storage or log cleaner)."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setStatusOff() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert !toCleanStorage || !toCleanLog;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (toCleanStorage) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setStorageCleanerOff();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (toCleanLog) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setLogCleanerOff();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to switch off the storage cleaner."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setStorageCleanerOff() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            storageCleaner.setStatus(false, storageCleaner.numberOfActivitiesToClean);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Error in loading/writing to storage status file\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Error in accessing the storage status file\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert !storageCleaner.toClean;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Ui.printDivider(\"Auto cleaning disabled for storage.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Log.makeInfoLog(\"User has turned off automated cleaning for storage.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to switch off the log cleaner."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setLogCleanerOff() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logCleaner.setStatus(false, logCleaner.numberOfLogsToClean);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Error in loading/writing to log status file\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Error in accessing the log status file\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert !logCleaner.toClean;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Ui.printDivider(\"Auto cleaning disabled for logs.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Log.makeInfoLog(\"User has turned off automated cleaning for logs.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * A general purpose function to handle the \"/n\" command."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void handleSetFunction() throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String remainingParameter \u003d getRemainingParameter(\"/n\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (remainingParameter.isEmpty()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setValue(remainingParameter);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Forwards the \"/n\" command to the appropriate cleaner (either storage or log cleaner)."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param remainingParameter a string with information on the value to set to."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setValue(String remainingParameter) throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert !toCleanStorage || !toCleanLog;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (toCleanStorage) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setValueForStorage(remainingParameter);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (toCleanLog) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            setValueForLogs(remainingParameter);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to set a value for storage cleaner."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param remainingParameter a string with information on the value to set to."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setValueForStorage(String remainingParameter) throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int value \u003d getNumber(remainingParameter);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            storageCleaner.setNumberOfActivitiesToClean(value);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Number of activities to clean is set to \" + value);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Storage Cleaner set to \" + value);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (NegativeNumberException e) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Please provide a positive number.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Negative number given in clean command\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Error in loading/writing to status file\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Error in accessing the status file\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to set a value for log cleaner."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param remainingParameter a string with information on the value to set to."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void setValueForLogs(String remainingParameter) throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int value \u003d getNumber(remainingParameter);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logCleaner.setNumberOfLogsToClean(value);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Number of logs to clean is set to \" + value);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Log Cleaner set to \" + value);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (NegativeNumberException e) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Please provide a positive number.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Negative number given in clean command\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Error in loading/writing to status file\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Error in accessing the status file\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to convert the parameter numberString to an integer."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param numberString a string that represents the value to set to."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return an integer numberString."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the format of user input is wrong."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws NegativeNumberException when the numberString is negative."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public int getNumber(String numberString) throws InvalidCleanCommandException, NegativeNumberException {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int value \u003d Integer.parseInt(numberString);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (value \u003c 0) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                throw new NegativeNumberException();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                return value;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 4,
      "siuhian": 325,
      "nigellenl": 25
    }
  },
  {
    "path": "src/main/java/jikan/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "    protected String parameters;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Command(String parameters) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.parameters \u003d parameters;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public abstract void executeCommand(ActivityList activityList) throws EmptyNameException, ExtraParametersException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 6,
      "nigellenl": 23
    }
  },
  {
    "path": "src/main/java/jikan/command/ContinueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to continue recording an existing activity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ContinueCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new continue command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public ContinueCommand(String parameters) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters.strip());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(Parser.activityName + \" is ongoing!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Log.makeInfoLog(\"Could not continue activity due to ongoing activity.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int index \u003d activityList.findActivity(parameters);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // activity is found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.activityName \u003d activityList.get(index).getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.tags \u003d activityList.get(index).getTags();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.continuedIndex \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(Parser.activityName + \" was continued.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Log.makeInfoLog(Parser.activityName + \" was continued.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyNameException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"No activity with this name exists!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Continue command failed as there was no such activity saved.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Continue command failed as there was no activity name provided.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 20,
      "siuhian": 1,
      "nigellenl": 36
    }
  },
  {
    "path": "src/main/java/jikan/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to delete an activity from the activity list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new delete command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public DeleteCommand(String parameters) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters.trim());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int index \u003d activityList.findActivity(parameters);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // activity was found"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"You have deleted \" + parameters + \".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "                activityList.delete(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyNameException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"No activity with this name exists.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Activity name cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 12,
      "nigellenl": 29
    }
  },
  {
    "path": "src/main/java/jikan/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ActivityIsRunningException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.NegativeDurationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidEditFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExistingNameException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import static jikan.command.GoalCommand.parseDuration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to edit an activity in the activity list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new edit command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public EditCommand(String parameters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Log.makeInfoLog(\"Activity could not be edited as there is an ongoing activity\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new ActivityIsRunningException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            int delimiter \u003d parameters.indexOf(\"/en\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            int allocDelim \u003d parameters.indexOf(\"/ea\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String newName \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String tmpAlloc \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Duration newAllocTime \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            //edit name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (delimiter !\u003d -1)  {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Parser.activityName \u003d parameters.substring(0, delimiter).strip();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                newName \u003d parameters.substring(delimiter + 4).strip();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (newName.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    Ui.printDivider(\"New activity name cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyNameException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "                if (newName.length() \u003e 25) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    throw new NameTooLongException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // existing activity of the same name is found"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "                if (activityList.findActivity(newName) !\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    throw new ExistingNameException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            //edit allocated time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else if (allocDelim !\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Parser.activityName \u003d parameters.substring(0, allocDelim).strip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                tmpAlloc \u003d parameters.substring(allocDelim + 4).strip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (tmpAlloc.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                newAllocTime \u003d parseDuration(tmpAlloc);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            //invalid format"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                throw new InvalidEditFormatException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (Parser.activityName.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                throw new EmptyNameException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            int index \u003d activityList.findActivity(Parser.activityName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (!(newName.isEmpty() \u0026\u0026 tmpAlloc.isEmpty())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    if (!newName.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "                        activityList.updateName(index, newName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        assert newAllocTime !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        if (newAllocTime.isNegative()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                            throw new NegativeDurationException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                            activityList.updateAlloc(index, newAllocTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    // no new details provided"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new InvalidEditFormatException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Activity named \" + Parser.activityName + \" has been updated.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // activity is not found"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"No activity with this name exists.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as there was no such activity saved.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as there was no activity name provided.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException | InvalidEditFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Incorrect edit command format entered.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as an incorrect format was provided.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NegativeDurationException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please enter a positive target time.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as a negative target time was provided.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"New target time cannot be empty.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as an empty target time was provided\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please enter integers in the format HH:MM:SS.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as an incorrect format for the target time was provided.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Activity name must be shorter than 25 characters.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (ActivityIsRunningException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Cannot edit an activity if there is a current activity running.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (ExistingNameException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"There is already an activity with that name. \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 41,
      "nigellenl": 89
    }
  },
  {
    "path": "src/main/java/jikan/command/EndCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to end an activity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EndCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new end command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public EndCommand(String parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /** Method to parse the end activity command. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "                activityList.saveActivity();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // reset lastShownList to include new activity"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "                lastShownList.activities.addAll(activityList.activities);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"End command failed as no activity was ongoing\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"You have not started any activity!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"End date must be before start date\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"End date must be before start date.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 14,
      "rdimaio": 4,
      "siuhian": 1,
      "nigellenl": 32
    }
  },
  {
    "path": "src/main/java/jikan/command/FilterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.MultipleDelimitersException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.EmptyQueryException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents a command to filter activities by specified tags."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    boolean isFinalCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    boolean isChained;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String FILTER \u003d \"filter\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new filter command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public FilterCommand(String parameters) throws MultipleDelimitersException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        isFinalCommand \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.parameters \u003d parameters.replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.parameters \u003d parameters.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\";;\") || parameters.contains(\"; ;\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new MultipleDelimitersException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Constructor to create a new filter command with chaining."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public FilterCommand(String parameters, boolean isFinal, boolean hasChaining) throws MultipleDelimitersException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        super(parameters.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        isFinalCommand \u003d isFinal;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        isChained \u003d hasChaining;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.parameters \u003d parameters.replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.parameters \u003d parameters.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\";;\") || parameters.contains(\"; ;\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new MultipleDelimitersException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Shows the user all past activities that has tags which match the one or more keywords queried by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList the activity list to search for matching activities"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        // remove the magic number later"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String[] tokenizedParameters \u003d parameters.split(\";\", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (tokenizedParameters.length \u003e 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            executeChainedCommand(activityList, tokenizedParameters);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            isFinalCommand \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            executeSingleCommand(activityList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void executeChainedCommand(ActivityList activityList, String[] tokenizedParameters) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (tokenizedParameters[1].length() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            isFinalCommand \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            parameters \u003d tokenizedParameters[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            executeSingleCommand(activityList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String nextCommand \u003d tokenizedParameters[1].trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                callNextCommand(nextCommand, activityList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"Please chain find or filter commands only\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            isFinalCommand \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            parameters \u003d tokenizedParameters[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            searchSubList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void executeSingleCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\"-s\") || isChained \u003d\u003d true) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            searchSubList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            searchFullList(activityList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void callNextCommand(String userInput, ActivityList activityList) throws InvalidCommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String[] tokenizedInputs \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String instruction \u003d tokenizedInputs[0];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        switch (instruction) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                command \u003d new FindCommand(tokenizedInputs[1], false, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"Please only use one \u0027;\u0027 between each command.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case FILTER:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                command \u003d new FilterCommand(tokenizedInputs[1], false, true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"Please only use one \u0027;\u0027 between each command.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            command.executeCommand(activityList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printDivider(\"Error parsing command. Please try again.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Filters activities by tags from the entire list of activities."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList the full list of activities"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void searchFullList(ActivityList activityList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String query \u003d parameters;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (query.length() \u003c 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new EmptyQueryException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String[] keywords \u003d query.split(\" \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "                keywords \u003d removeBlanks(keywords);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btricec"
        },
        "content": "                //keywords \u003d keywords.filter(boolean);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                if (keywords.length \u003c 1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    throw new EmptyQueryException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btricec"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    populateLastShownList(activityList, lastShownList, keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                callPrintResults();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyQueryException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Filter activities by tags based on the last shown list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void searchSubList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String query \u003d parameters.replace(\"-s \", \"\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            ActivityList prevList \u003d new ActivityList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            prevList.activities.addAll(lastShownList.activities);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (query.length() \u003c 1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                throw new EmptyQueryException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                String[] keywords \u003d query.split(\" \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                if (keywords.length \u003c 1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    throw new EmptyQueryException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    populateLastShownList(prevList, lastShownList, keyword);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                callPrintResults();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | EmptyQueryException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void callPrintResults() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (isFinalCommand \u003d\u003d true) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printResults(lastShownList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void populateLastShownList(ActivityList targetList, ActivityList lastShownList, String keyword) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        for (Activity i : targetList.activities) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // if (!lastShownList.activities.contains(i) \u0026\u0026 i.getTags().contains(keyword)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (!lastShownList.activities.contains(i) \u0026\u0026 containsIgnoreCase(i.getTagsAsString(), keyword)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "btricec"
        },
        "content": "                lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private boolean containsIgnoreCase(String str, String subString) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return str.toLowerCase().contains(subString.toLowerCase());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private String[] removeBlanks(String [] strings) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "btricec"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e(Arrays.asList(strings));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "btricec"
        },
        "content": "        list.removeIf(String::isBlank);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "btricec"
        },
        "content": "        strings \u003d list.toArray(new String[0]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 40,
      "nigellenl": 22,
      "ananda-lye": 146
    }
  },
  {
    "path": "src/main/java/jikan/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.MultipleDelimitersException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.EmptyQueryException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents a command to find activities by name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    boolean isFinalCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    boolean isChained;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String FILTER \u003d \"filter\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new find command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public FindCommand(String parameters) throws MultipleDelimitersException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        isFinalCommand \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.parameters \u003d parameters.replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.parameters \u003d parameters.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\";;\") || parameters.contains(\"; ;\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new MultipleDelimitersException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Constructor to create a new find command that has chaining."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public FindCommand(String parameters, boolean isFinal, boolean hasChaining) throws MultipleDelimitersException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        super(parameters.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        isFinalCommand \u003d isFinal;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        isChained \u003d hasChaining;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.parameters \u003d parameters.replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.parameters \u003d parameters.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\";;\") || parameters.contains(\"; ;\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new MultipleDelimitersException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Shows the user all past activities that has names which match the keyword queried by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList the activity list to search for matching activities"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        // remove the magic number later"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String[] tokenizedParameters \u003d parameters.split(\";\", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            checkForInvalidChaining();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printDivider(\"Please only use one \u0027;\u0027 between each command.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (tokenizedParameters.length \u003e 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            executeChainedCommand(activityList, tokenizedParameters);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            isFinalCommand \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            executeSingleCommand(activityList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void checkForInvalidChaining() throws MultipleDelimitersException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\";;\") || parameters.contains(\"; ;\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new MultipleDelimitersException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void executeChainedCommand(ActivityList activityList, String[] tokenizedParameters) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (tokenizedParameters[1].length() \u003e 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            isFinalCommand \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            parameters \u003d tokenizedParameters[0];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            executeSingleCommand(activityList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String nextCommand \u003d tokenizedParameters[1].trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                callNextCommand(nextCommand, activityList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"Please chain find or filter commands only\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            isFinalCommand \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            parameters \u003d tokenizedParameters[0];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            searchSubList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void executeSingleCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\"-s\") || isChained \u003d\u003d true) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            searchSubList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            searchFullList(activityList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void callNextCommand(String userInput, ActivityList activityList) throws InvalidCommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String[] tokenizedInputs \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String instruction \u003d tokenizedInputs[0];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        switch (instruction) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                command \u003d new FindCommand(tokenizedInputs[1], false, true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"Please only use one \u0027;\u0027 between each command.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case FILTER:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                command \u003d new FilterCommand(tokenizedInputs[1], false, true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"Please only use one \u0027;\u0027 between each command.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            command.executeCommand(activityList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printDivider(\"Error parsing command. Please try again.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Find activities which has names containing the keywords from the entire list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList full like of activities"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void searchFullList(ActivityList activityList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (parameters.length() \u003c 1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new EmptyQueryException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                String[] keywords \u003d parameters.split(\" / \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    populateLastShownList(keyword, activityList.activities);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                callPrintResults();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyQueryException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Find activities which has names containing the keywords from the last shown list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void searchSubList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String query \u003d parameters.replace(\"-s \", \"\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            ArrayList\u003cActivity\u003e prevList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            prevList.addAll(lastShownList.activities);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (query.length() \u003c 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                throw new EmptyQueryException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                String[] keywords \u003d query.split(\" / \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    populateLastShownList(keyword, prevList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            callPrintResults();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | EmptyQueryException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void callPrintResults() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (isFinalCommand \u003d\u003d true) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printResults(lastShownList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Fills the last shown list with the results from matching names of activities to a keyword."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param keyword the keyword to match against"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activities the list of activities to search"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void populateLastShownList(String keyword, ArrayList\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        for (Activity i : activities) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (containsIgnoreCase(i.getName(), keyword) \u0026\u0026 !lastShownList.activities.contains(i)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private boolean containsIgnoreCase(String str, String subString) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return str.toLowerCase().contains(subString.toLowerCase());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 17,
      "nigellenl": 21,
      "ananda-lye": 171
    }
  },
  {
    "path": "src/main/java/jikan/command/GoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyGoalException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyTagException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidGoalCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NegativeDurationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchTagException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.storage.StorageHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import static java.lang.Integer.valueOf;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to set a goal for activities with a specific tag in the activity list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static Scanner scanner;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static final String TAG_FILE_PATH \u003d \"data/tag/tag.csv\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static Storage tagStorage; // Storage the list was loaded from"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static StorageHandler tagStorageHandler;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new goal command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param parameters the parameters of the goal command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param scanner to read the user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public GoalCommand(String parameters, Scanner scanner, Storage tagStorage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.scanner \u003d scanner;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.tagStorage \u003d tagStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.tagStorageHandler \u003d new StorageHandler(tagStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            int delimiter \u003d parameters.indexOf(\"/g\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            int deleteDelim \u003d parameters.indexOf(\"/d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String tagName \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (delimiter !\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                tagName \u003d parameters.substring(0, delimiter - 1).strip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (tagName.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyTagException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                index \u003d checkIfExists(tagName, TAG_FILE_PATH);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                String tmpTime \u003d parameters.substring(delimiter + 3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (tmpTime.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyGoalException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Duration goalTime \u003d parseDuration(tmpTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (goalTime.isNegative()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new NegativeDurationException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (index !\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    Ui.printDivider(\"The goal for this tag already exists, do you want to update the goal?\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    updateGoal(userInput, tagName, goalTime, index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    // tag does not exist in the activity list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    if (!existInActivity(activityList, tagName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        throw new NoSuchTagException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        tagStorage.writeToFile(tagName + \",\" + goalTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "                        Ui.printDivider(\"The goal for \" + tagName + \" has been added.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else if (deleteDelim !\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                tagName \u003d parameters.substring(0, deleteDelim - 1).strip();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                index \u003d checkIfExists(tagName, TAG_FILE_PATH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (index !\u003d -1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    Ui.printDivider(\"The goal for this tag has been deleted.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    deleteLine(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new NoSuchTagException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                throw new InvalidGoalCommandException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyTagException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Tag name cannot be empty.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Goal command failed as no tag name was provided.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidGoalCommandException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Invalid command format entered.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Goal command failed as an incorrect format was provided.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Error reading the file.\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"If the file was open, please close it and try again.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchTagException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"There is no such tag.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Goal command failed as there was no such tag saved.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btricec"
        },
        "content": "                | EmptyGoalException | NumberFormatException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please enter the goal in the format HH:MM:SS.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Goal command failed as an incorrect format for the goal time was provided.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NegativeDurationException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please enter a positive goal time.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Goal command failed as a negative goal time was provided.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Check that tag exists in the tag list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagName the tag name."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param filePath the file path of the tag file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @return index the index of the tag in the tag list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @throws IOException when there is an error loading/creating the file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static int checkIfExists(String tagName, String filePath) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        int status \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String line \u003d br.readLine();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String[] name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                name \u003d line.split(\",\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (name[0].equals(tagName)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    status \u003d 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                sb.append(line);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        if (status \u003d\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            index \u003d -1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Update the goal for the existing specified tag."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param userInput the user response."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagName the tag name."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param goalTime the amount of time the user wants to assign to the tag."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param index the index of the tag in the tag list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static void updateGoal(String userInput, String tagName, Duration goalTime, int index) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        if (userInput.equalsIgnoreCase(\"yes\") || userInput.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            deleteLine(index);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            tagStorage.writeToFile(tagName + \",\" + goalTime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"The goal for \" + tagName + \" was updated\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } else if (userInput.equalsIgnoreCase(\"no\") || userInput.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Okay then, what else can I do for you?\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Incorrect format entered, please only enter yes or no.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Removes the line whose index matches lineNumber from file."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param lineNumber Index of line to remove."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void deleteLine(int lineNumber) throws IOException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        // Read file into list of strings, where each string is a line in the file"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(TAG_FILE_PATH),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fileContent.remove(lineNumber);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        saveNewTags(fileContent);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Saves the updated tags to the csv file."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param newList The list containing the updated data."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void saveNewTags(List\u003cString\u003e newList) throws IOException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tagStorage.clearFile();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        FileWriter fw \u003d new FileWriter(TAG_FILE_PATH, true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        for (String s : newList) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            fw.write(s + System.lineSeparator());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Check if the tag exists in the activity list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param targetList the activity list to check."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagName the specified tag name."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private boolean existInActivity(ActivityList targetList, String tagName) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        for (Activity i : targetList.activities) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (i.getTags().contains(tagName)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Converts the user input into a duration object."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @return the duration object."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static Duration parseDuration(String input) throws"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String[] fields \u003d input.split(\":\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        int colonIndex \u003d input.indexOf(\u0027:\u0027);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String hh \u003d fields[0];"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String mm \u003d fields[1];"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String ss \u003d fields[2];"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return Duration.ofHours(valueOf(hh)).plusMinutes(valueOf(mm)).plusSeconds(valueOf(ss));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 12,
      "rdimaio": 1,
      "nigellenl": 224
    }
  },
  {
    "path": "src/main/java/jikan/command/GraphCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.MissingParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class GraphCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String ALLOCATIONS \u003d \"allocations\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String TAGS \u003d \"tags\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String ACTIVITIES \u003d \"activities\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    String[] inputs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Constructor to create a new command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param parameters Either time interval for graph or \u0027tags\u0027 flag"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *                   to graph by tags"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public GraphCommand(String parameters) throws ExtraParametersException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.inputs \u003d parameters.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (inputs.length \u003e 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            throw new ExtraParametersException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "            switch (inputs[0]) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "            case ALLOCATIONS:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.graphAllocation(lastShownList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Log.makeInfoLog(\"Allocations was graphed\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "            case TAGS:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "                graphTags();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Log.makeInfoLog(\"Tags were graphed\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "            case ACTIVITIES:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "                graphActivities();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Log.makeInfoLog(\"Activities were graphed\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Please specify whether you want to graph activities / tags / allocations.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (NumberFormatException | MissingParametersException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please input an integer for the time interval.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Please specify whether you want to graph activities / tags / allocations.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void graphActivities() throws MissingParametersException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "            throw new MissingParametersException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int interval \u003d Integer.parseInt(inputs[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printActivityGraph(interval);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void graphTags() throws MissingParametersException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "        HashMap\u003cString, Duration\u003e tags \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (Activity activity : lastShownList.activities) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "            extractTags(tags, activity);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "            throw new MissingParametersException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int interval \u003d Integer.parseInt(inputs[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printTagsGraph(tags, interval);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Gets the tags from the activities in the list together with the associated duration."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tags the HashMap to store the tag name and duration."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param activity the activity containing the tag."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void extractTags(HashMap\u003cString, Duration\u003e tags, Activity activity) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Set\u003cString\u003e activityTags \u003d activity.getTags();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (String tag : activityTags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (tags.containsKey(tag)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Duration oldDuration \u003d tags.get(tag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Duration newDuration \u003d oldDuration.plus(activity.getDuration());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "                tags.put(tag, newDuration);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "                tags.put(tag, activity.getDuration());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 94,
      "siuhian": 2,
      "nigellenl": 7
    }
  },
  {
    "path": "src/main/java/jikan/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to list all activities in the activity list to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new list command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public ListCommand(String parameters) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Parse a list command. The user can specify either a single date or a specific time frame."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList The activity list to search for matching activities."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // If no time frame is specified, print the entire list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (parameters \u003d\u003d null || parameters.isBlank()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "            listAll(activityList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "            parameters \u003d parameters.strip();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "                listInterval(activityList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                Ui.printDivider(\"Please enter a valid date in the format dd/MM/yyyy or yyyy-MM-dd\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                        + \"Or use day / week / month to view tasks in the respective time period.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                Ui.printDivider(\"Please enter a valid time frame; the end date must come after the start date.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } catch (ExtraParametersException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Extra parameters detected!\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "                        + \"Use day / week / month to view tasks in the respective time period.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void listAll(ActivityList activityList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "        lastShownList.activities.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Ui.printList(activityList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Can\u0027t do lastShownList \u003d activityList, otherwise we just copy"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "        lastShownList.activities.addAll(activityList.activities);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void listInterval(ActivityList activityList)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "            throws InvalidTimeFrameException, DateTimeParseException, ExtraParametersException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String[] listInputs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "        listInputs \u003d parameters.split(\" \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "        lastShownList.activities.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDate endDate \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Parse either format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "        DateTimeFormatter parser \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][yyyy-MM-dd]\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Check if the user has given a verbal input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // (User can either say day or daily and get the same output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "        switch (listInputs[0]) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "            checkExtraParameters(listInputs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"yesterday\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "            checkExtraParameters(listInputs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d getStartOfWeek(listInputs, parser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Set current Monday and Sunday as time range"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d startDate.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "            endDate \u003d startDate.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d getStartOfMonth(listInputs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btricec"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "            endDate \u003d startDate.with(TemporalAdjusters.lastDayOfMonth());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // date / date range is given"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d LocalDate.parse(listInputs[0], parser);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (listInputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "                endDate \u003d LocalDate.parse(listInputs[1], parser);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "        printList(activityList, startDate, endDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDate getStartOfMonth(String[] listInputs) throws ExtraParametersException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDate startDate;// If user has input a specific month, use that;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Otherwise get current date"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (listInputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "                startDate \u003d getMonth(listInputs[1]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Please specify the full month name.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btricec"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d startDate.withDayOfMonth(1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDate getStartOfWeek(String[] listInputs, DateTimeFormatter parser) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDate startDate;// If user has input a specific date to obtain the week from, use that;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // (eg. the input is list week 2020-05-20)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Otherwise get current date"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (listInputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (listInputs[1].isBlank()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btricec"
        },
        "content": "                startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "                startDate \u003d LocalDate.parse(listInputs[1], parser);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void printList(ActivityList activityList, LocalDate startDate, LocalDate endDate)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": "            throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Only one date is specified; return all entries with start date coinciding with that date"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btricec"
        },
        "content": "                if (i.getDate().equals(startDate)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printList(lastShownList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Both start and end dates are specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "btricec"
        },
        "content": "                if (i.isWithinDateFrame(startDate, endDate)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printList(lastShownList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDate getMonth(String listInput) throws ExtraParametersException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Month month;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (listInput.isBlank()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // return current month"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "btricec"
        },
        "content": "            month \u003d currentDate.getMonth();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "btricec"
        },
        "content": "            YearMonth yearMonth \u003d YearMonth.of(Calendar.getInstance().get(Calendar.YEAR), month.getValue());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "btricec"
        },
        "content": "            month \u003d Month.valueOf(listInput.toUpperCase());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "btricec"
        },
        "content": "            YearMonth yearMonth \u003d YearMonth.of(Calendar.getInstance().get(Calendar.YEAR), month.getValue());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void checkExtraParameters(String[] listInputs) throws ExtraParametersException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (listInputs.length \u003e 1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (!listInputs[1].isBlank()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new ExtraParametersException();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 177,
      "rdimaio": 8,
      "nigellenl": 21
    }
  },
  {
    "path": "src/main/java/jikan/command/StartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to start an activity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private boolean hasAllocation \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private boolean hasTag \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private boolean hasAllocationAndTag \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final int MAX_ACTIVITY_LENGTH \u003d 25;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new start command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public StartCommand(String parameters, Scanner scanner) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.scanner \u003d scanner;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        boolean hasStarted \u003d hasStarted(Parser.startTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (hasStarted) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            stopExecution();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assert Parser.tags.isEmpty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            continueExecution(activityList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Checks if there is a concurrently running activity."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param startTime a LocalDateTime object to check if parser is waiting for a running activity."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return true if there is a concurrent running activity and false otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private boolean hasStarted(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return startTime !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Stops executing current activity if a concurrent running activity is found."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void stopExecution() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert Parser.startTime !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String line \u003d Parser.activityName + \" is ongoing!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Log.makeInfoLog(\"Could not start activity due to already ongoing activity.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Ui.printDivider(line);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Continues execution as no concurrent running activity is found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityList a list of tracked activities."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void continueExecution(ActivityList activityList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String activityName \u003d parseActivityName(this.parameters);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (activityName.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeFineLog(\"Empty activity name was provided.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Activity name cannot be empty\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            checkActivity(activityName, activityList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Get activity name from parameters to start command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param parameters the parameters to start command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return activity name of the activity to be started."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private String parseActivityName(String parameters) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String scenario;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String activityName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int tagDelimiter \u003d parameters.indexOf(\"/t\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int allocateDelimiter \u003d parameters.indexOf(\"/a\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        scenario \u003d getScenario(tagDelimiter, allocateDelimiter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        switch (scenario) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"hasTagAndAllocation\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assert tagDelimiter !\u003d -1 \u0026\u0026 allocateDelimiter !\u003d -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityName \u003d handleTagAndAllocation(this.parameters, tagDelimiter, allocateDelimiter);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"hasTagOnly\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assert tagDelimiter !\u003d -1 \u0026\u0026 allocateDelimiter \u003d\u003d -1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityName \u003d handleTagOrAllocation(this.parameters, tagDelimiter);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"hasAllocationOnly\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assert tagDelimiter \u003d\u003d -1 \u0026\u0026 allocateDelimiter !\u003d -1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityName \u003d handleTagOrAllocation(this.parameters, allocateDelimiter);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"hasNoTagAndAllocation\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assert tagDelimiter \u003d\u003d -1 \u0026\u0026 allocateDelimiter \u003d\u003d -1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityName \u003d this.parameters.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityName \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return activityName;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to check for tags and allocated time."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param tagDelimiter index where tag flag is found."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param allocateDelimiter index where allocate flag is found."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return a string with information about whether tags and allocated time are found."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private String getScenario(int tagDelimiter, int allocateDelimiter) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tagDelimiter !\u003d -1 \u0026\u0026 allocateDelimiter !\u003d -1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            this.hasAllocationAndTag \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return \"hasTagAndAllocation\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (tagDelimiter !\u003d -1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            this.hasTag \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return \"hasTagOnly\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (allocateDelimiter !\u003d -1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            this.hasAllocation \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return \"hasAllocationOnly\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return \"hasNoTagAndAllocation\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to extract activity name."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param parameters parameters to start command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param tagDelimiter index where tag flag is found."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param allocateDelimiter index where allocate flag is found."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return activity name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private String handleTagAndAllocation(String parameters, int tagDelimiter, int allocateDelimiter) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String activityName;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int delimiter \u003d 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tagDelimiter \u003c allocateDelimiter) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            delimiter \u003d tagDelimiter;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (allocateDelimiter \u003c tagDelimiter) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            delimiter \u003d allocateDelimiter;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert delimiter \u003d\u003d tagDelimiter || delimiter \u003d\u003d allocateDelimiter;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        activityName \u003d parameters.substring(0, delimiter);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        activityName \u003d activityName.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (activityName.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return activityName;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to extract activity name."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param parameters parameters to start command."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param delimiter index where tag flag or allocate flag is found."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return activity name."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private String handleTagOrAllocation(String parameters, int delimiter) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert delimiter !\u003d -1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String activityName \u003d parameters.substring(0, delimiter);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        activityName \u003d activityName.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (activityName.isEmpty()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return activityName;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to check if the activity exists in activity list and does not exceed 25 characters."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityList a list of tracked activities."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void checkActivity(String activityName, ActivityList activityList) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert !activityName.isEmpty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int index \u003d activityList.findActivity(activityName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"There is already an activity with this name. Would you like to continue it?\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            continueActivity(activityList, scanner, index);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (activityName.length() \u003e MAX_ACTIVITY_LENGTH) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Please input an activity name that is shorter than 25 characters.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            addActivityToList(activityName);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to add a activity to the activity list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void addActivityToList(String activityName) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (hasAllocationAndTag) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            parseActivityWithBothField(activityName, this.parameters);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (hasAllocation) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            addActivityWithAllocation(activityName, this.parameters);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (hasTag) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            addActivityWithTag(activityName, this.parameters);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            addActivity(activityName);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Parse the tag and allocate information."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param line a line with information on tags and allocated time."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void parseActivityWithBothField(String activityName, String line) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int allocateIndex \u003d line.indexOf(\"/a\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int tagIndex \u003d line.indexOf(\"/t\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assert tagIndex !\u003d -1 \u0026\u0026 allocateIndex !\u003d -1;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String tagInfo \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String durationInfo \u003d \"\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tagIndex \u003c allocateIndex) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            tagInfo \u003d line.substring(tagIndex, allocateIndex);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            durationInfo \u003d line.substring(allocateIndex);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            tagInfo \u003d tagInfo.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            durationInfo \u003d durationInfo.trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (allocateIndex \u003c tagIndex) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            durationInfo \u003d line.substring(allocateIndex, tagIndex);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            tagInfo \u003d line.substring(tagIndex);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            tagInfo \u003d tagInfo.trim();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            durationInfo \u003d durationInfo.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        durationInfo \u003d durationInfo.substring(2);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        durationInfo \u003d durationInfo.trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        tagInfo \u003d tagInfo.substring(2);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        tagInfo \u003d tagInfo.trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        addActivityWithBothField(durationInfo, tagInfo, activityName);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Add activity with both tag and allocate time."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param durationInfo information about the duration."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param tagInfo information about the tag."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void addActivityWithBothField(String durationInfo, String tagInfo, String activityName) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String[] tagStrings \u003d tagInfo.split(\" \");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            checkBothField(durationInfo, tagInfo, activityName, tagStrings);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Allocated time provided was not valid.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Time provided is invalid, please provide time in this format\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \" HH:MM:SS.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Check if allocated time and tags are formatted correctly/not empty."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param durationInfo information about the duration."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param tagInfo information about the tag."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param tagStrings tokenized information about the tags."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void checkBothField(String durationInfo, String tagInfo, String activityName, String[] tagStrings) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        LocalTime startTime \u003d LocalTime.MIN;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        LocalTime endTime;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        endTime \u003d LocalTime.parse(durationInfo);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d getTags(tagStrings);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tagInfo.isEmpty()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"No tags found with tag flag.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Please provide a valid tag\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (allocatedTime \u003d\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Allocated time is zero.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please provide a non zero allocated time.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (tags.size() \u003e 2) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Activity has more than 2 tags\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"There cannot be more than 2 tags.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Parser.tags.addAll(tags);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Parser.allocatedTime \u003d allocatedTime;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            addActivity(activityName);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Add activity with allocated time only."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param line a line with information about allocated time."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void addActivityWithAllocation(String activityName, String line) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int index \u003d line.indexOf(\"/a\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String durationInfo \u003d line.substring(index + 2);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        durationInfo \u003d durationInfo.trim();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        LocalTime startTime \u003d LocalTime.MIN;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            checkTime(activityName, durationInfo, startTime);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Allocated time provided was not valid.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Time provided is invalid, please provide time in this format\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \" HH:MM:SS.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to check if allocated time given is valid before adding the activity."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param durationInfo the string representing the duration information."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param startTime a LOCALTIME object representing the time 00:00:00."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void checkTime(String activityName, String durationInfo, LocalTime startTime) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        LocalTime endTime;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        endTime \u003d LocalTime.parse(durationInfo);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (allocatedTime \u003d\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Allocated time is zero.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please provide a non zero allocated time.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Parser.allocatedTime \u003d allocatedTime;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            addActivity(activityName);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Add activity with tags only."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param line a line with information about tags."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void addActivityWithTag(String activityName, String line) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int index \u003d line.indexOf(\"/t\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String tagInfo \u003d line.substring(index + 2);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        tagInfo \u003d tagInfo.trim();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String[] tagStrings \u003d tagInfo.split(\" \");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d getTags(tagStrings);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tagInfo.isEmpty()) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"No tags found with tag flag.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please provide a valid tag.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (tags.size() \u003e 2) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"Activity has more than 2 tags\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"There cannot be more than 2 tags.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Parser.tags.addAll(tags);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            addActivity(activityName);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to get valid tags from an array of tags."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param tagStrings array of tags"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return an array list consisting of valid tags"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private ArrayList\u003cString\u003e getTags(String[] tagStrings) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        for (String s : tagStrings) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String tag \u003d s.trim();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (!tag.isEmpty()) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                tags.add(tag);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Add activity to activity list."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName the string representing activity name."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void addActivity(String activityName) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Parser.activityName \u003d activityName;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Parser.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Log.makeFineLog(activityName + \" was started.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Ui.printDivider(activityName + \" was started.\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Received user input on whether or not to continue the activity."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList List of activities."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param scanner Parse user input."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static void continueActivity(ActivityList activityList, Scanner scanner, int index) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (userInput.equalsIgnoreCase(\"yes\") || userInput.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.activityName \u003d activityList.get(index).getName();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.tags \u003d activityList.get(index).getTags();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.continuedIndex \u003d index;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(Parser.activityName + \" was continued.\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Log.makeFineLog(Parser.activityName + \" was continued.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else if (userInput.equalsIgnoreCase(\"no\") || userInput.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.activityName \u003d null;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Okay then, what else can I do for you?\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Incorrect format entered, please only enter yes or no.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 36,
      "rdimaio": 2,
      "siuhian": 339,
      "nigellenl": 22
    }
  },
  {
    "path": "src/main/java/jikan/command/ViewGoalsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyTagException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.storage.StorageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to view goals for tags in the activity list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ViewGoalsCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    //File tagFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static final String TAG_FILE_PATH \u003d \"data/tag/tag.csv\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public Storage tagStorage; // Storage the list was loaded from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public StorageHandler tagStorageHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new viewgoal command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param parameters the parameters of the goal command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public ViewGoalsCommand(String parameters, Storage tagStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.tagStorage \u003d tagStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.tagStorageHandler \u003d new StorageHandler(tagStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        HashMap\u003cString, Duration\u003e tagsGoals \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        populateTagList(tagStorage, tagsGoals);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        getGoalData(activityList,tagsGoals);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private void getGoalData(ActivityList activityList, HashMap\u003cString, Duration\u003e tagsGoals) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        HashMap\u003cString, Duration\u003e tagsActual \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        for (Activity activity : activityList.activities) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            GraphCommand.extractTags(tagsActual, activity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (tagsActual.isEmpty() || tagsGoals.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                throw new EmptyTagException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printGoals(tagsGoals, tagsActual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NullPointerException | EmptyTagException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"There are no tags to display.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Populates task list from file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagStorage Storage object containing the tag file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private void populateTagList(Storage tagStorage, HashMap\u003cString, Duration\u003e tagsGoals) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Scanner dataScanner \u003d new Scanner(tagStorage.dataFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                parseDataLine(dataScanner.nextLine(), tagsGoals);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Data file not found. Could not load into the current session\u0027s tag list.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Error.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Parses the current line in the tag file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param s String to parse."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void parseDataLine(String s, HashMap\u003cString, Duration\u003e tagsGoals) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        if (!s.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            List\u003cString\u003e strings \u003d Arrays.asList(s.split(\",\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Duration duration \u003d Duration.parse(strings.get(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            tagsGoals.put(strings.get(0), duration);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 4,
      "nigellenl": 86
    }
  },
  {
    "path": "src/main/java/jikan/exception/ActivityIsRunningException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class ActivityIsRunningException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 5
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyGoalException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EmptyGoalException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * An exception that is thrown when the task name field is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EmptyNameException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyQueryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * An exception that is thrown when the query for find or filter is not provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class EmptyQueryException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyTagException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EmptyTagException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/ExistingNameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class ExistingNameException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/ExistingTagGoalException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ExistingTagGoalException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/ExtraParametersException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class ExtraParametersException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidCleanCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class InvalidCleanCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidEditFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class InvalidEditFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidGoalCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class InvalidGoalCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidTimeFrameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * An exception that is thrown when the time frame is invalid (e.g., the end time comes before the start time)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class InvalidTimeFrameException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/MissingParametersException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class MissingParametersException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/MultipleDelimitersException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class MultipleDelimitersException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/NameTooLongException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * An exception that is thrown when the task name field is longer than 25 characters."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class NameTooLongException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/NegativeDurationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class NegativeDurationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/NegativeNumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class NegativeNumberException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/NoSuchActivityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * An exception that is thrown when the task name is unknown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class NoSuchActivityException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/NoSuchTagException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class NoSuchTagException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/WrongDateFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class WrongDateFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 4
    }
  },
  {
    "path": "src/main/java/jikan/log/Log.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.log;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents a logger object to log user commands and outcomes to a logfile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class Log {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static Logger logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static SimpleFormatter formatterTxt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public String logFilePath \u003d \"data/LogRecord.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static File logFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new logger."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Log() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger \u003d Logger.getLogger(Log.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        consoleHandler.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logFile \u003d new File(logFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!logFile.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // Create file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                logFile.getParentFile().mkdirs(); // Create data directory (does nothing if directory already exists)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                logFile.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        FileHandler fileHandler \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            fileHandler \u003d new FileHandler(\"data/LogRecord.txt\", true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "        formatterTxt \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileHandler.setFormatter(formatterTxt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "        logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at FINE level."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the FINE message to be logged"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void makeFineLog(String message) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.FINE, message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at INFO level."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the INFO message to be logged"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void makeInfoLog(String message) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.INFO, message);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at WARNING level."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the WARNING warning message to be logged"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public void makeWarningLog(String message) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.WARNING, message);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 25,
      "rdimaio": 34,
      "siuhian": 1,
      "nigellenl": 1,
      "ananda-lye": 19
    }
  },
  {
    "path": "src/main/java/jikan/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.MultipleDelimitersException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.cleaner.StorageCleaner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.AbortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.ByeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.CleanCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.ContinueCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.EndCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.GoalCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.GraphCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.StartCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.ViewGoalsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.cleaner.LogCleaner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import static jikan.log.Log.makeInfoLog;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents the object which parses user input to relevant functions for the execution of commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String ABORT \u003d \"abort\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String CLEAN \u003d \"clean\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String CONTINUE \u003d \"continue\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String END \u003d \"end\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String FILTER \u003d \"filter\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String GOAL \u003d \"goal\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String GRAPH \u003d \"graph\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static final String START \u003d \"start\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static LocalDateTime startTime \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static LocalDateTime endTime \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static String activityName \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public StorageCleaner cleaner;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public LogCleaner logcleaner;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public Storage tagStorage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static String[] tokenizedInputs;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    String instruction;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static Log logger \u003d new Log();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "    // flag to check if the current activity is a continued one"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static int continuedIndex \u003d -1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Parses user commands to relevant functions to carry out the commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param scanner      scanner object which reads user input"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Command parseUserCommands(Scanner scanner) throws NullPointerException,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "            ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "        makeInfoLog(\"Starting to parse inputs.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        tokenizedInputs \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        instruction \u003d tokenizedInputs[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        switch (instruction) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (tokenizedInputs.length \u003e 1 \u0026\u0026 !tokenizedInputs[1].isBlank()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Extra parameters detected.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new ByeCommand(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case START:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new StartCommand(tokenizedInputs[1], scanner);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "                makeInfoLog(\"Activity started without activity name\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case END:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (tokenizedInputs.length \u003e 1 \u0026\u0026 !tokenizedInputs[1].isBlank()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Extra parameters detected.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btricec"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new EndCommand(null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case ABORT:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (tokenizedInputs.length \u003e 1 \u0026\u0026 !tokenizedInputs[1].isBlank()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Extra parameters detected.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new AbortCommand(null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (tokenizedInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new ListCommand(null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new ListCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new DeleteCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new FindCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"Please only use one \u0027;\u0027 between each command.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case FILTER:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new FilterCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printDivider(\"Please only use one \u0027;\u0027 between each command.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new EditCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btricec"
        },
        "content": "                makeInfoLog(\"Edit command failed as there was no existing activity name provided.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case CLEAN:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                command \u003d new CleanCommand(tokenizedInputs[1], this.cleaner, this.logcleaner);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case CONTINUE:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new ContinueCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btricec"
        },
        "content": "                makeInfoLog(\"Continue command failed as there was no activity name provided.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case GRAPH:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new GraphCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Please input an integer for the time interval.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } catch (ExtraParametersException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Extra parameters or invalid format detected.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Please specify whether you want to graph activities / tags / allocations.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case GOAL:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (tokenizedInputs.length \u003d\u003d 1 || tokenizedInputs[1].isBlank() || tokenizedInputs[1] \u003d\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    command \u003d new ViewGoalsCommand(null, this.tagStorage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    command \u003d new GoalCommand(tokenizedInputs[1], scanner, this.tagStorage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Tag name cannot be empty.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            parseDefault();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Method to parse user inputs that are not recognised."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void parseDefault() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String line \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "btricec"
        },
        "content": "        makeInfoLog(\"Invalid command entered\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Ui.printDivider(line);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Resets parameters, called when an activity is ended or aborted."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void resetInfo() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "btricec"
        },
        "content": "        startTime \u003d null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activityName \u003d null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "btricec"
        },
        "content": "        allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 3,
      "btricec": 118,
      "siuhian": 15,
      "nigellenl": 50,
      "ananda-lye": 33
    }
  },
  {
    "path": "src/main/java/jikan/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Class that holds the path and File object for the current data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Path to current data file. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public String dataFilePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** File object for current data file. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public File dataFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Activity list linked to this storage file. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public ActivityList activityList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructs a Storage object for the input file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFilePath The data file\u0027s file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Storage(String dataFilePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert dataFilePath !\u003d null : \"dataFilePath must not be null\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.dataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert dataFile instanceof File;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Writes the input string to file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param s The input string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void writeToFile(String s) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dataFilePath, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        fw.write(s + System.lineSeparator());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Loads the data file. Creates file and directories if data file did not previously exist."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return True if file previously existed (and was not created); False if file did not exist and was created."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public boolean loadFile() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Create data file if it does not exist already"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            createDataFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            return false; // false \u003d file didn\u0027t previously exist, so it was created"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return true; // true \u003d file previously existed, and was not created"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Creates a file and any non-existing directories to that file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while creating the file or directories."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void createDataFile() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile.getParentFile().mkdirs(); // Create data directory (does nothing if directory already exists)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Creates ActivityList and loads data from data file if the data file previously existed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Otherwise, an empty task list is initialized."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return an ActivityList object containing a list of activities provided by the data file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public ActivityList createActivityList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (loadFile()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                activityList \u003d new ActivityList(this, dataFile);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                activityList \u003d new ActivityList(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error loading/creating data file.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert activityList instanceof ActivityList : \"Method should return an ActivityList\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Clears the data file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws FileNotFoundException If file is not found."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void clearFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "        PrintWriter writer \u003d new PrintWriter(dataFile);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "        writer.print(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 67,
      "btricec": 15,
      "siuhian": 21
    }
  },
  {
    "path": "src/main/java/jikan/storage/StorageHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Class containing useful functions for modifying the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageHandler {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructs a StorageHandler object for the input Storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param storage The data file\u0027s file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public StorageHandler(Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert storage !\u003d null : \"Input Storage must not be a null pointer\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Removes the line whose index matches lineNumber from file at dataFilePath."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Index of line to remove."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param storage Storage object which contains path to save file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void removeLine(int lineNumber, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert storage !\u003d null : \"Input Storage must not be a null pointer\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert lineNumber \u003e\u003d 0 : \"lineNumber cannot be negative\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Read file into list of strings, where each string is a line in the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(storage.dataFilePath),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "                StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileContent.remove(lineNumber);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "        saveNewList(fileContent, storage.dataFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Saves the updated activity list to a list of strings to write to the save file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activities New activity list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param storage Storage object to obtain file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void updateField(ArrayList\u003cActivity\u003e activities, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert storage !\u003d null : \"Input Storage must not be a null pointer\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (Activity a : activities) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            fileContent.add(a.toData());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "        saveNewList(fileContent, storage.dataFile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Saves a the updated activity list to the csv file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param newList The list containing the updated data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param dataFile The file to save to."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void saveNewList(List\u003cString\u003e newList, File dataFile) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assert dataFile !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "        FileOutputStream fileOutputStream \u003d new FileOutputStream(dataFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(fileOutputStream);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (String s : newList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "            printWriter.println(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileOutputStream.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 44,
      "btricec": 41
    }
  },
  {
    "path": "src/main/java/jikan/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static final String LOGO \u003d \"::::::::::: ::::::::::: :::    :::     :::     ::::    :::\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \"    :+:         :+:     :+:   :+:    :+: :+:   :+:+:   :+:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \"    +:+         +:+     +:+  +:+    +:+   +:+  :+:+:+  +:+\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \"    +#+         +#+     +#++:++    +#++:++#++: +#+ +:+ +#+\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \"    +#+         +#+     +#+  +#+   +#+     +#+ +#+  +#+#+#\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \"#+# #+#         #+#     #+#   #+#  #+#     #+# #+#   #+#+#\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \" #####      ########### ###    ### ###     ### ###    ####\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static final String WELCOMEMESSAGE \u003d \" Hello there! I\u0027m Jikan, your trusty time tracker.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \" What can I do for you today?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static final String DIVIDER \u003d \"-------------------------------\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \"-----------------------------------------------------------\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static final int PROGRESSCONVERTER \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static final int TOTALBARS \u003d 50;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final DecimalFormat DF2 \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints the logo and greeting so users know the app is working. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(LOGO);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(WELCOMEMESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints exit message and exits the app. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void exitFromApp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(\" Bye! See you again.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints divider between user input and app feedback. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void printDivider(String line) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static void printTableFormat(ActivityList activityList, int index, boolean gotTags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "        long durationInNanos \u003d (activityList.get(index).getDuration()).toNanos();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        long allocatedTimeInNanos \u003d (activityList.get(index).getAllocatedTime()).toNanos();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String duration \u003d formatString(durationInNanos);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String allocatedTime \u003d formatString(allocatedTimeInNanos);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String printIndex \u003d String.valueOf(index + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (index \u003c 9) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "            printIndex \u003d String.valueOf(index + 1) + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (gotTags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(String.format(\"%s %s %-25s %s %-10s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    printIndex, \"|\", activityList.get(index).getName(), \"|\", duration, \"|\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    allocatedTime, \"|\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    activityList.get(index).getDate().toString(), \"|\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    activityList.get(index).getTags().toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(String.format(\"%s %s %-25s %s %-10s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    printIndex, \"|\", activityList.get(index).getName(), \"|\", duration, \"|\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    allocatedTime, \"|\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    activityList.get(index).getDate().toString(), \"|\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    \"\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static String formatString(long timeInNanos) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return String.format(\"%02d:%02d:%02d\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toHours(timeInNanos),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toMinutes(timeInNanos)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                        - TimeUnit.HOURS.toMinutes(TimeUnit.NANOSECONDS.toHours(timeInNanos)),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toSeconds(timeInNanos)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                        - TimeUnit.MINUTES.toSeconds(TimeUnit.NANOSECONDS.toMinutes(timeInNanos)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Prints the results from a \u0027find\u0027 or \u0027filter\u0027 command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param resultsList the list of activities to print"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static void printResults(ActivityList resultsList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (resultsList.activities.size() \u003e 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Here are the matching activities in your list:\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(String.format(\"   %s %-25s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    \"|\", \"Name\", \"|\", \"Duration\", \"|\", \"Allocation\",\"|\", \"Date\", \"|\", \"Tags\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            for (int i \u003d 0; i \u003c resultsList.getSize(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                if (resultsList.get(i).getTags() !\u003d null \u0026\u0026 !resultsList.get(i).getTags().isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    printTableFormat(resultsList, i, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    printTableFormat(resultsList, i, false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            printDivider(\"There are no activities matching that description.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /** Prints all the activities in a list. */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static void printList(ActivityList activityList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(\"Your completed activities:\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(String.format(\"   %s %-25s %s %-10s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                \"|\", \"Name\", \"|\", \"Duration\", \"|\", \"Allocation\", \"|\", \"Date\", \"|\", \"Tags\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (int i \u003d 0; i \u003c activityList.getSize(); i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (activityList.get(i).getTags() !\u003d null \u0026\u0026 !activityList.get(i).getTags().isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "                printTableFormat(activityList, i, true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "                printTableFormat(activityList, i, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Prints a graph of the last shown list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param interval The time interval for the graph."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void printActivityGraph(int interval) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(String.format(\"%-25s %s %s\", \"Name\", \"|\", \"Duration\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.getSize(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Activity activity \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d activity.getDuration();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": "            double minutes \u003d duration.toMinutes() / (double) interval;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int scaledMinutes \u003d (int) Math.round(minutes);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.print(String.format(\"%-25s %s\", activity.getName(), \"|\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (int j \u003d 0; j \u003c scaledMinutes; j++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btricec"
        },
        "content": "                System.out.print(\"*\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Prints a graph based on activity tags."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param tags The set of tags to be graphed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void printTagsGraph(HashMap\u003cString, Duration\u003e tags, int interval) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(String.format(\"%-10s %s %s\", \"Tag\", \"|\", \"Duration\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.forEach((key,value) -\u003e {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btricec"
        },
        "content": "            double minutes \u003d value.toMinutes() / interval;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int scaledMinutes \u003d (int) Math.round(minutes);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.print(String.format(\"%-10s %s\", key, \"|\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (int j \u003d 0; j \u003c scaledMinutes; j++) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btricec"
        },
        "content": "                System.out.print(\"*\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "btricec"
        },
        "content": "        });"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /** Print goals as a table."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Print goals as a table."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagsGoals the goals set for each tag."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagsActual the actual duration spent for each tag."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void printGoals(HashMap\u003cString, Duration\u003e tagsGoals, HashMap\u003cString, Duration\u003e tagsActual) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        System.out.println(String.format(\"   %-15s %s %-15s %s %-15s %s %s\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                \"Tag\", \"|\", \"Goal\", \"|\", \"Actual\", \"|\", \"Duration left\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tagsGoals.forEach((key, value) -\u003e {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String message;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String goalDuration \u003d convertDuration(tagsGoals.get(key));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String actualDuration \u003d convertDuration(tagsActual.get(key));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Duration difference \u003d tagsGoals.get(key).minus(tagsActual.get(key));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String diffDuration \u003d convertDuration(difference);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (difference.isNegative()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (diffDuration.equals(\"00:00:00\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    message \u003d \" [You have met your goal!]\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    message \u003d \" [You have exceeded your goal!]\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                message \u003d \" [You have not met your goal!]\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(String.format(\"   %-15s %s %-15s %s %-15s %s %s\", key, \"|\", goalDuration,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    \"|\", actualDuration, \"|\", diffDuration + message));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /** Prints a progress message and progress bar based on the percentage of allocate time achieved."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param percent percentage of allocated time achieved"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static void printProgressMessage(double percent) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (percent \u003c 100) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Almost there ! Here\u0027s your progress:\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Great job! Here\u0027s your progress:\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        int starsLeft \u003d (int) (percent / PROGRESSCONVERTER);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.print(\"Progress for \" + Parser.activityName + \": \");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        for (int i \u003d 0; i \u003c TOTALBARS; i++) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (starsLeft \u003e 0) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                System.out.print(\"*\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                starsLeft--;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.println((int) percent + \"% completed\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /** Method to print progress bar without message."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param percent percentage of allocated time achieved."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName name of a particular activity."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static void printProgressBar(double percent, String activityName) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int starsLeft \u003d (int) (percent / PROGRESSCONVERTER);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String line \u003d \"Progress for \" + activityName + \": \";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.print(String.format(\"%-35s\", line));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        for (int i \u003d 0; i \u003c TOTALBARS; i++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (starsLeft \u003e 0) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                System.out.print(\"*\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                starsLeft--;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(\"|  \" + DF2.format(percent) + \"%\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to graph out all the allocations."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityList a list of all activities."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static void graphAllocation(ActivityList activityList) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        for (int i \u003d 0; i \u003c activityList.getSize(); i++) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (activityList.get(i).getAllocatedTime() \u003d\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            double percent \u003d activityList.get(i).getProgressPercent();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String activityName \u003d activityList.get(i).getName();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            printProgressBar(percent, activityName);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /** Converts duration object to a string for printing."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param dur the duration object."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @return duration the duration as a string."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static String convertDuration(Duration dur) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        long durationInNanos \u003d dur.toNanos();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String duration \u003d String.format(\"%02d:%02d:%02d\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                TimeUnit.NANOSECONDS.toHours(durationInNanos),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                TimeUnit.NANOSECONDS.toMinutes(durationInNanos)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        - TimeUnit.HOURS.toMinutes(TimeUnit.NANOSECONDS.toHours(durationInNanos)),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                TimeUnit.NANOSECONDS.toSeconds(durationInNanos)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        - TimeUnit.MINUTES.toSeconds(TimeUnit.NANOSECONDS.toMinutes(durationInNanos)));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 67,
      "siuhian": 108,
      "nigellenl": 47,
      "ananda-lye": 56
    }
  },
  {
    "path": "src/test/java/jikan/activity/ActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "class ActivityListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    void getIndex() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "        ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        HashSet\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(activity2, activities.get(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        activities.storage.dataFile.delete();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 8,
      "btricec": 22,
      "siuhian": 4,
      "ananda-lye": 4
    }
  },
  {
    "path": "src/test/java/jikan/activity/ActivityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "class ActivityTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    //the tags is empty here as adding needs to be done in a method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    Activity activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activity \u003d new Activity(\"Activity\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getDuration() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(\"PT2H\", activity.getDuration().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(\"Activity\", activity.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getTags() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(tags, activity.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 13,
      "btricec": 29,
      "siuhian": 2,
      "ananda-lye": 3
    }
  },
  {
    "path": "src/test/java/jikan/command/AbortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "class AbortCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeAbort() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Parser.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Command command \u003d new AbortCommand(null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNull(Parser.startTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Filed error.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 26
    }
  },
  {
    "path": "src/test/java/jikan/command/CleanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.cleaner.LogCleaner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.cleaner.StorageCleaner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.exception.InvalidCleanCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.exception.NegativeNumberException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "class CleanCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    Storage storage \u003d new Storage(\"data/test.csv\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    StorageCleaner storageCleaner \u003d new StorageCleaner(storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    LogCleaner logCleaner \u003d new LogCleaner();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    void checkIfParameterEmpty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        CleanCommand cleanCommand \u003d new CleanCommand(\"\", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        boolean isEmpty \u003d cleanCommand.isParameterEmpty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(isEmpty,true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanCommand \u003d new CleanCommand(\"  \", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        isEmpty \u003d cleanCommand.isParameterEmpty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(isEmpty, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanCommand \u003d new CleanCommand(\"   abc\", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        isEmpty \u003d cleanCommand.isParameterEmpty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(isEmpty, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanCommand \u003d new CleanCommand(\"abc  \", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        isEmpty \u003d cleanCommand.isParameterEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(isEmpty, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanCommand \u003d new CleanCommand(\"  abc  \", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        isEmpty \u003d cleanCommand.isParameterEmpty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(isEmpty, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    void checkGetFirstWord() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        CleanCommand cleanCommand \u003d new CleanCommand(\"\", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String firstWord \u003d cleanCommand.getFirstWord(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(firstWord,\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        firstWord \u003d cleanCommand.getFirstWord(\"abc\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(firstWord, \"abc\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        firstWord \u003d cleanCommand.getFirstWord(\"abc  def geh\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(firstWord, \"abc\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        firstWord \u003d cleanCommand.getFirstWord(\"ab c\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(firstWord, \"ab\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    void checkGetRemainingParameter() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        CleanCommand cleanCommand \u003d new CleanCommand(\"log on\", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String remainingParameter \u003d cleanCommand.getRemainingParameter(\"log\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(remainingParameter, \"on\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanCommand \u003d new CleanCommand(\"log  on\", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        remainingParameter \u003d cleanCommand.getRemainingParameter(\"log\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(remainingParameter, \"on\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanCommand \u003d new CleanCommand(\"log  on /n\", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        remainingParameter \u003d cleanCommand.getRemainingParameter(\"log\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(remainingParameter, \"on /n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanCommand \u003d new CleanCommand(\"log  on 123    \", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        remainingParameter \u003d cleanCommand.getRemainingParameter(\"log\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(remainingParameter, \"on 123\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleanCommand \u003d new CleanCommand(\"log\", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        remainingParameter \u003d cleanCommand.getRemainingParameter(\"log\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        assertEquals(remainingParameter, \"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    void checkGetNumber() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        CleanCommand cleanCommand \u003d new CleanCommand(\"\", storageCleaner, logCleaner);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Assertions.assertThrows(InvalidCleanCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            cleanCommand.getNumber(\"123 \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Assertions.assertThrows(NegativeNumberException.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            cleanCommand.getNumber(\"-123\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int number \u003d cleanCommand.getNumber(\"123\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assertEquals(number, 123);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (InvalidCleanCommandException | NegativeNumberException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            // Should not reach here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int number \u003d cleanCommand.getNumber(\"0\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assertEquals(number, 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (InvalidCleanCommandException | NegativeNumberException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            // Should not reach here"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 93
    }
  },
  {
    "path": "src/test/java/jikan/command/ContinueCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "class ContinueCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    Storage storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    ActivityList activities \u003d new ActivityList(storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void resetFields() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Parser.startTime \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Parser.tags.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeContinue() throws InterruptedException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String parameters \u003d \"Activity2\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new ContinueCommand(parameters);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(startTime.getMinute(), Parser.startTime.getMinute());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            final Duration initial \u003d activities.get(1).getDuration();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Thread.sleep(2000);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "            resetFields();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // End Activity2"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new EndCommand(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration elapsed \u003d initial.plus(Duration.between(startTime, LocalDateTime.now()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d activities.get(1).getDuration();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(elapsed.toMinutes(), duration.toMinutes());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (EmptyNameException | InvalidTimeFrameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Error.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 67,
      "rdimaio": 9,
      "siuhian": 4
    }
  },
  {
    "path": "src/test/java/jikan/command/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    Storage storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    ActivityList activities \u003d new ActivityList(storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeDelete() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Invalid time frame.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String parameters \u003d \"Activity2\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Command command \u003d new DeleteCommand(parameters);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(activities.get(1).getName(), \"Activity3\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(activities.getSize(), 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 57,
      "rdimaio": 9,
      "siuhian": 4
    }
  },
  {
    "path": "src/test/java/jikan/command/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    Storage storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    ActivityList activities \u003d new ActivityList(storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    void executeEditName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Invalid time frame.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String parameters \u003d \"Activity2 /en Activity4\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Command command \u003d new EditCommand(parameters);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        assertEquals(activities.get(1).getName(), \"Activity4\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    void executeEditAllocatedTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Invalid time frame.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String parameters \u003d \"Activity2 /ea 10:10:10\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Command command \u003d new EditCommand(parameters);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        assertEquals(activities.get(1).getAllocatedTime(), Duration.parse(\"PT10H10M10S\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 88
    }
  },
  {
    "path": "src/test/java/jikan/command/FilterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.Jikan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.MultipleDelimitersException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "class FilterCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String BASIC_TEST \u003d \"tagA\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String NULL_RESULTS_TEST \u003d \"tagZ\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String MULTI_KEYWORD_TEST \u003d \"tagA tagC tagD\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String FIND_CHAINING_TEST \u003d \"subject2 / subject3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String CHAINING_TEST \u003d \"-s tagA tagB\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    HashSet\u003cString\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    HashSet\u003cString\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    ArrayList\u003cActivity\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.activities.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags1.add(\"tagA\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags1.add(\"tagB\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags2.add(\"tagC\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags2.add(\"tagD\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity1 \u003d new Activity(\"subject1 quiz\", startTime, endTime, duration, tags1, allocatedTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity2 \u003d new Activity(\"subject2 quiz\", startTime, endTime, duration, tags1, allocatedTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity3 \u003d new Activity(\"subject3 final\", startTime, endTime, duration, tags2, allocatedTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedBasic() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedNull() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedMultiKeyword() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedChaining() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void executeCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command basicTest \u003d new FilterCommand(BASIC_TEST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            basicTest.executeCommand(activities);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedBasic();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command nullResultsTest \u003d new FilterCommand(NULL_RESULTS_TEST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            nullResultsTest.executeCommand(activities);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedNull();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command multiKeywordTest \u003d new FilterCommand(MULTI_KEYWORD_TEST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            multiKeywordTest.executeCommand(activities);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedMultiKeyword();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command find \u003d new FindCommand(FIND_CHAINING_TEST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command chainingTest \u003d new FilterCommand(CHAINING_TEST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            find.executeCommand(activities);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            chainingTest.executeCommand(activities);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedChaining();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (InvalidTimeFrameException | EmptyNameException | ExtraParametersException | NameTooLongException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Multiple Delimiters\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 119
    }
  },
  {
    "path": "src/test/java/jikan/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.Jikan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.MultipleDelimitersException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String BASIC_TEST \u003d \"quiz\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String NULL_RESULTS_TEST \u003d \"popquiz\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String MULTI_KEYWORD_TEST \u003d \"subject2 / final\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String FILTER_CHAINING_TEST \u003d \"tagC tagD\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String CHAINING_TEST \u003d \"-s quiz\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    HashSet\u003cString\u003e tagSetVersion1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    HashSet\u003cString\u003e tagsSetVersion2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    ArrayList\u003cActivity\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.activities.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tagSetVersion1.add(\"tagA\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tagSetVersion1.add(\"tagB\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tagsSetVersion2.add(\"tagC\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tagsSetVersion2.add(\"tagD\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity1 \u003d new Activity(\"subject1 quiz\", startTime, endTime, duration, tagSetVersion1, allocatedTime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity2 \u003d new Activity(\"subject2 quiz\", startTime, endTime, duration, tagsSetVersion2, allocatedTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity3 \u003d new Activity(\"subject1 final\", startTime, endTime, duration, tagsSetVersion2, allocatedTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedBasic() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedNull() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedMultiKeyword() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedChaining() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void executeCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command basicTest \u003d new FindCommand(BASIC_TEST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            basicTest.executeCommand(activities);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedBasic();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command nullResultsTest \u003d new FindCommand(NULL_RESULTS_TEST);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            nullResultsTest.executeCommand(activities);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedNull();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command multiKeywordTest \u003d new FindCommand(MULTI_KEYWORD_TEST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            multiKeywordTest.executeCommand(activities);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedMultiKeyword();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command filter \u003d new FilterCommand(FILTER_CHAINING_TEST);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command chainingTest \u003d new FindCommand(CHAINING_TEST);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            filter.executeCommand(activities);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            chainingTest.executeCommand(activities);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedChaining();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (InvalidTimeFrameException | EmptyNameException | ExtraParametersException | NameTooLongException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (MultipleDelimitersException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Multiple delimiters\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 118
    }
  },
  {
    "path": "src/test/java/jikan/command/GoalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "class GoalCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    Storage storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    ActivityList activities \u003d new ActivityList(storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    void executeGoal() throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Invalid time frame.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String parameters \u003d \"tag1 /g 10:10:10\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String tagName \u003d \"tag1\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Storage tagStorage \u003d new Storage(\"data/tag_test.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String testFile \u003d \"data/tag_test.txt\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tagStorage.loadFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        assertTrue(tagStorage.dataFile.exists());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Command command \u003d new GoalCommand(parameters, scanner, tagStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (GoalCommand.checkIfExists(tagName, testFile) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                found \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                assertFalse(found);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                tagStorage.dataFile.delete();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                found \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                assertTrue(found);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                tagStorage.dataFile.delete();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 85
    }
  },
  {
    "path": "src/test/java/jikan/command/GraphCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "class GraphCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "    ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "    HashSet\u003cString\u003e tags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "    HashSet\u003cString\u003e tags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.activities.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags1.add(\"tag1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags1.add(\"tag2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags2.add(\"tag1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags2.add(\"tag3\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT2H30M\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags1, allocatedTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags1, allocatedTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags2, allocatedTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void newCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "        ExtraParametersException extraParametersException \u003d assertThrows(ExtraParametersException.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new GraphCommand(\"tags 10 extra\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void printTest() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // After this all System.out.println() statements will come to outContent stream."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // So, you can normally call,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // print(items); // I will assume items is already initialized properly."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "        //Now you have to validate the output. Let\u0027s say items had 1 element."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // With name as FirstElement and number as 1."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // String expectedOutput  \u003d \"Name: FirstElement\\nNumber: 1\" // Notice the \\n for new line."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Do the actual assertion."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void extractTags() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "        HashMap\u003cString, Duration\u003e expected \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "        expected.put(\"tag1\", Duration.parse(\"PT6H\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "        expected.put(\"tag2\", Duration.parse(\"PT4H\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "        expected.put(\"tag3\", Duration.parse(\"PT2H\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "            HashMap\u003cString, Duration\u003e tags \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (Activity activity : activities.activities) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "                GraphCommand.extractTags(tags, activity);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(expected, tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (NameTooLongException | InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 93
    }
  },
  {
    "path": "src/test/java/jikan/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.Jikan;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String DATE_FORMAT_1 \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String DATE_FORMAT_2 \u003d \"2020-01-01\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String DATE_RANGE \u003d \"01/01/2020 20/02/2020\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String DAY_FORMAT_1 \u003d \"day\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String DAY_FORMAT_2 \u003d \"daily\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String WEEK_FORMAT_1 \u003d \"week\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final String WEEK_FORMAT_2 \u003d \"weekly\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final LocalDateTime START_TIME_1 \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final LocalDateTime END_TIME_1 \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final LocalDateTime START_TIME_2 \u003d LocalDateTime.parse(\"2020-01-15T08:00:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final LocalDateTime END_TIME_2 \u003d  LocalDateTime.parse(\"2020-01-15T10:00:00\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final LocalDateTime START_TIME_3 \u003d LocalDateTime.parse(\"2020-03-01T08:00:00\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static final LocalDateTime END_TIME_3 \u003d  LocalDateTime.parse(\"2020-03-01T10:00:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    ArrayList\u003cActivity\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    LocalDateTime nextWeek \u003d currentTime.plusWeeks(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity4;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    Activity activity6;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.activities.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags.add(\"tagA\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags.add(\"tagB\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Duration duration \u003d Duration.between(START_TIME_1, END_TIME_1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity1 \u003d new Activity(\"subject1 quiz\", START_TIME_1, END_TIME_1, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity2 \u003d new Activity(\"subject2 quiz\", START_TIME_1, END_TIME_1, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity3 \u003d new Activity(\"subject3 final\", START_TIME_2, END_TIME_2, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity4 \u003d new Activity(\"subject4 final\", START_TIME_3, END_TIME_3, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity5 \u003d new Activity(\"subject5 quiz\", currentTime, currentTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activity6 \u003d new Activity(\"subject6 final\", currentTime.plusDays(1),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                currentTime.plusDays(1), duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity4);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity5);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        activities.add(activity6);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedBasic() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity4);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity5);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity6);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedSingleDate() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedDateRange() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity3);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedDay() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity5);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void populateExpectedWeek() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        expected.add(activity5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (activity6.getDate().getDayOfWeek() !\u003d DayOfWeek.MONDAY) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            expected.add(activity6);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    void executeCommand() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command basicTest \u003d new ListCommand(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            basicTest.executeCommand(activities);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedBasic();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command dateFormat1Test \u003d new ListCommand(DATE_FORMAT_1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            dateFormat1Test.executeCommand(activities);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedSingleDate();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command dateFormat2Test \u003d new ListCommand(DATE_FORMAT_2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            dateFormat2Test.executeCommand(activities);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedSingleDate();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command dateRangeTest \u003d new ListCommand(DATE_RANGE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            dateRangeTest.executeCommand(activities);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedDateRange();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command dayFormat1Test \u003d new ListCommand(DAY_FORMAT_1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            dayFormat1Test.executeCommand(activities);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedDay();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command dayFormat2Test \u003d new ListCommand(DAY_FORMAT_2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            dayFormat2Test.executeCommand(activities);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedDay();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command weekFormat1Test \u003d new ListCommand(WEEK_FORMAT_1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            weekFormat1Test.executeCommand(activities);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedWeek();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Command weekFormat2Test \u003d new ListCommand(WEEK_FORMAT_2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            weekFormat2Test.executeCommand(activities);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            populateExpectedWeek();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            assertEquals(Jikan.lastShownList.activities, expected);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (InvalidTimeFrameException | EmptyNameException | ExtraParametersException | NameTooLongException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 170
    }
  },
  {
    "path": "src/test/java/jikan/command/StartCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.ExtraParametersException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.NameTooLongException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "class StartCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "    ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException, NameTooLongException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.activities.clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void resetFields() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Parser.startTime \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Parser.tags.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeStart() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String parameters \u003d \"Activity 3 /t tag tag1\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new StartCommand(parameters, scanner);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "            HashSet\u003cString\u003e activity3Tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activity3Tags.add(\"tag\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activity3Tags.add(\"tag1\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNotNull(Parser.startTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(Parser.activityName, \"Activity 3\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(activity3Tags, Parser.tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "            resetFields();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // end started activity to test continue feature"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new EndCommand(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (EmptyNameException | InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (ExtraParametersException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Field error.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeStartContinued() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String data \u003d \"Yes\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.setIn(new ByteArrayInputStream(data.getBytes()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String parameters \u003d \"Activity1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new StartCommand(parameters, scanner);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(Parser.tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(Parser.activityName, \"Activity1\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNotNull(Parser.startTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (InvalidTimeFrameException | EmptyNameException | ExtraParametersException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (NameTooLongException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Log.makeInfoLog(\"Activity name longer than 25 characters\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Ui.printDivider(\"Error: activity name is longer than 25 characters.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeStartNotContinued() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String data \u003d \"No\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.setIn(new ByteArrayInputStream(data.getBytes()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String parameters \u003d \"Activity1\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new StartCommand(parameters, scanner);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNull(Parser.startTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNull(Parser.activityName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (InvalidTimeFrameException | EmptyNameException | ExtraParametersException"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "                | NameTooLongException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "        resetFields();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 114,
      "rdimaio": 10,
      "siuhian": 4
    }
  },
  {
    "path": "src/test/java/jikan/parser/ExceptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.AbortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.EndCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "class ExceptionTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "    Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void testEmptyNameException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Assertions.assertThrows(EmptyNameException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.tokenizedInputs \u003d new String[]{\"start\", \"\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.parseStart(activityList, scanner);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void testNoSuchActivityException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Assertions.assertThrows(NoSuchActivityException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.startTime \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command endCommand \u003d new EndCommand(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            endCommand.executeCommand(activityList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command abortCommand \u003d new AbortCommand(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            abortCommand.executeCommand(activityList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 16,
      "nigellenl": 28
    }
  },
  {
    "path": "src/test/java/jikan/storage/StorageHandlerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageHandlerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void removeLine() throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with tests in StorageTest"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line1 \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line2 \u003d \"b\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line3 \u003d \"c\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String writtenString \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        StorageHandler storageHandler \u003d new StorageHandler(storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storageHandler.removeLine(1, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            writtenString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(line1, writtenString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(line3, writtenString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void test_replaceLine() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(\"1. a\", \"2. b\", \"10. c\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String replace \u003d \"This string has been replaced.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with tests in StorageTest)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            storage.writeToFile(list.get(i));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "        //StorageHandler.replaceLine(2, replace, storage.dataFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String replacedString \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            replacedString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Check second line"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (j \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(replace, replacedString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 78,
      "btricec": 4
    }
  },
  {
    "path": "src/test/java/jikan/storage/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void loadFile_fileDoesNotExist() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // First time calling loadFile, so file does not exist yet"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertFalse(storage.loadFile());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void loadFile_fileExists() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // First time calling loadFile, so file does not exist yet"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // loadFile was called once already, so now file exists"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertTrue(storage.loadFile());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testCreateDataFile() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertTrue(storage.dataFile.exists());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testCreateDataFile_IoException() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"//\\\\-@#4/\\\\/**3\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        IOException thrown \u003d assertThrows("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                IOException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                storage::loadFile,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                \"IOException during file creation\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testWriteToFile() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with other tests)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String originalString \u003d \"This is a test string.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String writtenString \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(originalString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            writtenString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertEquals(originalString, writtenString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 74
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 1 /t tag"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 2 /t tag"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 3 /t tag1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "continue activity 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "end"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "yes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "graph"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "abort"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "hi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "delete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "edit activity 2 /en activity 5"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "delete activity 5"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "btricec": 17,
      "rdimaio": 2,
      "nigellenl": 2
    }
  }
]
