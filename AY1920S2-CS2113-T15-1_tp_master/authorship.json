[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "group \u0027jikan\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    mainClassName \u003d \"jikan.Jikan\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    archiveBaseName \u003d \"jikan\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.0.1\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 3,
      "siuhian": 1,
      "-": 37
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ng Siu Hian | [Github](https://github.com/siuhian) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ananda Lye | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Beatrice Chan | [Github](https://github.com/btricec) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Nigelle Leo | [Github](https://github.com/nigellenl) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Riccardo Di Maio | [Github](https://github.com/rdimaio) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 2,
      "rdimaio": 1,
      "siuhian": 1,
      "nigellenl": 1,
      "-": 4,
      "ananda-lye": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## 1. Setting Up"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "   * Prerequisites"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * JDK 11 or above"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "   * Setting up the project in your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Open IntelliJ (if you are not in the welcome screen, click File \u003e Close Project to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click Configure \u003e Project Defaults \u003e Project Structure"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click New…​ and find the directory of the JDK"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click Import Project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Locate the build.gradle file and select it. Click OK"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click Open as Project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Click OK to accept the default settings."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "   * Verifying the setup"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Run the jikan.jikan and try a few commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Run the tests and ensure they all pass."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## 2. Design"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "![image_info](./pictures/ClassDiagram.png)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "_Fig 2.1. Class diagram of the Jikan program_"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## 3. Implementation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.1 Automated Storage Cleanup feature"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.1.1 Current Implementation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "The storage cleanup mechanism is stored internally as a StorageCleaner java class. The StorageCleaner class has an association with the Storage class and thus it is able to access and edit the datafile which contains the list of activities. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Additionally, when the StorageCleaner class is first initialised, it will create two files namely a status file and a data file in the “recycled” folder under the “data” folder. The status file keeps track of the activation status of the storage cleaner while the data file serves as a recycle bin for deleted data. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Moreover, the class also implements the following operations:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`StorageCleaner#initialiseCleaner - Loads up the status file to decide whether to activate/deactivate the automated cleaner.`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`StorageCleaner#setStatus - Gives the user the freedom to activate/de-activate the cleaner using commands during application runtime.`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`StorageCleaner#autoClean - This operation is called whenever the application is executed. Storage cleaning will only be done if the cleaner is activated.`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Given below is the example scenario of how the operations work."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "##### initialiseCleaner"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Step 1. Loads up the status file for reading. If the status file is not found, create a new status file and write the character ‘0’ to the first line of the status file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Step 2. Read the first line of the status file, if a character ‘0’ is found, deactivate the automated cleanup. Else if a character ‘1’ is found, activate the automated cleanup."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![image_info](./pictures/FlowchartinitCleaner.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "##### setStatus"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Step 1. Read the boolean parameter ‘status’."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Step 2a. If ‘status’ is equal to true, activate the automated cleanup and write the character ‘1’ to the first line of the status file. (overwrite any existing value at the first line)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Step 2b. If ‘status’ is equal to false, deactivate the automated cleanup and write the character ‘0’ to the first line of the status file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![image_info](./pictures/FlowchartsetStatus.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "##### autoClean"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Step 1. Check activation status of StorageCleaner through the class level attribute boolean toClean."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Step 2a. If the attribute toClean is equal to false, return the operation and give control back to the caller."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "Step 2b. If the attribute toClean is equal to true, access the storage data file and remove some of the activities starting from the oldest. Put these deleted activities into the data file under the ‘recycled’ folder."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "![image_info](./pictures/SDautoClean.png)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "#### 3.1.2 Additional Implementation (proposed)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`StorageCleaner#setDeleteQuota - Allows the user to manipulate how much activity is deleted when auto cleanup is activated. Currently only delete the oldest 3 activities.`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`StorageCleaner#setTimeFrame - Set a particular time frame for auto cleanup to activate. (i.e auto cleanup after every 2 weeks etc).`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "`StorageCleaner#initialiseLogCleaner - Gives the storage cleaner an added functionality of being able to clear log files too.`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.2 Storage feature"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "The Storage class represents the back-end of Jikan, handling the creation, saving and loading of data. "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Jikan uses a `.csv` file to store its data, formatted in the following way:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "`entry-name, start-time, end-time, duration, tags`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "All tags are saved in the same cell, separated by a white space; this design decision was taken to make sure that each entry occupies the same number of cells regardless of each entry’s number of tags. The tags are then separately parsed when the data is loaded."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Each Storage objects contains the path to the data file (`Storage.dataFilePath`), the File object representing the data file (`Storage.dataFile`), and an activityList populated with the data from the data file (`Storage.activityList`). Storage optionally supports multiple data files at the same time, allowing implementation of features like multiple sessions and multiple user profiles. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Storage provides the following functions:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Constructing a Storage object via `Storage(String dataFilePath)`, which takes in the path to the desired data file (or the path where the user wants to create the data file) as a String object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Creating a data file via `createDataFile`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Writing to a data file via `writeToFile`. This function takes a single string as parameter and writes it to the data file. It is recommended to only pass single-line strings to keep the file nicely formatted. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "Loading a pre-existing data file via `loadFile`. If a data file already exists for the provided data file path, the function will return `true`; if the specified data file did not previously exist, this function will call the `createDataFile` method and returns `false`. The return value is useful so that the application knows whether or not this is the first session with a specific data file or if data already exists."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Creating an ActivityList via `createActivityList`. This function calls `loadFile()` to check whether the file already existed or not; if the data file previously existed, it will construct an ActivityList object by passing the data from the data file to it, and return this populated ActivityList object; if the data file did not previously exist, it will return an empty activityList object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "### 3.3 Storage handler"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "The StorageHandler class functions as a support to the main Storage class, allowing the Jikan application to manipulate the stored data file. Its main provided functions are:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Removing an entry from the data file via `removeLine`. This function takes in the number of the line to remove."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "- Replacing an entry in the data file via `replaceLine`. This function takes in the number of the line to replace, along with the String object that needs to be written to the data file in place of the replaced line."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### 3.4 Edit feature"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The edit feature allows the user to make changes to activities that have been saved in the activity list. This is to allow the user to rectify any mistakes that may have been made during the initial recording of the activity. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.4.1 Current Implementation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The following sequence diagram shows how the edit feature works."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "![image_info](./pictures/EditSequenceDiagram.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The current implementation of the edit feature allows the user to edit only the name parameter of the activity. When the user wants to edit an activity using the edit command, the Parser creates a new EditCommand object. The executeCommand() method of the EditCommand object is called and the specified parameters are updated accordingly."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The order of method calls to edit the activity details is as follows if the specified activity exists (meaning index !\u003d -1) else an exception is thrown:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "1. The updateName() method of the ActivityList class is called, with the user-specified parameters of the activity index and new activity name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "2. The get() method is self-invoked by the ActivityList class to obtain the activity at the given index "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "3. The setName() method of the Activity class is called to edit the activity name to the user-specified name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "4. The activity with the updated name is returned to the activityList  "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.4.2 Additional Implementations"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "The current implementation of the edit feature only allows the user to edit the activity name. Hence, additional implementations of the edit feature should allow the user to edit other parameters of the activity such as the tags and the start and end dates. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "This will require the implementation of more update methods in the ActivityList class to allow for the changes to be updated in the activityList after it has been edited. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.4.3 Design Considerations"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "By letting the user edit the name and tags of the activity, it will allow them to correct any mistakes made during the data entry. This ensures that there is an accurate record of activities such as in cases where the user may be trying to record the same activity but has misspelled it, resulting in the program regarding it as a different activity where there would be multiple unnecessary new entries in the activity list, making the analysis of the time spent more tedious and inaccurate."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "However, by allowing the user to edit the start date and time, there may be potential inaccuracies in the actual activity recording. This is due to the fact that the time recorded in the program is based on the LocalDateTime. By introducing user input, the dates and time may be recorded incorrectly, defeating the purpose of the time tracking program. "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### 3.5 Continue Feature"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "The continue feature allows the user to continue a previously ended activity."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.5.1 Current Implementation"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btricec"
        },
        "content": "![Continue command sequence diagram](./pictures/continueActivity.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Continuing an activity:**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": "When the user enters the command to continue an activity, a *ContinueCommand* object is created in *Parser*. The method *executeCommand()* of the *ContinueCommand* object is then called and does the following:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": " 1. Checks if the given activity name exists in the activityList by calling *findActivity()* (if it doesn’t an exception is thrown, omitted in the sequence diagram above)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": " 2. Gets the *name* and *tags* of the activity to be continued and saves it to a public static variable of *Parser* object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btricec"
        },
        "content": " 3. Gets the current time and saves it to a public static variable of *Parser* object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btricec"
        },
        "content": " "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": " ![End command sequence diagram](./pictures/endActivity.PNG)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btricec"
        },
        "content": " **Ending a continued activity:**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": " "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "When the user wants to end the continued activity, an *EndCommand* object is created in *Parser.* The method *executeCommand()* of the *ContinueCommand* object is then called and it in turn executes the *saveActivity()* method of the *ActivityList* class. The continued activity is then saved by executing the following:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": " 1. Gets the current time and saves it to a public static variable of *Parser* object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": "2.  Calculates the elapsed time using *between()* method of *Duration* class"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btricec"
        },
        "content": "3.  Adds the elapsed time with the previous duration of the activity to get the *newDuration* using *plus()* method of Duration class"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btricec"
        },
        "content": "4.  Calls the *updateDuration()* method, which updates the *duration* attribute of the continued activity in the *activityList* as well as the data.csv file"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.5.2 Design Considerations"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btricec"
        },
        "content": "**Execution:**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btricec"
        },
        "content": " - Continue by activity name (current implementation)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btricec"
        },
        "content": " **Cons:** Activity names have to be unique."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "btricec"
        },
        "content": " **Pros:** More versatile, resistant to changes in the activity list"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btricec"
        },
        "content": " - Continue by activity index"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "btricec"
        },
        "content": " **Cons:** need to add an additional index field to the Activity class, "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "btricec"
        },
        "content": " index is not fixed, changes when an activity is deleted"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "btricec"
        },
        "content": " **Pros:** Can reuse activity names."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "btricec"
        },
        "content": " "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btricec"
        },
        "content": "Although the current implementation of the continue feature disallows users to have multiple activities with the same name, we felt that the versatility of this choice outweighed the cons. Firstly because if the activityList got too big, it would be hard for the user to get the index of the task he/she wanted to continue. Also, the index would constantly be changing when changes are made to the list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### 3.5.3 Additional Features"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "btricec"
        },
        "content": "As users can only have activities with unique names, when a user wants to start an activity which already exists in the activityList, he/she will be given the option to continue the stated activity."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btricec"
        },
        "content": "![decision flowchart](./pictures/continue_flowchart.PNG)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### 3.6 Find Feature"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This command accepts a keyword and searches the activity list for activities with names that contain the keyword."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.6.1 Current Implementation"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* This feature is called by the user when the “find” command is entered into the command line. The string following the command is the keyword to match activity names to."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The Parser will create a FindCommand object."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The FindCommand will invoke its own executeCommand() method."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * The Parser\u0027s lastShownList will be cleared."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Then it will loop through activityList to find activities with names that contain the keyword."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * If one is found, it will be added to lastShownList."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * printResults() of the Ui will be called:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * If lastShownList is not empty, it will print the matching activities."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * Else, it will respond to the user that there are no tasks which match the given keyword."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![find seq diagram](https://imgur.com/Icg5rdB.png)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### 3.7 Filter Feature"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This feature accepts multiple space-separated keywords to search for activities with tags matching each keyword."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "#### 3.7.1 Current Implementation"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* This feature is called by the user when the “filter” command is entered into the command line. The space separated strings following the command are the keywords to match activity tags with."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The Parser will create a FilterCommand object."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The FindCommand will invoke its own executeCommand() method."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* The Parser\u0027s lastShownList will be cleared."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* For each keyword:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * Then it will loop through activityList to find activities with tags that contain the keyword."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * If one is found, it will be added to lastShownList."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    * printResults() method of the Ui will be called"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * If lastShownList is not empty, it will print the matching activities."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        * Else, it will respond to the user that there are no tasks which match the given keyword."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![filter seq diagram](https://imgur.com/hybT3R9.png)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "## 4. Appendix"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Product Scope"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### Target user profile"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Students with time management issues/poor time management skills."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "* Users who are reasonably comfortable using CLI apps."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "#### Value proposition"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "Allow users to record their daily activities and track their time usage in a user-friendly manner. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v1.0|user|start a new activity|track the time spent on the activity|"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v1.0|user|end an activity|track the total time i spent on the activity|"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v1.0|user|abort an activity|record a different activity|"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v1.0|user|store the completed activities in a list|analyse how I spent my time|"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|delete an activity|remove activities that I do not want to track|"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|search by activity name|view similar activities|"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|filter activities by tags|view activities of the same category|"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|view the activities by date|see how much time I have spent on different activities|"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|continue my activities at another time|do other things between activities|"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|edit past activities|keep a more accurate record of activities|"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "|v2.0|user|automate the deletion of old activities|keep a more concise log of activities|"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "### Instructions for Manual Testing  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "btricec"
        },
        "content": "  #### Launch and Shutdown"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "btricec"
        },
        "content": "  1. Download the jar file and docs folder"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "btricec"
        },
        "content": "  2. Copy both into an empty folder"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "btricec"
        },
        "content": "  3. Run the jar file in your terminal using the command `java -jar jikan.jar`"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 21,
      "btricec": 42,
      "siuhian": 55,
      "nigellenl": 72,
      "-": 24,
      "ananda-lye": 33
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{Give product intro here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "btricec": 1,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a product intro}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{Give steps to get started quickly}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Down the latest version of `Duke` from [here](http://link.to/duke)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Jikan lets you record how much time you spend on various activities so that you can easily see what took up the most time today / this week / this month."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "To start, record your first activity using the `start ACTIVITY_NAME` command. Add some tags to your activities to group similar activities together. When you are done with the activity, or want to move onto something else, tell Jikan to `end` and the Activity time will be recorded and saved to your list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "You can view all your activities using the `list` command. Activities will be shown in this format:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![Continue command sequence diagram](./pictures/list.PNG)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "You can also view all your activities over a period of time by using `list` with extra parameters. For example `list week` will return a list of all activities this current week, as shown below."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![Continue command sequence diagram](./pictures/list_week.PNG)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Filter out the activities you want to see using the `find` or `filter` command. This is our list after filtering out all our activities tagged as `core`. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![Continue command sequence diagram](./pictures/list_core.PNG)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "To easily see what took up the most of your time, use the `graph` command to view a chart of your activities. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "![Continue command sequence diagram](./pictures/graph_core.PNG)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Now it\u0027s clear that lab 3 ex3 took up the most of your time. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Not done with an activity and want to continue it? Use the `continue` command to continue recording time for a previously started activity."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Finally, when you\u0027re done and want to close the app, simply say `bye` and Jikan will exit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This is just a quick overview of what Jikan can do for you. For more details on each individual command, read the command guide below."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "## Finding and Filtering Activities"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Finding Activities by Name: `find`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Users can request for a sub-list of activities that has names containing a given keyword to be printed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Filtering Activities by Tags: `filter`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Users can request for a sub-list of activities that has specific tags."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Format: `filter TAGNAME1 TAGNAME2`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "### Further Finding/Filtering: `-s`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Users can chain `find` and `filter` commands to generate an even smaller sub-list of activities based on his/her needs. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This is can be particularly useful when the user wants to generate a `graph`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "This flag applies to `find` and `filter` commands only. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `filter -s TAGNAME1 TAGNAME2`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "* `find -s keyword`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "### Adding a to-do: `todo`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a to-do item to the list of to-dos."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `todo n/TODO_NAME d/DEADLINE`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* The `DEADLINE` can be in a natural language format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* The `TODO_NAME` cannot contain punctuation.  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "`todo n/Write the rest of the User Guide d/next week`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "`todo n/Refactor the User Guide to remove passive voice d/13/04/2020`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Well, write the User Guide in active voice anyway."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Add to-do `todo n/TODO_NAME d/DEADLINE`"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ananda-lye": 44
    }
  },
  {
    "path": "src/main/java/jikan/Jikan.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.GoalCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyQueryException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.LogCleaner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.storage.StorageCleaner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * Represents the Jikan time tracker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Jikan {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Constant file path of data file. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static final String DATA_FILE_PATH \u003d \"data/data.csv\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static final String TAG_FILE_PATH \u003d \"data/tag/tag.csv\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Storage object for data file. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Activity list to store current tasks in. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static ActivityList activityList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static ActivityList lastShownList \u003d new ActivityList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Ui to handle printing. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Parser to parse commands. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** CLeaner to delete entries in data.csv when it gets too long */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static StorageCleaner cleaner;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static LogCleaner logCleaner \u003d new LogCleaner();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static final Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static File tagFile;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Main entry-point for the Jikan application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void main(String[] args) throws InvalidTimeFrameException, IOException, EmptyNameException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage \u003d new Storage(DATA_FILE_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleaner \u003d new StorageCleaner(storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        cleaner.autoClean();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        logCleaner.autoClean();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        activityList \u003d storage.createActivityList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        activityList.storage \u003d storage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        GoalCommand.createFile(TAG_FILE_PATH, tagFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "        lastShownList.activities.addAll(activityList.activities);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        parser.cleaner \u003d cleaner;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        parser.logcleaner \u003d logCleaner;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Command command \u003d parser.parseUserCommands(in,activityList,cleaner,tagFile);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (ByeCommand.isExit(command)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                command.executeCommand(activityList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            command.executeCommand(activityList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 15,
      "btricec": 5,
      "siuhian": 25,
      "nigellenl": 27,
      "ananda-lye": 9
    }
  },
  {
    "path": "src/main/java/jikan/activity/Activity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Represents an activity entry with a name and total time spent."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Activity {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private Set\u003cString\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private Duration allocatedTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new activity entry."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param name represents the name of the activity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param startTime the time that the activity first started"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param tags activity tags"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param endTime the time that the activity ended"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Activity(String name, LocalDateTime startTime, LocalDateTime endTime, Duration duration,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    Set\u003cString\u003e tags, Duration allocatedTime) throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (endTime.isBefore(startTime)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.name \u003d name.strip();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.date \u003d endTime.toLocalDate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.allocatedTime \u003d allocatedTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.name \u003d name.strip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public Set\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void setTags(Set\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void setEndTime(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public Duration getAllocatedTime() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return this.allocatedTime;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Gets the percentage completed of the allocated time."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @return percent completed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public double getProgressPercent() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        double percent \u003d ((double)this.duration.toMillis() / this.allocatedTime.toMillis()) * 100;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        return percent;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Returns true if the Activity\u0027s date is within the date range specified (inclusive)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param startDate Start date of range"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param endDate End date of range"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return True if Activity is within date range; false otherwise"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public boolean isWithinDateFrame(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!this.date.isBefore(startDate) \u0026\u0026 !this.date.isAfter(endDate)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Converts the jikan.activity.Activity object to data representation to be stored in a data file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * File format:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * name, startTime, endTime"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return String representing the Task object in comma-separated data format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Convert tags to a single space-separated"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String tagString \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tagString \u003d tagsToString(tagString);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String dataLine \u003d (this.name + \",\" + this.startTime + \",\" + this.endTime + \",\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                + this.duration.toString() + \",\" + this.allocatedTime + \",\" + tagString);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return dataLine;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private String tagsToString(String tagString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        Iterator i \u003d this.tags.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        while (i.hasNext()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            tagString +\u003d i.next() + \" \";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        return tagString;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 46,
      "btricec": 49,
      "siuhian": 8,
      "nigellenl": 8,
      "ananda-lye": 30
    }
  },
  {
    "path": "src/main/java/jikan/activity/ActivityList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.StorageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Represents the list of activities."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class ActivityList {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public ArrayList\u003cActivity\u003e activities;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Storage storage; // Storage the list was loaded from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new activity list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public ActivityList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        this.activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Loads activityList from data file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param dataFile the datafile to be read from."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public ActivityList(File dataFile) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        populateTaskList(dataFile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Activity get(int i) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return activities.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Adds activity to activity list and stores it in the data file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param activity Activity to add."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void add(Activity activity) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String dataLine \u003d activity.toData();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        updateFile(dataLine);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Updates the duration of an activity."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param duration The new duration."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param endTime Thew new end time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param index Index of the activity to be updated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void updateDuration(Duration duration, LocalDateTime endTime, int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.get(index).setDuration(duration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.get(index).setEndTime(endTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fieldChangeUpdateFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Searches for an activity in activityList by name."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param name Name of the activity to search for."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @return Index of activity with that name."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public int findActivity(String name) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (activities.get(i).getName().equals(name)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Updates data file with new task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataLine Line to write to file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void updateFile(String dataLine) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            storage.writeToFile(dataLine);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            System.out.println(\"Error saving task to data file.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void updateName(int index, String newName) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.get(index).setName(newName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fieldChangeUpdateFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void updateTags(int index, Set\u003cString\u003e newTags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        activities.get(index).setTags(newTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fieldChangeUpdateFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.remove(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": "        deleteUpdateFile(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Deletes the line in the file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param index the index of the line in the file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void deleteUpdateFile(int index) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": "            StorageHandler.removeLine(index, storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Error while deleting activity from data file.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void fieldChangeUpdateFile() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "            StorageHandler.updateField(activities, storage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Error while updating activity from data file.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return activities.size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Saves a new activity to the list of activities."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList list to save to"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws InvalidTimeFrameException if start time is before end time"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void saveActivity(ActivityList activityList) throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (Parser.continuedIndex !\u003d -1) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Ended: \" + Parser.activityName);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.endTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d Duration.between(Parser.startTime, Parser.endTime);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration oldDuration \u003d activityList.get(Parser.continuedIndex).getDuration();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration newDuration \u003d duration.plus(oldDuration);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Duration allocatedTime \u003d activityList.get(Parser.continuedIndex).getAllocatedTime();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activityList.updateDuration(newDuration, Parser.endTime, Parser.continuedIndex);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (allocatedTime !\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printProgressMessage(activityList.get(Parser.continuedIndex).getProgressPercent());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.continuedIndex \u003d -1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.resetInfo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Ended: \" + Parser.activityName);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.endTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d Duration.between(Parser.startTime, Parser.endTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Activity newActivity \u003d new Activity(Parser.activityName, Parser.startTime,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    Parser.endTime, duration, Parser.tags, Parser.allocatedTime);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activityList.add(newActivity);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (newActivity.getAllocatedTime() !\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printProgressMessage(newActivity.getProgressPercent());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // reset activity info"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.resetInfo();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Populates task list from file."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFile Data file to populate from."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void populateTaskList(File dataFile) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            Scanner dataScanner \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                parseDataLine(dataScanner.nextLine());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            System.out.println(\"Error: data file not found. Could not load into the current session\u0027s task list.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Error: Invalid time frame.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Parses the current line in the data file to an jikan.activity.Activity object."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param s String to parse."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void parseDataLine(String s) throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (!s.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            List\u003cString\u003e strings \u003d Arrays.asList(s.split(\",\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String[] tagStrings;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Set\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // if there are tags"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (strings.size() \u003e 5) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // remove square brackets surrounding tags"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                tagStrings \u003d strings.get(5).split(\" \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String i : tagStrings) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    tags.add(i);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Activity e;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime startTime \u003d LocalDateTime.parse(strings.get(1));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime endTime \u003d LocalDateTime.parse(strings.get(2));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d Duration.parse(strings.get(3));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Duration allocatedTime \u003d Duration.parse(strings.get(4));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            e \u003d new Activity(strings.get(0), startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            activities.add(e);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 63,
      "btricec": 107,
      "siuhian": 15,
      "nigellenl": 15,
      "ananda-lye": 21
    }
  },
  {
    "path": "src/main/java/jikan/command/AbortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to abort a currently running activity."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class AbortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new abort command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public AbortCommand(String parameters) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Parser.parseAbort();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.resetInfo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String line \u003d \"You have aborted the current activity!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"You have not started any activity!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Abort command failed as no activity was ongoing\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 10,
      "siuhian": 1,
      "nigellenl": 26
    }
  },
  {
    "path": "src/main/java/jikan/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    //private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new exit command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public ByeCommand(String parameters) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Checks for ongoing activities and ask if user wants to save them"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * before exiting the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "            //Parser.parseBye(activityList, Jikan.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String line \u003d Parser.activityName + \" is still running! If you exit now it will be aborted.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "                        + \"Would you like to end this activity to save it?\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "                if (userInput.equalsIgnoreCase(\"yes\") || userInput.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    activityList.saveActivity(activityList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.exitFromApp();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"End date must be before start date\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"End date must be before start date.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return command instanceof ByeCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 18,
      "siuhian": 1,
      "nigellenl": 38
    }
  },
  {
    "path": "src/main/java/jikan/command/CleanCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidCleanCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.LogCleaner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.StorageCleaner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to clear previously saved log files."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class CleanCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    StorageCleaner cleaner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    LogCleaner logCleaner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new clean command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public CleanCommand(String parameters, StorageCleaner cleaner, LogCleaner logCleaner) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.cleaner \u003d cleaner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.logCleaner \u003d logCleaner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Method to enable or disable cleaning of log files."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String function \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            function \u003d getFunctionFromCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (InvalidCleanCommandException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(\"Invalid clean command!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        switch (function) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"on\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                handleOnFunction();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d \"There is a problem with accessing the cleaning file\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"off\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                handleOffFunction();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d \"There is a problem with accessing the cleaning file\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"/n\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                handleSetFunction();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printDivider(\"please provide a number\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d \"There is a problem with accessing the cleaning file\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void handleOnFunction() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String line \u003d this.parameters;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (line.contains(\"log\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logCleaner.setStatus(true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assert logCleaner.toClean;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            line \u003d \"Auto cleaning enabled for logs\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(line);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"User has turned on automated cleaning for logs\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "            cleaner.setStatus(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert cleaner.toClean;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "            line \u003d \"Auto cleaning enabled\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(line);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Log.makeInfoLog(\"User has turned on automated cleaning\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void handleOffFunction() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String line \u003d this.parameters;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (line.contains(\"log\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            logCleaner.setStatus(false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            assert !logCleaner.toClean;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            line \u003d \"Auto cleaning disabled for logs\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(line);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Log.makeInfoLog(\"User has turned off automated cleaning for logs\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "            cleaner.setStatus(false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert !cleaner.toClean;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "            line \u003d \"Auto cleaning disabled\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Ui.printDivider(line);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Log.makeInfoLog(\"User has turned off automated cleaning\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void handleSetFunction() throws IOException, NumberFormatException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String line \u003d this.parameters;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (line.contains(\"log\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                int value \u003d getNumberFromCommand(line);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                logCleaner.setNumberOfLogsToClean(value);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                line \u003d \"Number of activities to clean is set to \" + value;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                int value \u003d getNumberFromCommand(line);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                cleaner.setNumberOfActivitiesToClean(value);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                line \u003d \"Number of activities to clean is set to \" + value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to check the required function from user command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return the appropriate function (\"on\",\"off\",\"/n\")."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws InvalidCleanCommandException when the function is not recognised."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private String getFunctionFromCommand() throws InvalidCleanCommandException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String line \u003d this.parameters;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (line.contains(\"on\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (!line.contains(\"off\") \u0026\u0026 !line.contains(\"/n\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                return \"on\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (line.contains(\"off\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (!line.contains(\"on\") \u0026\u0026 !line.contains(\"/n\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                return \"off\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (line.contains(\"/n\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (!line.contains(\"on\") \u0026\u0026 !line.contains(\"off\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                return \"/n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            throw new InvalidCleanCommandException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to extract the number of activities to clean from user input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param line full user input with command header extracted out."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return the number of activities to clean."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private int getNumberFromCommand(String line) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int index \u003d line.indexOf(\"/n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String numberString \u003d line.substring(index + 3);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                return Integer.parseInt(numberString);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 18,
      "siuhian": 134,
      "nigellenl": 29
    }
  },
  {
    "path": "src/main/java/jikan/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "    protected String parameters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public Command(String parameters) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.parameters \u003d parameters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) throws EmptyNameException, InvalidTimeFrameException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 3,
      "nigellenl": 26
    }
  },
  {
    "path": "src/main/java/jikan/command/ContinueCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to continue recording an existing activity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ContinueCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new continue command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public ContinueCommand(String parameters) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String line \u003d Parser.activityName + \" is ongoing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"Could not continue activity due to already ongoing activity.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            //Parser.parseContinue(activityList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int index \u003d activityList.findActivity(parameters);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // activity is found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.activityName \u003d activityList.get(index).getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.tags \u003d activityList.get(index).getTags();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Parser.continuedIndex \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String line \u003d Parser.activityName + \" was continued\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(line);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyNameException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"No activity with this name exists!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Continue command failed as there was no such activity saved.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Continue command failed as there was no activity name provided.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 22,
      "siuhian": 1,
      "nigellenl": 35
    }
  },
  {
    "path": "src/main/java/jikan/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to delete an activity from the activity list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new delete command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public DeleteCommand(String parameters) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int index \u003d activityList.findActivity(parameters);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // activity was found"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"You have deleted \" + parameters);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "                activityList.delete(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new EmptyNameException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"No activity with this name exists!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 10,
      "nigellenl": 32
    }
  },
  {
    "path": "src/main/java/jikan/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidEditFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to edit an activity in the activity list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new edit command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public EditCommand(String parameters) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Parser.parseEdit(activityList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int delimiter \u003d parameters.indexOf(\"/e\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            int tagDelim \u003d parameters.indexOf(\"/et\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.activityName \u003d parameters.substring(0, delimiter).strip();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.activityName.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new EmptyNameException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int index \u003d activityList.findActivity(Parser.activityName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String newName \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String[] tmpTags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Set\u003cString\u003e newTags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (tagDelim !\u003d -1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                newName \u003d parameters.substring(delimiter + 3, tagDelim - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                tmpTags \u003d (parameters.substring(tagDelim + 4).split(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                for (String t : tmpTags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    newTags.add(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                newName \u003d parameters.substring(delimiter + 3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (newName.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    // no new name is provided"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new InvalidEditFormatException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    activityList.updateName(index, newName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    if (!newTags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        activityList.updateTags(index,newTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    Ui.printDivider(\"Activity named \" + Parser.activityName + \" has been updated!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "                // activity is not found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"No activity with this name exists!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as there was no such activity saved.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyNameException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as there was no activity name provided.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | InvalidEditFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"New details not provided!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"Edit command failed as there was no updated activity detail provided.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 15,
      "siuhian": 1,
      "nigellenl": 62
    }
  },
  {
    "path": "src/main/java/jikan/command/EndCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to end an activity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EndCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new end command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public EndCommand(String parameters) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /** Method to parse the end activity command. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (Parser.startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new NoSuchActivityException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "                activityList.saveActivity(activityList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchActivityException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"End command failed as no activity was ongoing\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"You have not started any activity!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Log.makeInfoLog(\"End date must be before start date\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"End date must be before start date.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 8,
      "siuhian": 1,
      "nigellenl": 35
    }
  },
  {
    "path": "src/main/java/jikan/command/FilterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyQueryException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents a command to filter activities by specified tags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new filter command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public FilterCommand(String parameters) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Shows the user all past activities that has tags which match the one or more keywords queried by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList the activity list to search for matching activities"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\"-s\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            filterSubList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            filterFullList(activityList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Filters activities by tags from the entire list of activities."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList the full list of activities"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void filterFullList(ActivityList activityList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String query \u003d parameters;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (query.length() \u003c 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new EmptyQueryException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "                String[] keywords \u003d query.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    populateLastShownList(activityList, lastShownList, keyword);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printResults(lastShownList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyQueryException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Filter activities by tags based on the last shown list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void filterSubList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String query \u003d parameters.replace(\"-s \", \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            ActivityList prevList \u003d new ActivityList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            prevList.activities.addAll(lastShownList.activities);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (query.length() \u003c 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                throw new EmptyQueryException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                String[] keywords \u003d query.split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    populateLastShownList(prevList, lastShownList, keyword);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                Ui.printResults(lastShownList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | EmptyQueryException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void populateLastShownList(ActivityList targetList, ActivityList lastShownList, String keyword) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        for (Activity i : targetList.activities) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (!lastShownList.activities.contains(i) \u0026\u0026 i.getTags().contains(keyword)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "                lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 25,
      "nigellenl": 25,
      "ananda-lye": 40
    }
  },
  {
    "path": "src/main/java/jikan/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyQueryException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents a command to find activities by name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new find command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public FindCommand(String parameters) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Shows the user all past activities that has names which match the keyword queried by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList the activity list to search for matching activities"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (parameters.contains(\"-s\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            findSubList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            findFullList(activityList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Find activities which has names containing the keywords from the entire list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList full like of activities"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void findFullList(ActivityList activityList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (parameters.length() \u003c 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new EmptyQueryException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                String[] keywords \u003d parameters.split(\" / \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    populateLastShownList(keyword, activityList.activities);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printResults(lastShownList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyQueryException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Find activities which has names containing the keywords from the last shown list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void findSubList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            String query \u003d parameters.replace(\"-s \", \"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            ArrayList\u003cActivity\u003e prevList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            prevList.addAll(lastShownList.activities);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (query.length() \u003c 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                throw new EmptyQueryException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                String[] keywords \u003d query.split(\" / \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                lastShownList.activities.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                for (String keyword : keywords) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    populateLastShownList(keyword, prevList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printResults(lastShownList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | EmptyQueryException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Fills the last shown list with the results from matching names of activities to a keyword."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param keyword the keyword to match against"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activities the list of activities to search"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private void populateLastShownList(String keyword, ArrayList\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        for (Activity i : activities) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (i.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 14,
      "nigellenl": 22,
      "ananda-lye": 56
    }
  },
  {
    "path": "src/main/java/jikan/command/GoalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyTagException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchTagException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import static java.lang.Integer.valueOf;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to set a goal for activities with a specific tag in the activity list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static Scanner scanner;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static final String TAG_FILE_PATH \u003d \"data/tag/tag.csv\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new goal command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param parameters the parameters of the goal command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param scanner to read the user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public GoalCommand(String parameters, Scanner scanner) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.scanner \u003d scanner;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            int delimiter \u003d parameters.indexOf(\"/g\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String tagName \u003d parameters.substring(0, delimiter - 1).strip();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (tagName.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                throw new EmptyTagException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (delimiter !\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                int index \u003d checkIfExists(tagName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                String tmpTime \u003d parameters.substring(delimiter + 3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Duration goalTime \u003d parseDuration(tmpTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (index !\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    Ui.printDivider(\"The goal for this tag already exists, do you want to update the goal?\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    updateGoal(userInput, tagName, goalTime, index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    // tag does not exist in the activity list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    if (!existInActivity(activityList, tagName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        throw new NoSuchTagException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        addTagLine(tagName + \",\" + goalTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        Ui.printDivider(\"The goal for \" + tagName + \" has been added!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (EmptyTagException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Tag name cannot be empty!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Goal cannot be empty!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Error reading the file!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NoSuchTagException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"There is no such tag!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Please enter the goal in the format HH:MM:SS\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Creates a new tag file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param filePath the filepath of the tag file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagFile the File object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @throws IOException when there is an error loading/creating the file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void createFile(String filePath, File tagFile) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tagFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (!tagFile.exists()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                tagFile.getParentFile().mkdirs(); // Create data directory (does nothing if directory already exists)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                tagFile.createNewFile();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Error loading/creating file\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Check if the tag exists in the tag list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagName the tag name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @return index the index of the tag in the tag list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @throws IOException when there is an error loading/creating the file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private int checkIfExists(String tagName) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(TAG_FILE_PATH));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        int status \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String line \u003d br.readLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String[] name;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                name \u003d line.split(\",\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (name[0].equals(tagName)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    status \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                sb.append(line);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        if (status \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            index \u003d -1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Update the goal for the existing specified tag."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param userInput the user response."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagName the tag name."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param goalTime the amount of time the user wants to assign to the tag."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param index the index of the tag in the tag list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static void updateGoal(String userInput, String tagName, Duration goalTime, int index) throws IOException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        if (userInput.equalsIgnoreCase(\"yes\") || userInput.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            removeLine(index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            writeToFile(tagName + \",\" + goalTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"The goal for \" + tagName + \" was updated\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Ui.printDivider(\"Okay then, what else can I do for you?\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Updates tag file with new tag."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param dataLine Line to write to file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void addTagLine(String dataLine) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            writeToFile(dataLine);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Error saving tag to tag file.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Remove the tag data at the specified index."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param index index of the tag to remove."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void removeTagLine(int index) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            removeLine(index);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Error removing tag from tag file.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Removes the line whose index matches lineNumber from file."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param lineNumber Index of line to remove."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void removeLine(int lineNumber) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        // Read file into list of strings, where each string is a line in the file"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(TAG_FILE_PATH),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fileContent.remove(lineNumber);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Writes the input string to file."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param s The input string."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @throws IOException If an error occurs while writing."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void writeToFile(String s) throws IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        FileWriter fw \u003d new FileWriter(TAG_FILE_PATH, true);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fw.write(s + System.lineSeparator());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Check if the tag exists in the activity list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param targetList the activity list to check."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagName the specified tag name."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private boolean existInActivity(ActivityList targetList, String tagName) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        for (Activity i : targetList.activities) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (i.getTags().contains(tagName)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Converts the user input into a duration object."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param input the user input."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @return the duration object."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static Duration parseDuration(String input) throws InvalidTimeFrameException,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String[] fields \u003d input.split(\":\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        int colonIndex \u003d input.indexOf(\u0027:\u0027);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String hh \u003d fields[0];"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String mm \u003d fields[1];"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String ss \u003d fields[2];"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return Duration.ofHours(valueOf(hh)).plusMinutes(valueOf(mm)).plusSeconds(valueOf(ss));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 237
    }
  },
  {
    "path": "src/main/java/jikan/command/GraphCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidGraphCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class GraphCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Constructor to create a new command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param parameters Either time interval for graph or \u0027tags\u0027 flag"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *                   to graph by tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public GraphCommand(String parameters) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (parameters.equals(\"targets\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Ui.graphTargets(activityList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else if (parameters.equals(\"tags\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "                graphTags();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (parameters.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    throw new InvalidGraphCommandException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    int interval \u003d Integer.parseInt(parameters);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    Ui.printActivityGraph(interval);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NumberFormatException | InvalidGraphCommandException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Please input an integer for the time interval.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    + \"If you\u0027d like to graph by tags, enter the command \u003cgraph tags\u003e.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void graphTags() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "        HashMap\u003cString, Duration\u003e tags \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (Activity activity : lastShownList.activities) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "            extractTags(tags, activity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Ui.printTagsGraph(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Gets the tags from the activities in the list together with the associated duration."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tags the HashMap to store the tag name and duration."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param activity the activity containing the tag."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void extractTags(HashMap\u003cString, Duration\u003e tags, Activity activity) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Set\u003cString\u003e activityTags \u003d activity.getTags();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (String tag : activityTags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (tags.containsKey(tag)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Duration oldDuration \u003d tags.get(tag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Duration newDuration \u003d oldDuration.plus(activity.getDuration());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "                tags.put(tag, newDuration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "                tags.put(tag, activity.getDuration());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 55,
      "siuhian": 3,
      "nigellenl": 13
    }
  },
  {
    "path": "src/main/java/jikan/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to list all activities in the activity list to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new list command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public ListCommand(String parameters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Parse a list command. The user can specify either a single date or a specific time frame."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList The activity list to search for matching activities."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // If no time frame is specified, print the entire list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (parameters \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "            lastShownList.activities.clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printList(activityList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Can\u0027t do lastShownList \u003d activityList, otherwise we just copy"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "            lastShownList.activities.addAll(activityList.activities);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "                listInterval(activityList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "                System.out.println(\"invalid date.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void listInterval(ActivityList activityList) throws InvalidTimeFrameException, ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String[] listInputs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "        listInputs \u003d parameters.split(\" \", 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "        lastShownList.activities.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDate startDate \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDate endDate \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Parse either format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "        DateTimeFormatter parser \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][yyyy-MM-dd]\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Check if the user has given a verbal input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // (User can either say day or daily and get the same output)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "        switch (listInputs[0]) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // If user has input a specific date to obtain the week from, use that;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // (eg. the input is list week 2020-05-20)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Otherwise get current date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (listInputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "                startDate \u003d LocalDate.parse(listInputs[1], parser);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "                startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Set current Monday and Sunday as time range"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d startDate.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "            endDate \u003d startDate.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // If user has input a specific date to obtain the month from, use that;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Otherwise get current date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (listInputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Month month \u003d Month.valueOf(listInputs[1].toUpperCase());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "                YearMonth yearMonth \u003d YearMonth.of(Calendar.getInstance().get(Calendar.YEAR), month.getValue());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "                startDate \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "                startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Set first and last day of month as time range"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btricec"
        },
        "content": "            //startDate \u003d startDate.withDayOfMonth(1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "            endDate \u003d startDate.with(TemporalAdjusters.lastDayOfMonth());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "btricec"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": "            startDate \u003d LocalDate.parse(listInputs[0], parser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (listInputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": "                endDate \u003d LocalDate.parse(listInputs[1], parser);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "btricec"
        },
        "content": "        // Only one date is specified; return all entries with start date coinciding with that date"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "                if (i.getDate().equals(startDate)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printList(lastShownList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // Both start and end dates are specified"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "                throw new InvalidTimeFrameException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (Activity i : activityList.activities) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "                if (i.isWithinDateFrame(startDate, endDate)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    lastShownList.activities.add(i);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btricec"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printList(lastShownList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 113,
      "nigellenl": 22,
      "ananda-lye": 4
    }
  },
  {
    "path": "src/main/java/jikan/command/StartCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.exception.WrongDateFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to start an activity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new start command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public StartCommand(String parameters, Scanner scanner) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        this.scanner \u003d scanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (Parser.startTime !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String line \u003d Parser.activityName + \" is ongoing!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Log.makeInfoLog(\"Could not start activity due to already ongoing activity.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(line);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // tags should be reset"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assert Parser.tags.isEmpty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int tagDelimiter \u003d parameters.indexOf(\"/t\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int allocateDelimiter \u003d parameters.indexOf(\"/a\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // check if there exists an activity with this name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String activityName \u003d getActivityName(tagDelimiter,allocateDelimiter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int index \u003d activityList.findActivity(activityName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "                Ui.printDivider(\"There is already an activity with this name. Would you like to continue it?\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "                continueActivity(activityList, scanner, index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    String line \u003d parseActivity(tagDelimiter,allocateDelimiter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    Parser.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    Log.makeFineLog(\"Started: \" + Parser.activityName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    Ui.printDivider(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } catch (EmptyNameException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    Log.makeInfoLog(\"Activity started without activity name\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                } catch (WrongDateFormatException w) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    Log.makeInfoLog(\"Wrong format for allocated time.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    Ui.printDivider(\"Please input in this format HH/MM/SS\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Received user input on whether or not to continue the activity."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activityList List of activities."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param scanner Parse user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static void continueActivity(ActivityList activityList, Scanner scanner, int index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (userInput.equalsIgnoreCase(\"yes\") || userInput.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.activityName \u003d activityList.get(index).getName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.tags \u003d activityList.get(index).getTags();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.continuedIndex \u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(Parser.activityName + \" was continued\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Log.makeFineLog(Parser.activityName + \" was continued.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Ui.printDivider(\"Okay then, what else can I do for you?\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Parses the started activity for name and tags."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param tagDelimiter the index of the tag delimiter."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param allocateDelimiter the index of the allocation delimiter."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private String parseActivity(int tagDelimiter, int allocateDelimiter) throws EmptyNameException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            WrongDateFormatException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String activityName \u003d getActivityName(tagDelimiter, allocateDelimiter);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Parser.activityName \u003d activityName;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String activityInfo;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tagDelimiter !\u003d -1 || allocateDelimiter !\u003d -1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityInfo \u003d this.parameters.substring(activityName.length() + 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return \"Started: \" + Parser.activityName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (Parser.activityName.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "            throw new EmptyNameException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (allocateDelimiter !\u003d -1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String allocatedTime;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityInfo \u003d activityInfo.substring(3);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            int index \u003d activityInfo.indexOf(\" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                allocatedTime \u003d activityInfo.substring(0,index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                activityInfo \u003d activityInfo.substring(index + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                allocatedTime \u003d activityInfo;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                parseDuration(allocatedTime);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } catch (WrongDateFormatException w) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tagDelimiter !\u003d -1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activityInfo \u003d activityInfo.substring(3);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String [] tagString \u003d activityInfo.split(\" \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.tags.addAll(Arrays.asList(tagString));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "        return \"Started: \" + Parser.activityName;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private String getActivityName(int tagDelimiter, int allocateDelimiter) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tagDelimiter !\u003d -1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return this.parameters.substring(0,tagDelimiter).strip();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else if (allocateDelimiter !\u003d -1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return this.parameters.substring(0,allocateDelimiter).strip();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return this.parameters;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void parseDuration(String allocatedTime) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String[] tokenizedInputs;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        tokenizedInputs \u003d allocatedTime.split(\"/\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (tokenizedInputs.length !\u003d 3) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String hours \u003d tokenizedInputs[0] + \"H\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String minutes \u003d tokenizedInputs[1] + \"M\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String seconds \u003d tokenizedInputs[2] + \"S\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String duration \u003d \"PT\" + hours + minutes + seconds;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Parser.allocatedTime \u003d Duration.parse(duration);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 53,
      "siuhian": 72,
      "nigellenl": 28
    }
  },
  {
    "path": "src/main/java/jikan/command/ViewGoalsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import static jikan.Jikan.tagFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * Represents a command to view goals for tags in the activity list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class ViewGoalsCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    File tagFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private static final String TAG_FILE_PATH \u003d \"data/tag/tag.csv\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Constructor to create a new viewgoal command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param parameters the parameters of the goal command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public ViewGoalsCommand(String parameters, File tagFile) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        this.tagFile \u003d tagFile;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void executeCommand(ActivityList activityList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        HashMap\u003cString, Duration\u003e tagsGoals \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        populateTagList(tagFile, tagsGoals);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        getGoalData(activityList,tagsGoals);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private void getGoalData(ActivityList activityList, HashMap\u003cString, Duration\u003e tagsGoals) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        HashMap\u003cString, Duration\u003e tagsActual \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        for (Activity activity : activityList.activities) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            GraphCommand.extractTags(tagsActual, activity);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Ui.printGoals(tagsGoals, tagsActual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Populates task list from file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param dataFile Data file to populate from."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private void populateTagList(File dataFile, HashMap\u003cString, Duration\u003e tagsGoals) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            tagFile \u003d new File(TAG_FILE_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Scanner dataScanner \u003d new Scanner(tagFile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                parseDataLine(dataScanner.nextLine(), tagsGoals);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Data file not found. Could not load into the current session\u0027s tag list!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Invalid time frame!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(\"Error!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Parses the current line in the tag file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param s String to parse."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    private void parseDataLine(String s, HashMap\u003cString, Duration\u003e tagsGoals) throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        if (!s.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            List\u003cString\u003e strings \u003d Arrays.asList(s.split(\",\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Duration duration \u003d Duration.parse(strings.get(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            tagsGoals.put(strings.get(0), duration);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 83
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyNameException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * An exception that is thrown when the task name field is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EmptyNameException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyQueryException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * An exception that is thrown when the query for find or filter is not provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class EmptyQueryException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ananda-lye": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/EmptyTagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class EmptyTagException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidCleanCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class InvalidCleanCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidEditFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class InvalidEditFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidGraphCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class InvalidGraphCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/InvalidTimeFrameException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * An exception that is thrown when the time frame is invalid (e.g., the end time comes before the start time)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class InvalidTimeFrameException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/NoSuchActivityException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " * An exception that is thrown when the task name is unknown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class NoSuchActivityException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 7
    }
  },
  {
    "path": "src/main/java/jikan/exception/NoSuchTagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "public class NoSuchTagException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nigellenl": 4
    }
  },
  {
    "path": "src/main/java/jikan/exception/WrongDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class WrongDateFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 4
    }
  },
  {
    "path": "src/main/java/jikan/log/Log.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.log;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents a logger object to log user commands and outcomes to a logfile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "public class Log {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static Logger logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private static SimpleFormatter formatterTxt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public String logFilePath \u003d \"data/LogRecord.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static File logFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructor for a new logger."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Log() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger \u003d Logger.getLogger(Log.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        consoleHandler.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        logFile \u003d new File(logFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!logFile.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // Create file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                logFile.getParentFile().mkdirs(); // Create data directory (does nothing if directory already exists)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                logFile.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        FileHandler fileHandler \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            fileHandler \u003d new FileHandler(\"data/LogRecord.txt\", true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "        formatterTxt \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileHandler.setFormatter(formatterTxt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileHandler.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "        logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at FINE level."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the FINE message to be logged"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void makeFineLog(String message) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.FINE, message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at INFO level."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the INFO message to be logged"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void makeInfoLog(String message) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.INFO, message);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Creates a long entry at WARNING level."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param message the WARNING warning message to be logged"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public void makeWarningLog(String message) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        logger.log(Level.WARNING, message);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 25,
      "rdimaio": 34,
      "siuhian": 1,
      "nigellenl": 1,
      "ananda-lye": 19
    }
  },
  {
    "path": "src/main/java/jikan/log/LogCleaner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.log;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * A log cleaner class that does automated cleaning"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * for log files under the user\u0027s request."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class LogCleaner {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final String STATUS_FILE_PATH \u003d \"data/recycled/logStatus.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final String DATA_FILE_PATH \u003d \"data/recycled/logData.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final String LOG_FILE_PATH \u003d \"data/LogRecord.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private File status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private File recycledData;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public boolean toClean;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private int numberOfLogsToClean;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Constructor for the log cleaner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public LogCleaner() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        status \u003d new File(STATUS_FILE_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        recycledData \u003d new File(DATA_FILE_PATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        initialiseCleaner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        initialiseDataFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Initialise a data file containing the deleted logs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void initialiseDataFile() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            loadFile(recycledData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error loading/creating recycled file\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Activates/De-activates the auto cleanup of logs by checking the status file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void initialiseCleaner() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (loadCleaner(status)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Scanner sc \u003d new Scanner(status);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String status \u003d sc.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                int value \u003d Integer.parseInt(status);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                assert value \u003d\u003d 0 | value \u003d\u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                if (value \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    this.toClean \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    this.toClean \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                this.numberOfLogsToClean \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                FileWriter fw \u003d new FileWriter(status);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                fw.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                fw.write(\"10\" + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error loading/creating cleaning file.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Loads the status file and checks if it exists or not."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file status file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return true if the file exists and false otherwise."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation/loading of the status file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private boolean loadCleaner(File file) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Loads the data file that contains deleted logs."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file data file with the deleted logs."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation/loading of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void loadFile(File file) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Creates a new file if the specified file cannot be found in the given path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file the file to be created if it does not exist."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation of the file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void createFile(File file) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to activate/de-activate the auto cleanup for logs."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param status a boolean specifying whether the log cleaner should be activated or not."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the status file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void setStatus(boolean status) throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.toClean \u003d status;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File dataFile \u003d new File(STATUS_FILE_PATH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(dataFile));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (this.toClean) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"1\" + \"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.write(Integer.toString(this.numberOfLogsToClean) + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to set a value for the number of logs to clean."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param value an integer representing the number to clean."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the status file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void setNumberOfLogsToClean(int value) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        boolean status \u003d this.toClean;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File dataFile \u003d new File(STATUS_FILE_PATH);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.numberOfLogsToClean \u003d value;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter((dataFile)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"1\" + \"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.write(Integer.toString(value) + \"\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to clear up the live log file and move them to the recycled log file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the live log file and"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     *         recycled log file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void autoClean() throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        List\u003cString\u003e logsForRecycling \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        List\u003cString\u003e logsLeftInData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (this.toClean) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            File liveData \u003d new File(LOG_FILE_PATH);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Scanner recycledDataScanner \u003d new Scanner(recycledData);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Scanner liveDataScanner \u003d new Scanner(liveData);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            while (recycledDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d recycledDataScanner.nextLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                logsForRecycling.add(line);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            while (numberOfLogsToClean !\u003d 0) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                if (!liveDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d liveDataScanner.nextLine();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                logsForRecycling.add(line);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                numberOfLogsToClean -\u003d 1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            while (liveDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d liveDataScanner.nextLine();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                logsLeftInData.add(line);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            BufferedWriter recycledDataWriter \u003d new BufferedWriter(new FileWriter(recycledData));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            for (String line : logsForRecycling) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                recycledDataWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            recycledDataWriter.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            BufferedWriter liveDataWriter \u003d new BufferedWriter(new FileWriter(liveData));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            for (String line : logsLeftInData) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                liveDataWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            liveDataWriter.close();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 195
    }
  },
  {
    "path": "src/main/java/jikan/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.storage.StorageCleaner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.AbortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.ByeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.CleanCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.ContinueCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.EndCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.FilterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.GoalCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.GraphCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.StartCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.command.ViewGoalsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.LogCleaner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.storage.StorageCleaner;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.log.Log;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import static jikan.log.Log.makeInfoLog;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " * Represents the object which parses user input to relevant functions for the execution of commands."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static LocalDateTime startTime \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static LocalDateTime endTime \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static String activityName \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static Set\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public StorageCleaner cleaner;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public LogCleaner logcleaner;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static String[] tokenizedInputs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    String instruction;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static Log logger \u003d new Log();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "    // flag to check if the current activity is a continued one"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static int continuedIndex \u003d -1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Parses user commands to relevant functions to carry out the commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param scanner      scanner object which reads user input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param activityList the list of activities"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public Command parseUserCommands(Scanner scanner, ActivityList activityList, StorageCleaner cleaner,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                                     File tagFile) throws"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            EmptyNameException, NullPointerException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "        makeInfoLog(\"Starting to parse inputs.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        tokenizedInputs \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        instruction \u003d tokenizedInputs[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        switch (instruction) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new ByeCommand(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case \"start\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new StartCommand(tokenizedInputs[1], scanner);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "                makeInfoLog(\"Activity started without activity name\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case \"end\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new EndCommand(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"abort\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new AbortCommand(null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "            if (tokenizedInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new ListCommand(null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new ListCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new DeleteCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new FindCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        case \"filter\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new FilterCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new EditCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": "                makeInfoLog(\"Edit command failed as there was no existing activity name provided.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        case \"clean\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                command \u003d new CleanCommand(tokenizedInputs[1], this.cleaner, this.logcleaner);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"No keyword was given.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        case \"continue\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new ContinueCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"Activity name cannot be empty!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": "                makeInfoLog(\"Continue command failed as there was no activity name provided.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "        case \"graph\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": "                command \u003d new GraphCommand(tokenizedInputs[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"Please input an integer for the time interval.\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        + \"If you\u0027d like to graph by tags, enter the command \u003cgraph tags\u003e.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        case \"goal\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (tokenizedInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    command \u003d new ViewGoalsCommand(null,tagFile);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    command \u003d new GoalCommand(tokenizedInputs[1], scanner);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                Ui.printDivider(\"Tag name cannot be empty!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            parseDefault();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Method to parse user inputs that are not recognised."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "btricec"
        },
        "content": "    private void parseDefault() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "btricec"
        },
        "content": "        makeInfoLog(\"Invalid command entered\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Ui.printDivider(line);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Resets parameters, called when an activity is ended or aborted."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void resetInfo() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "btricec"
        },
        "content": "        startTime \u003d null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activityName \u003d null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 5,
      "btricec": 67,
      "siuhian": 17,
      "nigellenl": 70,
      "ananda-lye": 33
    }
  },
  {
    "path": "src/main/java/jikan/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Class that holds the path and File object for the current data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** Path to current data file. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static String dataFilePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /** File object for current data file. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public File dataFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public ActivityList activityList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Constructs a Storage object for the input file path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFilePath The data file\u0027s file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public Storage(String dataFilePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        this.dataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Writes the input string to file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param s The input string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void writeToFile(String s) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dataFilePath, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        fw.write(s + System.lineSeparator());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Loads the data file. Creates file and directories if data file did not previously exist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return True if file previously existed (and was not created); False if file did not exist and was created."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public boolean loadFile() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Create data file if it does not exist already"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            createDataFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            return false; // false \u003d file didn\u0027t previously exist, so it was created"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return true; // true \u003d file previously existed, and was not created"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Creates a file and any non-existing directories to that file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while creating the file or directories."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private void createDataFile() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile.getParentFile().mkdirs(); // Create data directory (does nothing if directory already exists)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        dataFile.createNewFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Creates ActivityList and loads data from data file if the data file previously existed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Otherwise, an empty task list is initialized."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return an ActivityList object containing a list of activities provided by the data file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public ActivityList createActivityList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (loadFile()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                activityList \u003d new ActivityList(dataFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error loading/creating data file.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Clears the data file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws FileNotFoundException If file is not found."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public void clearFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "        PrintWriter writer \u003d new PrintWriter(dataFile);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "        writer.print(\"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 59,
      "btricec": 15,
      "siuhian": 23,
      "nigellenl": 2
    }
  },
  {
    "path": "src/main/java/jikan/storage/StorageCleaner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * A storage cleaner class that does automated cleaning"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siuhian"
        },
        "content": " * for data files under the user\u0027s request."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class StorageCleaner {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final String STATUS_FILE_PATH \u003d \"data/recycled/status.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final String DATA_FILE_PATH \u003d \"data/recycled/data.csv\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private File status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private File recycledData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public boolean toClean;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private int numberOfActivitiesToClean;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Constructor for the storage cleaner."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param storage an object that holds the data on the list of activities."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public StorageCleaner(Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        status \u003d new File(STATUS_FILE_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        recycledData \u003d new File(DATA_FILE_PATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        initialiseCleaner();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        initialiseDataFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Initialises a data file containing the deleted entries."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void initialiseDataFile() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            loadFile(recycledData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error loading/creating recycled file\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Activates/De-activates the auto cleanup by checking the status file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void initialiseCleaner() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (loadCleaner(status)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                Scanner sc \u003d new Scanner(status);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String status \u003d sc.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                int value \u003d Integer.parseInt(status);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                assert value \u003d\u003d 0 || value \u003d\u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                if (value \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    this.toClean \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    this.toClean \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                this.numberOfActivitiesToClean \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                FileWriter fw \u003d new FileWriter(status);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                fw.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                fw.write(\"3\" + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(\"Error loading/creating cleaning file.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Loads the status file and checks if the file exists or not."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file status file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @return true if the file exists and false otherwise."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation/loading of the status file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private boolean loadCleaner(File file) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Loads the data file that contains deleted entries."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file data file with the deleted entries."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation/loading of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void loadFile(File file) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Creates a new file if the specified file cannot be found in the given path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param file the file to be created if it does not exist."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with the creation of the file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private void createFile(File file) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to activate/de-activate the auto cleanup."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param status a boolean specifying whether the cleaner should be activated or not."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the status file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void setStatus(boolean status) throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.toClean \u003d status;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File dataFile \u003d new File(STATUS_FILE_PATH);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(dataFile));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (this.toClean) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"1\" + \"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.write(Integer.toString(this.numberOfActivitiesToClean) + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to set a value for the number of activities to clean."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param value an integer representing the number to clean."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the status file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void setNumberOfActivitiesToClean(int value) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        boolean status \u003d this.toClean;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        File dataFile \u003d new File(STATUS_FILE_PATH);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        this.numberOfActivitiesToClean \u003d value;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(dataFile));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (status) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"1\" + \"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            writer.write(\"0\" + \"\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.write(Integer.toString(value) + \"\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to clear up the live data file and move them to the recycled data file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @throws IOException if there is an error with reading/writing to the live data file and"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     *         recycled data file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void autoClean() throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        List\u003cString\u003e activitiesForRecycling \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        List\u003cString\u003e activitiesLeftInData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        if (this.toClean) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String filePath \u003d storage.dataFilePath;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            File liveData \u003d new File(filePath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Scanner recycledDataScanner \u003d new Scanner(recycledData);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Scanner liveDataScanner \u003d new Scanner(liveData);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            while (recycledDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d recycledDataScanner.nextLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                activitiesForRecycling.add(line);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            while (numberOfActivitiesToClean !\u003d 0) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                if (!liveDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d liveDataScanner.nextLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                activitiesForRecycling.add(line);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                numberOfActivitiesToClean -\u003d 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            while (liveDataScanner.hasNext()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                String line \u003d liveDataScanner.nextLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                activitiesLeftInData.add(line);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            BufferedWriter recycledDataWriter \u003d new BufferedWriter(new FileWriter(recycledData));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            for (String line : activitiesForRecycling) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                recycledDataWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            recycledDataWriter.close();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            BufferedWriter liveDataWriter \u003d new BufferedWriter(new FileWriter(liveData));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            for (String line : activitiesLeftInData) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                liveDataWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            liveDataWriter.close();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siuhian": 196
    }
  },
  {
    "path": "src/main/java/jikan/storage/StorageHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " * Class containing useful functions for modifying the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageHandler {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Removes the line whose index matches lineNumber from file at dataFilePath."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Index of line to remove."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param storage Storage object which contains path to save file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void removeLine(int lineNumber, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Read file into list of strings, where each string is a line in the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(Storage.dataFilePath),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "                StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "        //int removedIndex \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileContent.remove(lineNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "        saveNewList(fileContent, storage.dataFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Remove line from fileContent list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        removedIndex \u003d removeLineFromList(lineNumber, fileContent, removedIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Rewrite list into data file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Files.write(Paths.get(dataFilePath), fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Update indexes of subsequent lines"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        updateIndexes(fileContent, removedIndex, dataFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Saves the updated activity list to a list of strings to write to the save file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param activities New activity list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param storage Storage object to obtain file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void updateField(ArrayList\u003cActivity\u003e activities, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (Activity a : activities) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            fileContent.add(a.toData());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "        saveNewList(fileContent, storage.dataFile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Saves a the updated activity list to the csv file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param newList The list containing the updated data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param dataFile The file to save to."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @throws IOException If an error occurs while writing the new list to file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void saveNewList(List\u003cString\u003e newList, File dataFile) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "        FileOutputStream fileOutputStream \u003d new FileOutputStream(dataFile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(fileOutputStream);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (String s : newList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "            printWriter.println(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "        fileOutputStream.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Removes line from a list based on its index. Returns index at which the line was removed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Index of line to remove."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param list List of strings containing lines, each with a starting index."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param removedIndex Index at which line was removed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return Index of the removed line."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static int removeLineFromList(int lineNumber, List\u003cString\u003e list, int removedIndex) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Iterate through the lines"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // If the current line matches the taskId"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (list.get(i).startsWith(String.valueOf(lineNumber))) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // Remove current line"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                removedIndex \u003d i; // Store index of removed line to use as initial index of next loop"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                list.remove(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return removedIndex;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * After a line has been removed, updates subsequent indexes."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param fileContent List of strings from the data file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param removedIndex Index at which line was removed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFilePath Path to data file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing to file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static void updateIndexes(List\u003cString\u003e fileContent, int removedIndex, String dataFilePath)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Update indexes of subsequent tasks (e.g. if you remove task 2, task 3 becomes task 2)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d removedIndex; i \u003c fileContent.size(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Get current comma separated string"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            String currString \u003d fileContent.get(i);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            String updatedString \u003d decrementIndex(currString, i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Replace the line with the updated string"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            replaceLine(i + 1, updatedString, dataFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Decrements index at beginning of string by 1."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param currString String whose index must be decremented."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param i Index that the currString\u0027s index must be set to."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @return Original string with its index decremented by 1."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static String decrementIndex(String currString, int i) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Split into different cells"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        List\u003cString\u003e cells \u003d Arrays.asList(currString.split(\",\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Change first cell (taskID) to new ID (taskID-1)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Task 3 becomes task 2, task 4 becomes task 3, until end of list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        cells.set(0, String.valueOf(i));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Recombine the comma separated string"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        return String.join(\",\", cells);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Replaces line in a data file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Index of the line to replace."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param newString String that replaces the original line."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param dataFilePath Path to data file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @throws IOException If an error occurs while writing to file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public static void replaceLine(int lineNumber, String newString, String dataFilePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Read file into list of strings, where each string is a line in the file"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(dataFilePath), StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Replace line in the list of strings"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        replaceLineInList(lineNumber, newString, fileContent);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Write new list of strings to file"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Files.write(Paths.get(dataFilePath), fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * Replaces a line in a list of Strings."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param lineNumber Number at which line must be replaced."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param newString String that replaces the original string."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     * @param list List of strings."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    private static void replaceLineInList(int lineNumber, String newString, List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Iterate through the lines"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // If the current line matches the taskId"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (list.get(i).startsWith(String.valueOf(lineNumber))) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                // Replace it with the new task string"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                list.set(i, newString);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 135,
      "btricec": 50,
      "nigellenl": 1
    }
  },
  {
    "path": "src/main/java/jikan/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siuhian"
        },
        "content": "package jikan.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siuhian"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static jikan.Jikan.lastShownList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siuhian"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public static final String GREETING \u003d \"Jikan\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static final String DIVIDER \u003d \"-------------------------------\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            + \"------------------------------------------------------------\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static final int PROGRESSCONVERTER \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static final int TOTALBARS \u003d 50;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static final DecimalFormat df2 \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints the logo and greeting so users know the app is working. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(GREETING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints exit message and exits the app. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void exitFromApp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(\" Bye! See you again.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /** Prints divider between user input and app feedback. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void printDivider(String line) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    private static void printTableFormat(ActivityList activityList, int index, boolean gotTags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "        long durationInNanos \u003d (activityList.get(index).getDuration()).toNanos();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        long allocatedTimeInNanos \u003d (activityList.get(index).getAllocatedTime()).toNanos();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String duration \u003d formatString(durationInNanos);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String allocatedTime \u003d formatString(allocatedTimeInNanos);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String printIndex \u003d String.valueOf(index + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (index \u003c 9) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "            printIndex \u003d String.valueOf(index + 1) + \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "        if (gotTags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(String.format(\"%s %s %-25s %s %-10s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    printIndex, \"|\", activityList.get(index).getName(), \"|\", duration, \"|\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    allocatedTime, \"|\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    activityList.get(index).getDate().toString(), \"|\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    activityList.get(index).getTags().toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            System.out.println(String.format(\"%s %s %-25s %s %-10s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "                    printIndex, \"|\", activityList.get(index).getName(), \"|\", duration, \"|\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    allocatedTime, \"|\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    activityList.get(index).getDate().toString(), \"|\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                    \"\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    private static String formatString(long timeInNanos) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        return String.format(\"%02d:%02d:%02d\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toHours(timeInNanos),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toMinutes(timeInNanos)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                        - TimeUnit.HOURS.toMinutes(TimeUnit.NANOSECONDS.toHours(timeInNanos)),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                TimeUnit.NANOSECONDS.toSeconds(timeInNanos)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                        - TimeUnit.MINUTES.toSeconds(TimeUnit.NANOSECONDS.toMinutes(timeInNanos)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * Prints the results from a \u0027find\u0027 or \u0027filter\u0027 command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param resultsList the list of activities to print"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static void printResults(ActivityList resultsList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (resultsList.activities.size() \u003e 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Here are the matching activities in your list:\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(String.format(\"   %s %-25s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    \"|\", \"Name\", \"|\", \"Duration\", \"|\", \"Date\", \"|\", \"Tags\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            for (int i \u003d 0; i \u003c resultsList.getSize(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                if (resultsList.get(i).getTags() !\u003d null \u0026\u0026 !resultsList.get(i).getTags().isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    printTableFormat(resultsList, i, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                    printTableFormat(resultsList, i, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"There are no activities matching that description.\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    /** Prints all the activities in a list. */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    public static void printList(ActivityList activityList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(\"Your completed activities:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(String.format(\"   %s %-25s %s %-10s %s %-10s %s %-10s %s %s\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                \"|\", \"Name\", \"|\", \"Duration\", \"|\", \"Target\", \"|\", \"Date\", \"|\", \"Tags\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (int i \u003d 0; i \u003c activityList.getSize(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (activityList.get(i).getTags() !\u003d null \u0026\u0026 !activityList.get(i).getTags().isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "btricec"
        },
        "content": "                printTableFormat(activityList, i, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "btricec"
        },
        "content": "                printTableFormat(activityList, i, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Prints a graph of the last shown list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param interval The time interval for the graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void printActivityGraph(int interval) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(String.format(\"%-25s %s %s\", \"Name\", \"|\", \"Duration\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "btricec"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.getSize(); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Activity activity \u003d lastShownList.get(i);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d activity.getDuration();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "btricec"
        },
        "content": "            double minutes \u003d duration.toMinutes() / (double) interval;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int scaledMinutes \u003d (int) Math.round(minutes);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.print(String.format(\"%-25s %s\", activity.getName(), \"|\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (int j \u003d 0; j \u003c scaledMinutes; j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "btricec"
        },
        "content": "                System.out.print(\"*\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * Prints a graph based on activity tags."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "btricec"
        },
        "content": "     * @param tags The set of tags to be graphed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "btricec"
        },
        "content": "    public static void printTagsGraph(HashMap\u003cString, Duration\u003e tags) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(String.format(\"%-10s %s %s\", \"Tag\", \"|\", \"Duration\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.forEach((key,value) -\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "btricec"
        },
        "content": "            double minutes \u003d value.toMinutes() / 10.0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "btricec"
        },
        "content": "            int scaledMinutes \u003d (int) Math.round(minutes);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.print(String.format(\"%-10s %s\", key, \"|\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "btricec"
        },
        "content": "            for (int j \u003d 0; j \u003c scaledMinutes; j++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "btricec"
        },
        "content": "                System.out.print(\"*\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "btricec"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "btricec"
        },
        "content": "        });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "btricec"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /** Print goals as a table."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * Print goals as a table."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagsGoals the goals set for each tag."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param tagsActual the actual duration spent for each tag."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static void printGoals(HashMap\u003cString, Duration\u003e tagsGoals, HashMap\u003cString, Duration\u003e tagsActual) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        System.out.println(String.format(\"   %-15s %s %-15s %s %-15s %s %s\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                \"Tag\", \"|\", \"Goal\", \"|\", \"Actual\", \"|\", \"Duration left\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        tagsGoals.forEach((key, value) -\u003e {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String message;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String goalDuration \u003d convertDuration(tagsGoals.get(key));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String actualDuration \u003d convertDuration(tagsActual.get(key));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            Duration difference \u003d tagsGoals.get(key).minus(tagsActual.get(key));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            String diffDuration \u003d convertDuration(difference);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            if (difference.isNegative()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                if (diffDuration.equals(\"00:00:00\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    message \u003d \" [You have met your goal!]\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    message \u003d \" [You have exceeded your goal!]\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                message \u003d \" [You have not met your goal!]\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "            System.out.println(String.format(\"   %-15s %s %-15s %s %-15s %s %s\", key, \"|\", goalDuration,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                    \"|\", actualDuration, \"|\", diffDuration + message));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /** Prints a progress message and progress bar based on the percentage of allocate time achieved."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     * @param percent percentage of allocated time achieved"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static void printProgressMessage(double percent) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        if (percent \u003c 50) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Try harder next time! Here\u0027s your progress:\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else if (percent \u003c 100) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Almost there ! Here\u0027s your progress:\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            System.out.println(\"Great job! Here\u0027s your progress:\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        int starsLeft \u003d (int) (percent / PROGRESSCONVERTER);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.print(\"Progress for \" + Parser.activityName + \": \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        for (int i \u003d 0; i \u003c TOTALBARS; i++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            if (starsLeft \u003e 0) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                System.out.print(\"*\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                starsLeft--;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.println(\"|\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /** Method to print progress bar without message."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param percent percentage of allocated time achieved."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityName name of a particular activity."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static void printProgressBar(double percent, String activityName) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        int starsLeft \u003d (int) (percent / PROGRESSCONVERTER);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        String line \u003d \"Progress for \" + activityName + \": \";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.print(String.format(\"%-35s\", line));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.print(\"|\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        for (int i \u003d 0; i \u003c TOTALBARS; i++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (starsLeft \u003e 0) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                System.out.print(\"*\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                starsLeft--;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(\"|  \" + df2.format(percent) + \"%\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siuhian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * Method to graph out all the targets."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     * @param activityList a list of all activities."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siuhian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    public static void graphTargets(ActivityList activityList) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        for (int i \u003d 0; i \u003c activityList.getSize(); i++) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (activityList.get(i).getAllocatedTime() \u003d\u003d Duration.parse(\"PT0S\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            double percent \u003d activityList.get(i).getProgressPercent();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            double max \u003d 100;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            if (percent \u003e max) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "siuhian"
        },
        "content": "                percent \u003d max;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            String activityName \u003d activityList.get(i).getName();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            printProgressBar(percent, activityName);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "siuhian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    /** Converts duration object to a string for printing."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @param dur the duration object."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     * @return duration the duration as a string."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public static String convertDuration(Duration dur) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        long durationInNanos \u003d dur.toNanos();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        String duration \u003d String.format(\"%02d:%02d:%02d\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                TimeUnit.NANOSECONDS.toHours(durationInNanos),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                TimeUnit.NANOSECONDS.toMinutes(durationInNanos)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        - TimeUnit.HOURS.toMinutes(TimeUnit.NANOSECONDS.toHours(durationInNanos)),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                TimeUnit.NANOSECONDS.toSeconds(durationInNanos)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "                        - TimeUnit.MINUTES.toSeconds(TimeUnit.NANOSECONDS.toMinutes(durationInNanos)));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "siuhian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 67,
      "rdimaio": 1,
      "siuhian": 99,
      "nigellenl": 47,
      "ananda-lye": 58
    }
  },
  {
    "path": "src/test/java/jikan/activity/ActivityListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "class ActivityListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    void getIndex() throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "        ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        HashSet\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(activity2, activities.get(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        activities.storage.dataFile.delete();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 7,
      "btricec": 22,
      "siuhian": 4,
      "ananda-lye": 4
    }
  },
  {
    "path": "src/test/java/jikan/activity/ActivityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "class ActivityTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ananda-lye"
        },
        "content": "    //the tags is empty here as adding needs to be done in a method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    Activity activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siuhian"
        },
        "content": "            activity \u003d new Activity(\"Activity\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getDuration() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(\"PT2H\", activity.getDuration().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(\"Activity\", activity.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void getTags() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(tags, activity.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 10,
      "btricec": 29,
      "siuhian": 2,
      "ananda-lye": 3
    }
  },
  {
    "path": "src/test/java/jikan/command/AbortCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "class AbortCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeAbort() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Parser.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Command command \u003d new AbortCommand(null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNull(Parser.startTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (EmptyNameException | InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Filed error.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 25
    }
  },
  {
    "path": "src/test/java/jikan/command/ContinueCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "class ContinueCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "    ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeContinue() throws InterruptedException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String parameters \u003d \"Activity2\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new ContinueCommand(parameters);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "            LocalDateTime startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(startTime.getMinute(), Parser.startTime.getMinute());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "            final Duration initial \u003d activities.get(1).getDuration();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Thread.sleep(2000);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // End Activity2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new EndCommand(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration elapsed \u003d initial.plus(Duration.between(startTime, LocalDateTime.now()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Duration duration \u003d activities.get(1).getDuration();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(elapsed.toMinutes(), duration.toMinutes());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (EmptyNameException | InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Error.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 62,
      "siuhian": 4
    }
  },
  {
    "path": "src/test/java/jikan/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "    ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeDelete() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Invalid time frame.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String parameters \u003d \"Activity2\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Command command \u003d new DeleteCommand(parameters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (EmptyNameException | InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(activities.get(1).getName(), \"Activity3\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "        assertEquals(activities.getSize(), 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 59,
      "siuhian": 4
    }
  },
  {
    "path": "src/test/java/jikan/command/StartCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "package jikan.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.exception.InvalidTimeFrameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "btricec"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "class StartCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "    ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "    HashSet\u003cString\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void populateActivityList() throws InvalidTimeFrameException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.storage \u003d new Storage(\"data/activityList_test.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.activities.clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activities.storage.clearFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Could not find file.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "        tags.add(\"tag2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(\"2020-01-01T08:00:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "btricec"
        },
        "content": "        LocalDateTime endTime \u003d  LocalDateTime.parse(\"2020-01-01T10:00:00\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "btricec"
        },
        "content": "        Duration duration \u003d Duration.between(startTime, endTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Duration allocatedTime \u003d Duration.parse(\"PT0S\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity1 \u003d new Activity(\"Activity1\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity2 \u003d new Activity(\"Activity2\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siuhian"
        },
        "content": "        Activity activity3 \u003d new Activity(\"Activity3\", startTime, endTime, duration, tags, allocatedTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "btricec"
        },
        "content": "        activities.add(activity3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeStart() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String parameters \u003d \"Activity 3 /t tag tag1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new StartCommand(parameters, scanner);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "btricec"
        },
        "content": "            HashSet\u003cString\u003e activity3Tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activity3Tags.add(\"tag\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "btricec"
        },
        "content": "            activity3Tags.add(\"tag1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNotNull(Parser.startTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(Parser.activityName, \"Activity 3\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(activity3Tags, Parser.tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "btricec"
        },
        "content": "            // end started activity to test continue feature"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command \u003d new EndCommand(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (EmptyNameException | InvalidTimeFrameException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeStartContinued() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String data \u003d \"Yes\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.setIn(new ByteArrayInputStream(data.getBytes()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String parameters \u003d \"Activity1\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new StartCommand(parameters, scanner);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertEquals(Parser.activityName, \"Activity1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNotNull(Parser.startTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (InvalidTimeFrameException | EmptyNameException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "btricec"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "btricec"
        },
        "content": "    void executeStartNotContinued() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "btricec"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "btricec"
        },
        "content": "            populateActivityList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String data \u003d \"No\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.setIn(new ByteArrayInputStream(data.getBytes()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "btricec"
        },
        "content": "            String parameters \u003d \"Activity1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command command \u003d new StartCommand(parameters, scanner);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "btricec"
        },
        "content": "            command.executeCommand(activities);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNull(Parser.startTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "btricec"
        },
        "content": "            assertNull(Parser.activityName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "btricec"
        },
        "content": "        } catch (InvalidTimeFrameException | EmptyNameException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "btricec"
        },
        "content": "            System.out.println(\"Field error.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "btricec"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "btricec"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "btricec"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "btricec": 103,
      "siuhian": 4
    }
  },
  {
    "path": "src/test/java/jikan/parser/ExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "package jikan.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.activity.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.AbortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "import jikan.command.EndCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.EmptyNameException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import jikan.exception.NoSuchActivityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "class ExceptionTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "    Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void testEmptyNameException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Assertions.assertThrows(EmptyNameException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.tokenizedInputs \u003d new String[]{\"start\", \"\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.parseStart(activityList, scanner);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    public void testNoSuchActivityException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        Assertions.assertThrows(NoSuchActivityException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Parser.startTime \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command endCommand \u003d new EndCommand(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "btricec"
        },
        "content": "            endCommand.executeCommand(activityList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "btricec"
        },
        "content": "            Command abortCommand \u003d new AbortCommand(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "btricec"
        },
        "content": "            abortCommand.executeCommand(activityList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "btricec"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nigellenl"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nigellenl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "btricec": 16,
      "nigellenl": 28
    }
  },
  {
    "path": "src/test/java/jikan/storage/StorageHandlerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageHandlerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void removeLine() throws IOException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with tests in StorageTest"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line1 \u003d \"a\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line2 \u003d \"b\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "        String line3 \u003d \"c\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String writtenString \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(line3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "btricec"
        },
        "content": "        StorageHandler.removeLine(1, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            writtenString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(line1, writtenString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(line3, writtenString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void test_replaceLine() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(\"1. a\", \"2. b\", \"10. c\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String replace \u003d \"This string has been replaced.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with tests in StorageTest)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            storage.writeToFile(list.get(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        StorageHandler.replaceLine(2, replace, storage.dataFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String replacedString \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            replacedString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            // Check second line"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            if (j \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                assertEquals(replace, replacedString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 77,
      "btricec": 4
    }
  },
  {
    "path": "src/test/java/jikan/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "package jikan.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void loadFile_fileDoesNotExist() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // First time calling loadFile, so file does not exist yet"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertFalse(storage.loadFile());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void loadFile_fileExists() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // First time calling loadFile, so file does not exist yet"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // loadFile was called once already, so now file exists"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertTrue(storage.loadFile());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testCreateDataFile() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"data/test.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertTrue(storage.dataFile.exists());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testCreateDataFile_IoException() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(\"//\\\\-@#4/\\\\/**3\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        IOException thrown \u003d assertThrows("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                IOException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                storage::loadFile,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "                \"IOException during file creation\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rdimaio"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    public void testWriteToFile() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // Generate random suffix for file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        // (quick solution to avoid conflicts with other tests)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        int random \u003d (int )(Math.random() * 500 + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String filepath \u003d \"data/test\" + random + \".txt\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.loadFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String originalString \u003d \"This is a test string.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        String writtenString \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.writeToFile(originalString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        Scanner dataScanner \u003d new Scanner(storage.dataFile);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        while (dataScanner.hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "            writtenString \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        assertEquals(originalString, writtenString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "        storage.dataFile.delete();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rdimaio": 74
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 1 /t tag"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 2 /t tag"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 3 /t tag1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "btricec"
        },
        "content": "continue activity 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "end"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "btricec"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "btricec"
        },
        "content": "filter tag"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "btricec"
        },
        "content": "find 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "btricec"
        },
        "content": "find 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "btricec"
        },
        "content": "start activity 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "btricec"
        },
        "content": "yes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "btricec"
        },
        "content": "list week"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "btricec"
        },
        "content": "graph"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "btricec"
        },
        "content": "graph 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "btricec"
        },
        "content": "start"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "btricec"
        },
        "content": "end"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "btricec"
        },
        "content": "abort"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "btricec"
        },
        "content": "hi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "btricec"
        },
        "content": "filter"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "btricec"
        },
        "content": "find"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "btricec"
        },
        "content": "delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "btricec"
        },
        "content": "delete activity 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "btricec"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rdimaio"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "btricec": 27,
      "rdimaio": 2
    }
  }
]
